fix_commit_hash,fix_commit_date,bug_commit_diff,fix_commit_diff,bug_id,bug_commit_hash,bug_commit_message,fix_id,fix_commit_message,bug_commit_date,bug_patch_title,bug_summary,fix_patch_title,fix_summary
44ea5049ca2106b8f810f2489f6a0f39a768acf8,2020-06-29T16:22:00+00:00,"diff -r 92b6a058907f -r 65126f431e53 db/sqlite3/src/Makefile.in
--- a/db/sqlite3/src/Makefile.in	Mon Jan 16 16:15:57 2012 -0500
+++ b/db/sqlite3/src/Makefile.in	Tue Jan 24 13:41:32 2012 +0100
@@ -145,6 +145,14 @@
 DEFINES += -DSQLITE_DEFAULT_FILE_PERMISSIONS=0600
 endif
 
+# Force using malloc_usable_size when building with jemalloc because _msize
+# causes assertions on Win64. See bug 719579.
+ifeq ($(OS_ARCH),WINNT)
+ifdef MOZ_MEMORY
+DEFINES += -DHAVE_MALLOC_USABLE_SIZE
+endif
+endif
+
 include $(topsrcdir)/config/rules.mk
 
 # next line allows use of MOZ_OBJDIR in .mozconfig with older gcc on BeOS, maybe others
","diff -r 8fe985b593db -r 44ea5049ca21 memory/build/mozjemalloc.cpp
--- a/memory/build/mozjemalloc.cpp	Mon Jun 29 23:28:02 2020 +0000
+++ b/memory/build/mozjemalloc.cpp	Mon Jun 29 16:22:50 2020 +0000
@@ -4851,7 +4851,7 @@
 #endif
 
 #ifdef XP_WIN
-void* _recalloc(void* aPtr, size_t aCount, size_t aSize) {
+MOZ_EXPORT void* _recalloc(void* aPtr, size_t aCount, size_t aSize) {
   size_t oldsize = aPtr ? AllocInfo::Get(aPtr).Size() : 0;
   CheckedInt<size_t> checkedSize = CheckedInt<size_t>(aCount) * aSize;
 
@@ -4876,7 +4876,7 @@
 
 // This impl of _expand doesn't ever actually expand or shrink blocks: it
 // simply replies that you may continue using a shrunk block.
-void* _expand(void* aPtr, size_t newsize) {
+MOZ_EXPORT void* _expand(void* aPtr, size_t newsize) {
   if (AllocInfo::Get(aPtr).Size() >= newsize) {
     return aPtr;
   }
@@ -4884,5 +4884,7 @@
   return nullptr;
 }
 
-size_t _msize(void* aPtr) { return DefaultMalloc::malloc_usable_size(aPtr); }
+MOZ_EXPORT size_t _msize(void* aPtr) {
+  return DefaultMalloc::malloc_usable_size(aPtr);
+}
 #endif
diff -r 8fe985b593db -r 44ea5049ca21 third_party/sqlite3/src/moz.build
--- a/third_party/sqlite3/src/moz.build	Mon Jun 29 23:28:02 2020 +0000
+++ b/third_party/sqlite3/src/moz.build	Mon Jun 29 16:22:50 2020 +0000
@@ -67,11 +67,10 @@
     # default to user readable only to fit Android security model
     DEFINES['SQLITE_DEFAULT_FILE_PERMISSIONS'] = '0600'
 
-# Force using malloc_usable_size when building with jemalloc because _msize
-# causes assertions on Win64. See bug 719579.
-if CONFIG['OS_ARCH'] == 'WINNT' and CONFIG['MOZ_MEMORY']:
-    DEFINES['HAVE_MALLOC_USABLE_SIZE'] = True
-    DEFINES['SQLITE_WITHOUT_MSIZE'] = True
+# Force using _msize on mingw, as sqlite3 only enables it with MSVC.
+if CONFIG['OS_TARGET'] == 'WINNT' and CONFIG['CC_TYPE'] != 'clang-cl':
+    DEFINES['SQLITE_USE_MALLOC_H'] = True
+    DEFINES['SQLITE_USE_MSIZE'] = True
 
 # Omit unused functions to save some library footprint.
 DEFINES['SQLITE_OMIT_DEPRECATED'] = True
",719579,65126f431e53e1eadc66c1e4e6dfacf7796f6f60,"Bug 719579 - Force SQLite to use malloc_usable_size when jemalloc is used.
r=sdwilsh",1200075,"Bug 1200075 - Do not avoid sqlite3 using _msize. r=froydnj

It was setup this way in bug 719579 for legitimate reasons (because
_msize would end up using the system symbol, which would crash trying to
get the size information from jemalloc allocations), but these reasons
don't apply anymore: back then the linking situation was different, and
nowadays, mozglue.dll exports its own _msize which plugs into
mozjemalloc, and sqlite is folded into nss3.dll, which links against
mozglue.dll, such that using _msize on mozjemalloc allocations works.

For some reason, while _msize (and other similar functions) are exported
from mozglue.dll without an explicit instruction to do so on clang-cl
builds, that's not the case for mingw builds (presumably related to the
definition of these functions in system headers, or lack thereof). So
we also add MOZ_EXPORT for them.

Differential Revision: https://phabricator.services.mozilla.com/D81286",2012-01-24T13:41:00+01:00,Force SQLite to use malloc_usable_size with jemalloc,"the newer version of SQLite tries to use _msize on Windows to replace the lack of malloc_usable_size.
For some reason when we build SQLite we end up not using the jemalloc version of _msize, and this causes heap assertions on Win64. I suspect some building order fancy due to the fact both libmozsqlite and libmozglue are shared and when building sqlite the compiler just see _msize as an extern.

Btw, we can tell SQLite that we have a proper malloc_usable_size function to use, so that it just goes through that.",Fix malloc_usable_size situation for SQLite on Windows,"Windows builds of SQLite warn about malloc_usable_size not being available.
This is because we set HAVE_MALLOC_USABLE_SIZE and SQLITE_WITHOUT_MSIZE due to
mozglue exposing malloc_usable_size.

glandium says the fix is to add this:

> ['-FI', TOPOBJDIR + '/dist/include/mozmemory.h'] 

to CFLAGS in the branch that adds HAVE_MALLOC_USABLE_SIZE/SQLITE_WITHOUT_MSIZE,
in db/sqlite3/src/moz.build."
695cbcabf7fe8ce0bdb218baccd3758e416b2907,2020-07-24T14:23:00+00:00,"diff -r b4d2343fff9d -r 55888632fa91 dom/base/nsGlobalWindow.cpp
--- a/dom/base/nsGlobalWindow.cpp	Thu May 03 13:59:51 2012 +0300
+++ b/dom/base/nsGlobalWindow.cpp	Thu May 03 09:15:38 2012 -0700
@@ -7063,6 +7063,9 @@
                      bool aSearchInFrames, bool aShowDialog,
                      bool *aDidFind)
 {
+  if (Preferences::GetBool(""dom.disable_window_find"", false))
+    return NS_ERROR_NOT_AVAILABLE;
+
   FORWARD_TO_OUTER(Find, (aStr, aCaseSensitive, aBackwards, aWrapAround,
                           aWholeWord, aSearchInFrames, aShowDialog, aDidFind),
                    NS_ERROR_NOT_INITIALIZED);
diff -r b4d2343fff9d -r 55888632fa91 dom/tests/mochitest/bugs/Makefile.in
--- a/dom/tests/mochitest/bugs/Makefile.in	Thu May 03 13:59:51 2012 +0300
+++ b/dom/tests/mochitest/bugs/Makefile.in	Thu May 03 09:15:38 2012 -0700
@@ -160,6 +160,7 @@
 		test_bug743615.html \
 		utils_bug743615.js \
 		worker_bug743615.js \
+		test_bug750051.html \
 		$(NULL)
 
 libs:: 	$(_TEST_FILES)
diff -r b4d2343fff9d -r 55888632fa91 dom/tests/mochitest/bugs/test_bug750051.html
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/dom/tests/mochitest/bugs/test_bug750051.html	Thu May 03 09:15:38 2012 -0700
@@ -0,0 +1,38 @@
+<!DOCTYPE HTML>
+<html>
+<!--
+https://bugzilla.mozilla.org/show_bug.cgi?id=750051
+-->
+<head>
+  <title>Test for Bug 750051</title>
+  <script type=""application/javascript"" src=""/tests/SimpleTest/SimpleTest.js""></script>
+  <link rel=""stylesheet"" type=""text/css"" href=""/tests/SimpleTest/test.css""/>
+</head>
+<body>
+<a target=""_blank"" href=""https://bugzilla.mozilla.org/show_bug.cgi?id=750051"">Mozilla Bug 750051</a>
+<p id=""display""></p>
+<div id=""content"" style=""display: none"">
+
+</div>
+<pre id=""test"">
+<script class=""testbody"" type=""text/javascript"">
+
+/** Test for Bug 750051 **/
+
+SimpleTest.waitForExplicitFinish();
+
+SpecialPowers.pushPrefEnv({""set"": [[""dom.disable_window_find"", true]]}, function() {
+  var caughtException = false;
+  try {
+    window.find();
+  } catch (e) {
+    caughtException = true;
+  }
+  ok(caughtException, ""window.find should throw an exception"");
+  SimpleTest.finish();
+});
+
+</script>
+</pre>
+</body>
+</html>
diff -r b4d2343fff9d -r 55888632fa91 mobile/android/app/mobile.js
--- a/mobile/android/app/mobile.js	Thu May 03 13:59:51 2012 +0300
+++ b/mobile/android/app/mobile.js	Thu May 03 09:15:38 2012 -0700
@@ -252,6 +252,7 @@
 pref(""dom.disable_window_open_dialog_feature"", true);
 pref(""dom.disable_window_showModalDialog"", true);
 pref(""dom.disable_window_print"", true);
+pref(""dom.disable_window_find"", true);
 
 pref(""keyword.enabled"", true);
 pref(""keyword.URL"", ""https://www.google.com/m?ie=UTF-8&oe=UTF-8&sourceid=navclient&gfns=1&q="");
","diff -r bdedb095df0f -r 695cbcabf7fe dom/base/nsGlobalWindowOuter.cpp
--- a/dom/base/nsGlobalWindowOuter.cpp	Fri Jul 24 14:13:08 2020 +0000
+++ b/dom/base/nsGlobalWindowOuter.cpp	Fri Jul 24 14:23:14 2020 +0000
@@ -6458,11 +6458,6 @@
                                     ErrorResult& aError) {
   Unused << aShowDialog;
 
-  if (Preferences::GetBool(""dom.disable_window_find"", false)) {
-    aError.Throw(NS_ERROR_NOT_AVAILABLE);
-    return false;
-  }
-
   nsCOMPtr<nsIWebBrowserFind> finder(do_GetInterface(mDocShell));
   if (!finder) {
     aError.Throw(NS_ERROR_NOT_AVAILABLE);
diff -r bdedb095df0f -r 695cbcabf7fe dom/base/test/mochitest.ini
--- a/dom/base/test/mochitest.ini	Fri Jul 24 14:13:08 2020 +0000
+++ b/dom/base/test/mochitest.ini	Fri Jul 24 14:23:14 2020 +0000
@@ -681,11 +681,8 @@
 [test_eventsourceservice_worker.html]
 [test_explicit_user_agent.html]
 [test_find.html]
-skip-if = (toolkit == 'android') # Android: Bug 1465387
 [test_find_nac.html]
-skip-if = (toolkit == 'android') # Android: Bug 1465387
 [test_find_bug1601118.html]
-skip-if = (toolkit == 'android') # Android: Bug 1465387
 [test_focus_shadow_dom_root.html]
 [test_focus_shadow_dom.html]
 [test_focus_scrollable_input.html]
diff -r bdedb095df0f -r 695cbcabf7fe dom/tests/mochitest/bugs/mochitest.ini
--- a/dom/tests/mochitest/bugs/mochitest.ini	Fri Jul 24 14:13:08 2020 +0000
+++ b/dom/tests/mochitest/bugs/mochitest.ini	Fri Jul 24 14:23:14 2020 +0000
@@ -125,7 +125,6 @@
 [test_bug739038.html]
 [test_bug740811.html]
 [test_bug743615.html]
-[test_bug750051.html]
 [test_bug755320.html]
 [test_bug777628.html]
 [test_bug809290.html]
diff -r bdedb095df0f -r 695cbcabf7fe dom/tests/mochitest/bugs/test_bug750051.html
--- a/dom/tests/mochitest/bugs/test_bug750051.html	Fri Jul 24 14:13:08 2020 +0000
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,38 +0,0 @@
-<!DOCTYPE HTML>
-<html>
-<!--
-https://bugzilla.mozilla.org/show_bug.cgi?id=750051
--->
-<head>
-  <title>Test for Bug 750051</title>
-  <script src=""/tests/SimpleTest/SimpleTest.js""></script>
-  <link rel=""stylesheet"" type=""text/css"" href=""/tests/SimpleTest/test.css""/>
-</head>
-<body>
-<a target=""_blank"" href=""https://bugzilla.mozilla.org/show_bug.cgi?id=750051"">Mozilla Bug 750051</a>
-<p id=""display""></p>
-<div id=""content"" style=""display: none"">
-
-</div>
-<pre id=""test"">
-<script class=""testbody"" type=""text/javascript"">
-
-/** Test for Bug 750051 **/
-
-SimpleTest.waitForExplicitFinish();
-
-SpecialPowers.pushPrefEnv({""set"": [[""dom.disable_window_find"", true]]}, function() {
-  var caughtException = false;
-  try {
-    window.find();
-  } catch (e) {
-    caughtException = true;
-  }
-  ok(caughtException, ""window.find should throw an exception"");
-  SimpleTest.finish();
-});
-
-</script>
-</pre>
-</body>
-</html>
diff -r bdedb095df0f -r 695cbcabf7fe mobile/android/app/mobile.js
--- a/mobile/android/app/mobile.js	Fri Jul 24 14:13:08 2020 +0000
+++ b/mobile/android/app/mobile.js	Fri Jul 24 14:23:14 2020 +0000
@@ -210,7 +210,6 @@
 
 /* disable opening windows with the dialog feature */
 pref(""dom.disable_window_open_dialog_feature"", true);
-pref(""dom.disable_window_find"", true);
 
 pref(""keyword.enabled"", true);
 pref(""browser.fixup.domainwhitelist.localhost"", true);
",750051,55888632fa91a28d1694739877c3891b29497b4f,Bug 750051 - Disable window.find in Fennec because it breaks and/or crashes [r=jst],1358633,"Bug 1358633 - Enable window.find on GeckoView. r=geckoview-reviewers,snorp

I just tested it on Fenix nightly and it works great. It better do
actually, as most of the code is shared with find-in-page.

See bug 750051 for when this was blocked. I don't think that was
properly understood at the time, but at this point the divergence from
desktop seems gratuitous.

This has caused compat issues in the past.

Differential Revision: https://phabricator.services.mozilla.com/D84758",2012-05-03T09:15:00-07:00,crash in TouchBadMemory using window.find(),"Window.find doesn't seem to cause bug 707385 anymore, instead, it's crashing Fennec.

See url and tap on the Window.find() button to get the crash.

Tested on the Samsung Galaxy Nexus.

This bug was filed from the Socorro interface and is 
report bp-dceb7ae5-acd6-4cfa-af2a-a87822120429 .
============================================================= 
0 	libmozalloc.so 	TouchBadMemory 	memory/mozalloc/mozalloc_abort.cpp:68
1 	libmozalloc.so 	mozalloc_abort 	memory/mozalloc/mozalloc_abort.cpp:89
2 	libmozalloc.so 	moz_xmalloc 	memory/mozalloc/mozalloc.cpp:89
3 	libxul.so 	nsWindow::DrawTo 	mozalloc.h:229
4 	libxul.so 	nsWindow::DrawTo 	widget/android/nsWindow.cpp:1084
5 	libxul.so 	nsWindow::OnDraw 	widget/android/nsWindow.cpp:1133
6 	libxul.so 	nsWindow::OnGlobalAndroidEvent 	widget/android/nsWindow.cpp:898
7 	libxul.so 	nsAppShell::ProcessNextNativeEvent 	widget/android/nsAppShell.cpp:574
8 	libxul.so 	nsBaseAppShell::DoProcessNextNativeEvent 	widget/xpwidgets/nsBaseAppShell.cpp:171
9 	libxul.so 	nsBaseAppShell::OnProcessNextEvent 	widget/xpwidgets/nsBaseAppShell.cpp:306
10 	libxul.so 	nsThread::ProcessNextEvent 	xpcom/threads/nsThread.cpp:618
11 	libxul.so 	NS_ProcessNextEvent_P 	obj-firefox/xpcom/build/nsThreadUtils.cpp:245
12 	libxul.so 	mozilla::ipc::MessagePump::Run 	ipc/glue/MessagePump.cpp:110
13 	libxul.so 	MessageLoop::RunInternal 	ipc/chromium/src/base/message_loop.cc:208
14 	libxul.so 	MessageLoop::Run 	ipc/chromium/src/base/message_loop.cc:201
15 	libxul.so 	nsBaseAppShell::Run 	widget/xpwidgets/nsBaseAppShell.cpp:189
16 	libxul.so 	nsAppStartup::Run 	toolkit/components/startup/nsAppStartup.cpp:295
17 	libxul.so 	XREMain::XRE_mainRun 	toolkit/xre/nsAppRunner.cpp:3780
18 	libxul.so 	XREMain::XRE_main 	toolkit/xre/nsAppRunner.cpp:3857
19 	libxul.so 	XRE_main 	toolkit/xre/nsAppRunner.cpp:3933
20 	libxul.so 	GeckoStart 	toolkit/xre/nsAndroidStartup.cpp:109",window.find does not work in Firefox for Android and throws NS_ERROR_NOT_AVAILABLE,"STR:

1) Visit https://developer.mozilla.org/en-US/docs/Web/API/Window/find
2) Scroll down to the ""Example"", and click on any of the ""Search for"" buttons

ER:

Alert modals should come up giving search results.

AR:

Nothing happens.

I don't actually think this is a big deal. window.find is non-standard, and we've got a bug on file to get rid of it in bug 672395. I'm really just filing this so I have a bug to refer to when I disable a test that exercises window.find for Android."
91a1ce93ce4c2dbaa215ed05fdd621634120e4fa,2021-11-23T22:38:00+00:00,"diff -r 8ad5c6bf68d5 -r b62199ddf0f3 testing/mochitest/mochitest_options.py
--- a/testing/mochitest/mochitest_options.py	Mon Mar 13 09:01:03 2017 -0700
+++ b/testing/mochitest/mochitest_options.py	Mon Mar 13 11:10:04 2017 -0500
@@ -729,7 +729,6 @@
                 ""devtools.chrome.enabled=true"",
                 ""devtools.debugger.prompt-connection=false""
             ]
-            options.autorun = False
 
         if options.debugOnFailure and not options.jsdebugger:
             parser.error(
diff -r 8ad5c6bf68d5 -r b62199ddf0f3 testing/mochitest/runtests.py
--- a/testing/mochitest/runtests.py	Mon Mar 13 09:01:03 2017 -0700
+++ b/testing/mochitest/runtests.py	Mon Mar 13 11:10:04 2017 -0500
@@ -2419,7 +2419,7 @@
                 options.app = self.immersiveHelperPath
 
             if options.jsdebugger:
-                options.browserArgs.extend(['-jsdebugger'])
+                options.browserArgs.extend(['-jsdebugger', '-wait-for-jsdebugger'])
 
             # Remove the leak detection file so it can't ""leak"" to the tests run.
             # The file is not there if leak logging was not enabled in the
","diff -r 5c8d7bde7850 -r 91a1ce93ce4c testing/mochitest/mochitest_options.py
--- a/testing/mochitest/mochitest_options.py	Tue Nov 23 22:38:21 2021 +0000
+++ b/testing/mochitest/mochitest_options.py	Tue Nov 23 22:38:45 2021 +0000
@@ -522,7 +522,7 @@
             {
                 ""action"": ""store_true"",
                 ""default"": False,
-                ""help"": ""Start the browser JS debugger before running the test. Implies --no-autorun."",  # NOQA: E501
+                ""help"": ""Start the browser JS debugger before running the test."",
             },
         ],
         [
",929535,b62199ddf0f3f19a0319e565f076fb65137ada95,"Bug 929535 - Use wait-for-jsdebugger with mochitests. r=Gijs

By using --wait-for-jsdebugger, we can allow the test suite to start
automatically and also ensure the JS debugger has a chance to connect.

There's still an extra click to get the tests running though (at least on macOS)
because the test harness needs to be focused and the extra process used for the
Browser Toolbox removes the focus from it.

MozReview-Commit-ID: 1Eg7lqG3KST",1365348,"Bug 1365348 - fix documentation for --jsdebugger not to state that it implies no-autorun, as it stopped doing that, r=mhentges

Differential Revision: https://phabricator.services.mozilla.com/D131902",2017-03-13T11:10:00-05:00,Attach browser debugger to tests before they start running,"Per IRC discussion about bug 895471, ensuring that tests don't run until the browser debugger is fully connected isn't trivial. The current mochitest patch on that bug uses --no-autorun as a clumsy way to ensure this is the case. We should try to come up with something more solid that the test framework can hook into to determine the debugger is ready before proceeding with running tests (automatically, ie without hitting the button).",mochitest --jsdebugger does not  imply --no-autorun contrary to the --help text,"Steps to reproduce:
./mach mochitest --jsdebugger

Expected outcome:
mochitests do not begin to run immediately

Actually outcome:
tests begin immediately executing

Workaround for single test foo:
./mach mochitest --jsdebugger --no-autorun foo

Additional note: for ""all mochitests"" I would expect the command:
./mach mochitest --jsdebugger --no-autorun
would present a ""run tests"" link but it does not ... is this intentional?

Additional note 2: It may also be worth noting in the help text, that the toolbox is useful for debugging the chrome and is unable to debug the mochitests themselves."
8d2ff3d80899ab9450a9b02b8cf974dabfb4d4a8,2017-09-13T19:37:00-04:00,"diff -r 0df56be60d07 -r b5a5c38a0add browser/base/content/browser-places.js
--- a/browser/base/content/browser-places.js	Thu Aug 24 09:32:04 2017 -0500
+++ b/browser/base/content/browser-places.js	Wed Aug 09 20:36:17 2017 -0400
@@ -79,13 +79,17 @@
   handleEvent(aEvent) {
     switch (aEvent.type) {
       case ""animationend"": {
-        let libraryButton = document.getElementById(""library-button"");
+        let animatableBox = document.getElementById(""library-animatable-box"");
         if (aEvent.animationName.startsWith(""library-bookmark-animation"")) {
-          libraryButton.setAttribute(""fade"", ""true"");
+          animatableBox.setAttribute(""fade"", ""true"");
         } else if (aEvent.animationName == ""library-bookmark-fade"") {
-          libraryButton.removeEventListener(""animationend"", this);
+          animatableBox.removeEventListener(""animationend"", this);
+          animatableBox.removeAttribute(""animate"");
+          animatableBox.removeAttribute(""fade"");
+          let libraryButton = document.getElementById(""library-button"");
+          // Put the 'fill' back in the normal icon.
           libraryButton.removeAttribute(""animate"");
-          libraryButton.removeAttribute(""fade"");
+          gNavToolbox.removeAttribute(""animate"");
         }
         break;
       }
@@ -146,10 +150,26 @@
                      libraryButton.getAttribute(""cui-areatype"") != ""menu-panel"" &&
                      libraryButton.getAttribute(""overflowedItem"") != ""true"" &&
                      libraryButton.closest(""#nav-bar"")) {
-            BrowserUtils.setToolbarButtonHeightProperty(libraryButton);
-            libraryButton.removeAttribute(""fade"");
+            let animatableBox = document.getElementById(""library-animatable-box"");
+            let navBar = document.getElementById(""nav-bar"");
+            let libraryIcon = document.getAnonymousElementByAttribute(libraryButton, ""class"", ""toolbarbutton-icon"");
+            let dwu = window.getInterface(Ci.nsIDOMWindowUtils);
+            let iconBounds = dwu.getBoundsWithoutFlushing(libraryIcon);
+            let libraryBounds = dwu.getBoundsWithoutFlushing(libraryButton);
+
+            animatableBox.style.setProperty(""--library-button-y"", libraryBounds.y + ""px"");
+            animatableBox.style.setProperty(""--library-button-height"", libraryBounds.height + ""px"");
+            animatableBox.style.setProperty(""--library-icon-x"", iconBounds.x + ""px"");
+            if (navBar.hasAttribute(""brighttext"")) {
+              animatableBox.setAttribute(""brighttext"", ""true"");
+            } else {
+              animatableBox.removeAttribute(""brighttext"");
+            }
+            animatableBox.removeAttribute(""fade"");
+            gNavToolbox.setAttribute(""animate"", ""bookmark"");
             libraryButton.setAttribute(""animate"", ""bookmark"");
-            libraryButton.addEventListener(""animationend"", this);
+            animatableBox.setAttribute(""animate"", ""bookmark"");
+            animatableBox.addEventListener(""animationend"", this);
           }
         }
         break;
diff -r 0df56be60d07 -r b5a5c38a0add browser/base/content/browser.xul
--- a/browser/base/content/browser.xul	Thu Aug 24 09:32:04 2017 -0500
+++ b/browser/base/content/browser.xul	Wed Aug 09 20:36:17 2017 -0400
@@ -924,11 +924,7 @@
                        closemenu=""none""
                        cui-areatype=""toolbar""
                        tooltiptext=""&libraryButton.tooltip;""
-                       label=""&places.library.title;"">
-          <box class=""toolbarbutton-animatable-box"">
-            <image class=""toolbarbutton-animatable-image""/>
-          </box>
-        </toolbarbutton>
+                       label=""&places.library.title;""/>
 
       </hbox>
 
@@ -1152,6 +1148,9 @@
         </menupopup>
       </toolbarbutton>
     </toolbarpalette>
+    <box id=""library-animatable-box"" class=""toolbarbutton-animatable-box"">
+      <image class=""toolbarbutton-animatable-image""/>
+    </box>
   </toolbox>
 
   <hbox id=""fullscr-toggler"" hidden=""true""/>
diff -r 0df56be60d07 -r b5a5c38a0add browser/extensions/pocket/bootstrap.js
--- a/browser/extensions/pocket/bootstrap.js	Thu Aug 24 09:32:04 2017 -0500
+++ b/browser/extensions/pocket/bootstrap.js	Wed Aug 09 20:36:17 2017 -0400
@@ -192,7 +192,7 @@
   },
 
   startLibraryAnimation(doc) {
-    var libraryButton = doc.getElementById(""library-button"");
+    let libraryButton = doc.getElementById(""library-button"");
     if (!Services.prefs.getBoolPref(""toolkit.cosmeticAnimations.enabled"") ||
         !libraryButton ||
         libraryButton.getAttribute(""cui-areatype"") == ""menu-panel"" ||
@@ -200,20 +200,42 @@
         !libraryButton.closest(""#nav-bar"")) {
       return;
     }
-    libraryButton.removeAttribute(""fade"");
+
+    let animatableBox = doc.getElementById(""library-animatable-box"");
+    let navBar = doc.getElementById(""nav-bar"");
+    let libraryIcon = doc.getAnonymousElementByAttribute(libraryButton, ""class"", ""toolbarbutton-icon"");
+    let dwu = doc.defaultView.getInterface(Ci.nsIDOMWindowUtils);
+    let iconBounds = dwu.getBoundsWithoutFlushing(libraryIcon);
+    let libraryBounds = dwu.getBoundsWithoutFlushing(libraryButton);
+
+    animatableBox.style.setProperty(""--library-button-y"", libraryBounds.y + ""px"");
+    animatableBox.style.setProperty(""--library-button-height"", libraryBounds.height + ""px"");
+    animatableBox.style.setProperty(""--library-icon-x"", iconBounds.x + ""px"");
+    if (navBar.hasAttribute(""brighttext"")) {
+      animatableBox.setAttribute(""brighttext"", ""true"");
+    } else {
+      animatableBox.removeAttribute(""brighttext"");
+    }
+    animatableBox.removeAttribute(""fade"");
+    doc.defaultView.gNavToolbox.setAttribute(""animate"", ""pocket"");
     libraryButton.setAttribute(""animate"", ""pocket"");
-    libraryButton.addEventListener(""animationend"", PocketPageAction.onLibraryButtonAnimationEnd);
+    animatableBox.setAttribute(""animate"", ""pocket"");
+    animatableBox.addEventListener(""animationend"", PocketPageAction.onLibraryButtonAnimationEnd);
   },
 
   onLibraryButtonAnimationEnd(event) {
     let doc = event.target.ownerDocument;
     let libraryButton = doc.getElementById(""library-button"");
+    let animatableBox = doc.getElementById(""library-animatable-box"");
     if (event.animationName.startsWith(""library-pocket-animation"")) {
-      libraryButton.setAttribute(""fade"", ""true"");
+      animatableBox.setAttribute(""fade"", ""true"");
     } else if (event.animationName == ""library-pocket-fade"") {
-      libraryButton.removeEventListener(""animationend"", PocketPageAction.onLibraryButtonAnimationEnd);
+      animatableBox.removeEventListener(""animationend"", PocketPageAction.onLibraryButtonAnimationEnd);
+      // Put the 'fill' back in the normal icon.
       libraryButton.removeAttribute(""animate"");
-      libraryButton.removeAttribute(""fade"");
+      animatableBox.removeAttribute(""animate"");
+      animatableBox.removeAttribute(""fade"");
+      event.target.ownerGlobal.gNavToolbox.removeAttribute(""animate"");
     }
   },
 };
diff -r 0df56be60d07 -r b5a5c38a0add browser/extensions/pocket/skin/shared/pocket.css
--- a/browser/extensions/pocket/skin/shared/pocket.css	Thu Aug 24 09:32:04 2017 -0500
+++ b/browser/extensions/pocket/skin/shared/pocket.css	Wed Aug 09 20:36:17 2017 -0400
@@ -138,15 +138,6 @@
   }
 }
 
-/* The animations for the pocket-button and library-button are disabled
-   outside of the nav-bar due to bug 1382894. */
-:-moz-any(#pocket-button, #library-button) > .toolbarbutton-animatable-box {
-  display: none;
-}
-#nav-bar :-moz-any(#pocket-button, #library-button) > .toolbarbutton-animatable-box {
-  display: -moz-box;
-}
-
 /* We need to use an animation here instead of a transition
    to guarantee that the animation succeeds. With transitions
    if the starting value is already equal to the end value
@@ -160,17 +151,17 @@
   }
 }
 
-#library-button[animate=""pocket""] {
-  position: relative;
-}
-
-#library-button[animate=""pocket""] > .toolbarbutton-animatable-box {
+.toolbarbutton-animatable-box[animate=""pocket""] {
   position: absolute;
   overflow: hidden;
-  top: calc(50% - 27px); /* 27px is half the height of the sprite */
+  /* Position the sprite at the y-position of the library-button, then adjust
+     based on the size difference between half of the button height and half
+     of the sprite height. */
+  top: calc(var(--library-button-y) + var(--library-button-height) / 2 - 27px);
   /* Since .toolbarbutton-icon uses a different width than the animatable box,
-     we need to set a padding relative to the difference in widths. */
-  margin-inline-start: calc((16px + 2 * var(--toolbarbutton-inner-padding) - 22px) / 2);
+     we need to set a margin relative to the difference in widths.
+     margin-left is used here even in RTL because the item is positioned using `left` */
+  left: calc(var(--library-icon-x) + (16px + 2 * var(--toolbarbutton-inner-padding) - 22px) / 2);
   /* Set the min- and max- width and height of the box equal to that
      of each frame of the SVG sprite. Setting the width and height via
      the `width` and `height` CSS properties causes an assertion for
@@ -182,14 +173,15 @@
      sprite's icon on top of the toolbar icon when using position:absolute;. */
   min-height: 54px;
   max-height: 54px;
+  z-index: 2;
 }
 
-#library-button[animate=""pocket""] > .toolbarbutton-animatable-box > .toolbarbutton-animatable-image {
+.toolbarbutton-animatable-box[animate=""pocket""] > .toolbarbutton-animatable-image {
   height: var(--toolbarbutton-height); /* Height must be equal to height of toolbarbutton padding-box */
   min-height: 54px; /* Minimum height must be equal to the height of the SVG sprite */
 }
 
-#library-button[animate=""pocket""] > .toolbarbutton-animatable-box > .toolbarbutton-animatable-image {
+.toolbarbutton-animatable-box[animate=""pocket""] > .toolbarbutton-animatable-image {
   background-image: url(""chrome://pocket-shared/skin/library-pocket-animation.svg"");
   width: 1078px;
   animation-name: library-pocket-animation;
@@ -197,12 +189,12 @@
   animation-timing-function: steps(48);
 }
 
-#library-button[animate=""pocket""]:-moz-locale-dir(rtl) > .toolbarbutton-animatable-box > .toolbarbutton-animatable-image {
+.toolbarbutton-animatable-box[animate=""pocket""]:-moz-locale-dir(rtl) > .toolbarbutton-animatable-image {
   animation-name: library-pocket-animation-rtl;
   transform: scaleX(-1);
 }
 
-#library-button[animate=""pocket""][fade] > .toolbarbutton-animatable-box > .toolbarbutton-animatable-image {
+.toolbarbutton-animatable-box[animate=""pocket""][fade] > .toolbarbutton-animatable-image {
   animation-name: library-pocket-fade;
   animation-duration: 2s;
   animation-timing-function: ease-out;
diff -r 0df56be60d07 -r b5a5c38a0add browser/themes/shared/browser.inc.css
--- a/browser/themes/shared/browser.inc.css	Thu Aug 24 09:32:04 2017 -0500
+++ b/browser/themes/shared/browser.inc.css	Wed Aug 09 20:36:17 2017 -0400
@@ -55,3 +55,17 @@
   padding-bottom: 0;
 }
 
+/* Library animation */
+
+#navigator-toolbox[animate] {
+  position: relative;
+}
+
+#library-animatable-box {
+  display: none;
+}
+
+#library-animatable-box[animate] {
+  display: -moz-box;
+}
+
diff -r 0df56be60d07 -r b5a5c38a0add browser/themes/shared/compacttheme.inc.css
--- a/browser/themes/shared/compacttheme.inc.css	Thu Aug 24 09:32:04 2017 -0500
+++ b/browser/themes/shared/compacttheme.inc.css	Wed Aug 09 20:36:17 2017 -0400
@@ -50,6 +50,7 @@
   --chrome-selection-background-color: #4c9ed9;
 }
 
+.toolbarbutton-animatable-box[brighttext],
 toolbar[brighttext] .toolbarbutton-1 {
   fill: rgba(249, 249, 250, .7);
 }
diff -r 0df56be60d07 -r b5a5c38a0add browser/themes/shared/toolbarbutton-icons.inc.css
--- a/browser/themes/shared/toolbarbutton-icons.inc.css	Thu Aug 24 09:32:04 2017 -0500
+++ b/browser/themes/shared/toolbarbutton-icons.inc.css	Wed Aug 09 20:36:17 2017 -0400
@@ -6,11 +6,13 @@
   --toolbarbutton-icon-fill-attention: #45a1ff;
 }
 
+.toolbarbutton-animatable-box,
 .toolbarbutton-1 {
   -moz-context-properties: fill;
   fill: #4c4c4c;
 }
 
+.toolbarbutton-animatable-box[brighttext],
 toolbar[brighttext] .toolbarbutton-1 {
   fill: #fff;
 }
@@ -456,30 +458,31 @@
   }
 }
 
-#library-button[animate=""bookmark""] {
-  position: relative;
-}
-
 #library-button[animate=""bookmark""] > .toolbarbutton-icon {
   fill: transparent;
 }
 
-#library-button[animate=""bookmark""] > .toolbarbutton-animatable-box {
+.toolbarbutton-animatable-box[animate=""bookmark""] {
   position: absolute;
   overflow: hidden;
-  top: calc(50% - 27px); /* 27px is half the height of the sprite */
+  /* Position the sprite at the y-position of the library-button, then adjust
+     based on the size difference between half of the button height and half
+     of the sprite height. */
+  top: calc(var(--library-button-y) + var(--library-button-height) / 2 - 27px);
   /* Set a margin relative to the difference in widths of the .toolbarbutton-icon
-     and the .toolbar-animatable-box */
-  margin-inline-start: calc((16px + 2 * var(--toolbarbutton-inner-padding) - 22px) / 2);
+     and the .toolbar-animatable-box. This is correct even in RTL because the item
+     is positioned using `left`. */
+  left: calc(var(--library-icon-x) + (16px + 2 * var(--toolbarbutton-inner-padding) - 22px) / 2);
   /* Set the min- and max- width and height of the box equal to that
      of each frame of the SVG sprite (must use min- and max- due to bug 1379332). */
   min-width: 22px;
   max-width: 22px;
   min-height: 54px;
   max-height: 54px;
+  z-index: 2;
 }
 
-#library-button[animate=""bookmark""] > .toolbarbutton-animatable-box > .toolbarbutton-animatable-image {
+.toolbarbutton-animatable-box[animate=""bookmark""] > .toolbarbutton-animatable-image {
   height: var(--toolbarbutton-height);
   min-height: 54px; /* Minimum height must be equal to the height of the SVG sprite */
   background-image: url(""chrome://browser/skin/library-bookmark-animation.svg"");
@@ -491,12 +494,12 @@
   stroke: var(--toolbarbutton-icon-fill-attention);
 }
 
-#library-button[animate=""bookmark""]:-moz-locale-dir(rtl) > .toolbarbutton-animatable-box > .toolbarbutton-animatable-image {
+.toolbarbutton-animatable-box[animate=""bookmark""]:-moz-locale-dir(rtl) > .toolbarbutton-animatable-image {
   animation-name: library-bookmark-animation-rtl;
   transform: scaleX(-1);
 }
 
-#library-button[animate=""bookmark""][fade] > .toolbarbutton-animatable-box > .toolbarbutton-animatable-image {
+.toolbarbutton-animatable-box[animate=""bookmark""][fade] > .toolbarbutton-animatable-image {
   animation-name: library-bookmark-fade;
   animation-duration: 2s;
   animation-timing-function: ease-out;
","diff -r d5dc76a14828 -r 8d2ff3d80899 browser/base/content/browser-places.js
--- a/browser/base/content/browser-places.js	Wed Sep 13 15:55:07 2017 +0200
+++ b/browser/base/content/browser-places.js	Wed Sep 13 19:37:43 2017 -0400
@@ -1520,6 +1520,7 @@
         libraryButton.getAttribute(""cui-areatype"") == ""menu-panel"" ||
         libraryButton.getAttribute(""overflowedItem"") == ""true"" ||
         !libraryButton.closest(""#nav-bar"") ||
+        !window.toolbar.visible ||
         !this.COSMETIC_ANIMATIONS_ENABLED) {
       return;
     }
",1384953,b5a5c38a0add40203d29bfe9551ce160d67e0b61,"Bug 1384953 - Run the library and pocket animations outside of the navigation-toolbar to workaround z-index issues with the selected tab. r=gijs

MozReview-Commit-ID: dXVThUXdXi",1399651,"Bug 1399651 - Don't run the library animations in popup windows with toolbar=false. r=Gijs

MozReview-Commit-ID: 2vswZ2BTFwp",2017-08-09T20:36:00-04:00,Library icon animation is covered behind active tab when saving to Pocket or adding a bookmark,"Created attachment 8890878
pocket animation covered by tab.mov

When saving to Pocket, the Pocket icon animation is being covered by an active tab. Please see video for reference.",Pocket'ing a page in popup window causes half of the library icon to be shown on the top left corner,"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:57.0) Gecko/20100101 Firefox/57.0  (20170913100125)

STR:
 1. Compose an email message in Gmail.
 2. Shift-click the diagonal-expanding-arrows icon at the top right of your compose-new-message pane. (This should pop out a smaller dialog for your email message.)
 3. Click the pocket icon in the (non-editable) URL bar for that smaller window.
 4. Observe the library icon on the top left corner

AR: Half of the library icon is shown on the top left corner (see the link below) 

https://St3fQA.tinytake.com/sf/MTk1MDcwNV82MTkyMDc4

Last good revision: 0df56be60d07b4da1b7a387b3d69aac133df928a
First bad revision: b5a5c38a0add40203d29bfe9551ce160d67e0b61
Pushlog: https://hg.mozilla.org/integration/autoland/pushloghtml?fromchange=0df56be60d07b4da1b7a387b3d69aac133df928a&tochange=b5a5c38a0add40203d29bfe9551ce160d67e0b61"
6a31940f60b784e5658dc172753d4eb84a617eb0,2021-05-27T17:44:00+00:00,"diff -r 53662a96f338 -r db7dd88c258e browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js	Wed Apr 14 11:20:16 2021 +0000
+++ b/browser/app/profile/firefox.js	Wed Apr 14 11:20:16 2021 +0000
@@ -1854,7 +1854,7 @@
 // re-prompting without the user having to persist permission to the site, in a
 // common case of a web conference asking them for the camera in a lobby page,
 // before navigating to the actual meeting room page. Doesn't survive tab close.
-pref(""privacy.webrtc.deviceGracePeriodTimeoutMs"", 50000);
+pref(""privacy.webrtc.deviceGracePeriodTimeoutMs"", 3600000);
 
 // Start the browser in e10s mode
 pref(""browser.tabs.remote.autostart"", true);
","diff -r 1c164041529d -r 6a31940f60b7 browser/actors/WebRTCParent.jsm
--- a/browser/actors/WebRTCParent.jsm	Thu May 27 17:30:03 2021 +0000
+++ b/browser/actors/WebRTCParent.jsm	Thu May 27 17:44:43 2021 +0000
@@ -452,8 +452,9 @@
           // We consider a camera active if it is active or was active within a
           // grace period of milliseconds ago.
           activeCamera = device;
-          break;
         }
+        // Only consider activity of the first (most ideal) video device
+        break;
       }
 
       for (let device of audioDevices) {
@@ -470,8 +471,9 @@
           // We consider a microphone active if it is active or was active
           // within a grace period of milliseconds ago.
           activeMic = device;
-          break;
         }
+        // Only consider activity of the first (most ideal) audio device
+        break;
       }
     }
     if (
",1697284,db7dd88c258ea90f06e064cebef8214ba48bc6bb,"Bug 1697284 - Bump privacy.webrtc.deviceGracePeriodTimeoutMs to 60 minutes. r=pbz,johannh

Differential Revision: https://phabricator.services.mozilla.com/D111960",1443294,"Bug 1443294 - Remove getUserMedia's preference for less than ideal cameras/mics that already have permission (minimal patch). r=pbz

The checkRequestAllowed() function that determines whether we can bypass the
permission prompt and fulfill immediately with a device, is given a list of devices
sorted by fitness distance from most ideal to least. — It used to grant any
device on that list that was already active, even if less than ideal (not
first in the list).

This caused problems with sites using ideal constraints to switch between
devices because this function has to fail before Firefox  prompts for a new
device, and the new grace periods added in bug 1697284 extended ""active"" to
include any device active within the last 60 minutes, making it impossible
to pick anything else using ideal constraints alone.

The fix is to only look at the first device in the list (per kind). If that
device is not active, we should prompt for that device, not return a
different one, which means failing this function.

Differential Revision: https://phabricator.services.mozilla.com/D115523",2021-04-14T11:20:00+00:00,Don't prompt web conference lurkers on unmute when they want to ask a question,"+++ This bug was initially created as a clone of Bug #1693677 +++

### Use case
Lurkers in medium-to-large meetings who spend most of their time facemuted and micmuted, only to unmute when called on to ask some question. They may lurk for nearly an hour to ask a question at the end.

Don't prompt them for permission if they granted permission at the start of the meeting.

*""Unmute""* here may refer to only faceunmute on some sites (Meet, WebEx), or both faceunmute and micunmute on others (MeetEcho?). This is because some web conferencing sites (the former group) asymmetrically stop camera on facemute to work around [crbug 642785](https://crbug.com/642785), but never stop the mic on micmute (so they can implement the *""Are you speaking? you should unmute""* feature).

### Proposal

To address this use case directly, we might want to significantly increase the grace period considered in bug 1693677 to minutes not seconds, for as long as the page is not navigated (then trim it down to seconds on navigation).

This could manifest as a second pref setting, and some conditional code on top of bug 1693677.","Wrong camera/mic picked from non-exact deviceId constraint, unless permissions are persisted","We get a different device chosen by deviceId constraints depending on whether permission is persisted or not.

STRs:
 1. Have two cameras on your system (e.g. one USB and one built-in)
 2. Open https://jsfiddle.net/jib1/bxgszem4/ and do nothing.
 3. If capture auto-starts, click red blinking camera, revoke permission with ""×"" in dropdown, refresh.
 4. Click ""Allow"" in both prompts that appear.

Expected result:

  A B A B

Actual result:

  A A A B

Workaround:
  1. Check ""☑ Remember this decision"" in the camera permission prompt, refresh.

We want the same behavior regardless of permission (A B A B)."
2ca189b8925dba3f28a1cefdc3e6f143ffbee290,2022-04-22T13:14:00+00:00,"diff -r ef4f9baee078 -r 11f29bd57a65 browser/base/content/browser-places.js
--- a/browser/base/content/browser-places.js	Wed May 23 10:06:46 2018 +0200
+++ b/browser/base/content/browser-places.js	Tue May 22 12:21:52 2018 +0200
@@ -218,12 +218,6 @@
       return;
     }
     this._bookmarkPopupInitialized = true;
-    // Move the header (star, title, button) into the grid,
-    // so that it aligns nicely with the other items (bug 484022).
-    let header = this._element(""editBookmarkPanelHeader"");
-    let rows = this._element(""editBookmarkPanelGrid"").lastChild;
-    rows.insertBefore(header, rows.firstChild);
-    header.hidden = false;
 
     await this._doShowEditBookmarkPanel(aNode, aAnchorElement, aPosition, aUrl);
   },
@@ -240,7 +234,6 @@
         gNavigatorBundle.getString(""editBookmarkPanel.editBookmarkTitle"");
 
     // No description; show the Done, Remove;
-    this._element(""editBookmarkPanelDescription"").textContent = """";
     this._element(""editBookmarkPanelBottomButtons"").hidden = false;
     this._element(""editBookmarkPanelContent"").hidden = false;
 
diff -r ef4f9baee078 -r 11f29bd57a65 browser/base/content/browser.xul
--- a/browser/base/content/browser.xul	Wed May 23 10:06:46 2018 +0200
+++ b/browser/base/content/browser.xul	Tue May 22 12:21:52 2018 +0200
@@ -219,15 +219,9 @@
            tabspecific=""true""
            onpopupshown=""StarUI.panelShown(event);""
            aria-labelledby=""editBookmarkPanelTitle"">
-      <row id=""editBookmarkPanelHeader"" align=""center"" hidden=""true"">
-        <vbox align=""center"">
-          <image id=""editBookmarkPanelStarIcon""/>
-        </vbox>
-        <vbox>
-          <label id=""editBookmarkPanelTitle""/>
-          <description id=""editBookmarkPanelDescription""/>
-        </vbox>
-      </row>
+      <box class=""panel-header"">
+        <label id=""editBookmarkPanelTitle""/>
+      </box>
 #include ../../components/places/content/editBookmarkPanel.inc.xul
       <hbox id=""editBookmarkPanelBottomButtons"" pack=""end"">
 #ifndef XP_UNIX
diff -r ef4f9baee078 -r 11f29bd57a65 browser/components/places/content/editBookmarkPanel.inc.xul
--- a/browser/components/places/content/editBookmarkPanel.inc.xul	Wed May 23 10:06:46 2018 +0200
+++ b/browser/components/places/content/editBookmarkPanel.inc.xul	Tue May 22 12:21:52 2018 +0200
@@ -3,160 +3,137 @@
     <label id=""editBMPanel_itemsCountText""/>
   </hbox>
 
-  <grid id=""editBookmarkPanelGrid"" flex=""1"">
-    <columns id=""editBMPanel_columns"">
-      <column id=""editBMPanel_labelColumn"" />
-      <column flex=""1"" id=""editBMPanel_editColumn"" />
-    </columns>
-    <rows id=""editBMPanel_rows"">
-      <row id=""editBMPanel_nameRow""
-           align=""center""
-           collapsed=""true"">
-        <label value=""&editBookmarkOverlay.name.label;""
-               class=""editBMPanel_rowLabel""
-               accesskey=""&editBookmarkOverlay.name.accesskey;""
-               control=""editBMPanel_namePicker""/>
-        <textbox id=""editBMPanel_namePicker""
-                 onchange=""gEditItemOverlay.onNamePickerChange().catch(Components.utils.reportError);""/>
-      </row>
+  <vbox id=""editBookmarkPanelRows"">
+    <vbox id=""editBMPanel_nameRow""
+          collapsed=""true"">
+      <label value=""&editBookmarkOverlay.name.label;""
+             accesskey=""&editBookmarkOverlay.name.accesskey;""
+             control=""editBMPanel_namePicker""/>
+      <textbox id=""editBMPanel_namePicker""
+               onchange=""gEditItemOverlay.onNamePickerChange().catch(Components.utils.reportError);""/>
+    </vbox>
 
-      <row id=""editBMPanel_locationRow""
-           align=""center""
-           collapsed=""true"">
-        <label value=""&editBookmarkOverlay.location.label;""
-               class=""editBMPanel_rowLabel""
-               accesskey=""&editBookmarkOverlay.location.accesskey;""
-               control=""editBMPanel_locationField""/>
-        <textbox id=""editBMPanel_locationField""
-                 class=""uri-element""
-                 onchange=""gEditItemOverlay.onLocationFieldChange();""/>
-      </row>
+    <vbox id=""editBMPanel_locationRow""
+          collapsed=""true"">
+      <label value=""&editBookmarkOverlay.location.label;""
+             accesskey=""&editBookmarkOverlay.location.accesskey;""
+             control=""editBMPanel_locationField""/>
+      <textbox id=""editBMPanel_locationField""
+               class=""uri-element""
+               onchange=""gEditItemOverlay.onLocationFieldChange();""/>
+    </vbox>
 
-      <row id=""editBMPanel_folderRow""
-           align=""center""
-           collapsed=""true"">
-        <label value=""&editBookmarkOverlay.folder.label;""
-               class=""editBMPanel_rowLabel""
-               control=""editBMPanel_folderMenuList""/>
-        <hbox flex=""1"" align=""center"">
-          <menulist id=""editBMPanel_folderMenuList""
-                    class=""folder-icon""
-                    flex=""1""
-                    oncommand=""gEditItemOverlay.onFolderMenuListCommand(event).catch(Components.utils.reportError);"">
-            <menupopup>
-              <!-- Static item for special folders -->
-              <menuitem id=""editBMPanel_toolbarFolderItem""
-                        class=""menuitem-iconic folder-icon""/>
-              <menuitem id=""editBMPanel_bmRootItem""
-                        class=""menuitem-iconic folder-icon""/>
-              <menuitem id=""editBMPanel_unfiledRootItem""
-                        class=""menuitem-iconic folder-icon""/>
-              <menuseparator id=""editBMPanel_chooseFolderSeparator""/>
-              <menuitem id=""editBMPanel_chooseFolderMenuItem""
-                        label=""&editBookmarkOverlay.choose.label;""
-                        class=""menuitem-iconic folder-icon""/>
-              <menuseparator id=""editBMPanel_foldersSeparator"" hidden=""true""/>
-            </menupopup>
-          </menulist>
-          <button id=""editBMPanel_foldersExpander""
-                  class=""expander-down""
-                  tooltiptext=""&editBookmarkOverlay.foldersExpanderDown.tooltip;""
-                  tooltiptextdown=""&editBookmarkOverlay.foldersExpanderDown.tooltip;""
-                  tooltiptextup=""&editBookmarkOverlay.expanderUp.tooltip;""
-                  oncommand=""gEditItemOverlay.toggleFolderTreeVisibility();""/>
-        </hbox>
-      </row>
+    <vbox id=""editBMPanel_folderRow""
+          collapsed=""true"">
+      <label value=""&editBookmarkOverlay.folder.label;""
+             control=""editBMPanel_folderMenuList""/>
+      <hbox flex=""1"" align=""center"">
+        <menulist id=""editBMPanel_folderMenuList""
+                  class=""folder-icon""
+                  flex=""1""
+                  oncommand=""gEditItemOverlay.onFolderMenuListCommand(event).catch(Components.utils.reportError);"">
+          <menupopup>
+            <!-- Static item for special folders -->
+            <menuitem id=""editBMPanel_toolbarFolderItem""
+                      class=""menuitem-iconic folder-icon""/>
+            <menuitem id=""editBMPanel_bmRootItem""
+                      class=""menuitem-iconic folder-icon""/>
+            <menuitem id=""editBMPanel_unfiledRootItem""
+                      class=""menuitem-iconic folder-icon""/>
+            <menuseparator id=""editBMPanel_chooseFolderSeparator""/>
+            <menuitem id=""editBMPanel_chooseFolderMenuItem""
+                      label=""&editBookmarkOverlay.choose.label;""
+                      class=""menuitem-iconic folder-icon""/>
+            <menuseparator id=""editBMPanel_foldersSeparator"" hidden=""true""/>
+          </menupopup>
+        </menulist>
+        <button id=""editBMPanel_foldersExpander""
+                class=""expander-down""
+                tooltiptext=""&editBookmarkOverlay.foldersExpanderDown.tooltip;""
+                tooltiptextdown=""&editBookmarkOverlay.foldersExpanderDown.tooltip;""
+                tooltiptextup=""&editBookmarkOverlay.expanderUp.tooltip;""
+                oncommand=""gEditItemOverlay.toggleFolderTreeVisibility();""/>
+      </hbox>
+    </vbox>
 
-      <row id=""editBMPanel_folderTreeRow""
-           collapsed=""true""
-           flex=""1"">
-        <spacer/>
-        <vbox flex=""1"">
-          <tree id=""editBMPanel_folderTree""
-                flex=""1""
-                class=""placesTree""
-                type=""places""
-                height=""150""
-                minheight=""150""
-                editable=""true""
-                onselect=""gEditItemOverlay.onFolderTreeSelect();""
-                disableUserActions=""true""
-                hidecolumnpicker=""true"">
-            <treecols>
-              <treecol anonid=""title"" flex=""1"" primary=""true"" hideheader=""true""/>
-            </treecols>
-            <treechildren flex=""1""/>
-          </tree>
+    <vbox id=""editBMPanel_folderTreeRow""
+          collapsed=""true"">
+      <tree id=""editBMPanel_folderTree""
+            flex=""1""
+            class=""placesTree""
+            type=""places""
+            height=""150""
+            minheight=""150""
+            editable=""true""
+            onselect=""gEditItemOverlay.onFolderTreeSelect();""
+            disableUserActions=""true""
+            hidecolumnpicker=""true"">
+        <treecols>
+          <treecol anonid=""title"" flex=""1"" primary=""true"" hideheader=""true""/>
+        </treecols>
+        <treechildren flex=""1""/>
+      </tree>
 
-          <hbox id=""editBMPanel_newFolderBox"">
-            <button label=""&editBookmarkOverlay.newFolderButton.label;""
-                    id=""editBMPanel_newFolderButton""
-                    accesskey=""&editBookmarkOverlay.newFolderButton.accesskey;""
-                    oncommand=""gEditItemOverlay.newFolder().catch(Components.utils.reportError);""/>
-          </hbox>
-        </vbox>
-      </row>
+      <hbox id=""editBMPanel_newFolderBox"">
+        <button label=""&editBookmarkOverlay.newFolderButton.label;""
+                id=""editBMPanel_newFolderButton""
+                accesskey=""&editBookmarkOverlay.newFolderButton.accesskey;""
+                oncommand=""gEditItemOverlay.newFolder().catch(Components.utils.reportError);""/>
+      </hbox>
+    </vbox>
 
-      <row id=""editBMPanel_tagsRow""
-           align=""center""
-           collapsed=""true"">
-        <label value=""&editBookmarkOverlay.tags.label;""
-               class=""editBMPanel_rowLabel""
-               accesskey=""&editBookmarkOverlay.tags.accesskey;""
-               control=""editBMPanel_tagsField""/>
-        <hbox flex=""1"" align=""center"">
-          <textbox id=""editBMPanel_tagsField""
-                   type=""autocomplete""
-                   flex=""1""
-                   autocompletesearch=""places-tag-autocomplete""
-                   autocompletepopup=""PopupAutoComplete""
-                   completedefaultindex=""true""
-                   tabscrolling=""true""
-                   placeholder=""&editBookmarkOverlay.tagsEmptyDesc.label;""
-                   onchange=""gEditItemOverlay.onTagsFieldChange();""/>
-          <button id=""editBMPanel_tagsSelectorExpander""
-                  class=""expander-down""
-                  tooltiptext=""&editBookmarkOverlay.tagsExpanderDown.tooltip;""
-                  tooltiptextdown=""&editBookmarkOverlay.tagsExpanderDown.tooltip;""
-                  tooltiptextup=""&editBookmarkOverlay.expanderUp.tooltip;""
-                  oncommand=""gEditItemOverlay.toggleTagsSelector();""/>
-        </hbox>
-      </row>
+    <vbox id=""editBMPanel_tagsRow""
+          collapsed=""true"">
+      <label value=""&editBookmarkOverlay.tags.label;""
+             accesskey=""&editBookmarkOverlay.tags.accesskey;""
+             control=""editBMPanel_tagsField""/>
+      <hbox flex=""1"" align=""center"">
+        <textbox id=""editBMPanel_tagsField""
+                 type=""autocomplete""
+                 flex=""1""
+                 autocompletesearch=""places-tag-autocomplete""
+                 autocompletepopup=""PopupAutoComplete""
+                 completedefaultindex=""true""
+                 tabscrolling=""true""
+                 placeholder=""&editBookmarkOverlay.tagsEmptyDesc.label;""
+                 onchange=""gEditItemOverlay.onTagsFieldChange();""/>
+        <button id=""editBMPanel_tagsSelectorExpander""
+                class=""expander-down""
+                tooltiptext=""&editBookmarkOverlay.tagsExpanderDown.tooltip;""
+                tooltiptextdown=""&editBookmarkOverlay.tagsExpanderDown.tooltip;""
+                tooltiptextup=""&editBookmarkOverlay.expanderUp.tooltip;""
+                oncommand=""gEditItemOverlay.toggleTagsSelector();""/>
+      </hbox>
+    </vbox>
 
-      <row id=""editBMPanel_tagsSelectorRow""
-           align=""center""
-           collapsed=""true"">
-        <spacer/>
-        <listbox id=""editBMPanel_tagsSelector""
-                 height=""150""/>
-      </row>
+    <vbox id=""editBMPanel_tagsSelectorRow""
+         collapsed=""true"">
+      <listbox id=""editBMPanel_tagsSelector""
+               height=""150""/>
+    </vbox>
 
-      <row id=""editBMPanel_keywordRow""
-           align=""center""
-           collapsed=""true"">
-        <observes element=""additionalInfoBroadcaster"" attribute=""hidden""/>
-        <label value=""&editBookmarkOverlay.keyword.label;""
-               class=""editBMPanel_rowLabel""
-               accesskey=""&editBookmarkOverlay.keyword.accesskey;""
-               control=""editBMPanel_keywordField""/>
-        <textbox id=""editBMPanel_keywordField""
-                 onchange=""gEditItemOverlay.onKeywordFieldChange();""/>
-      </row>
+    <vbox id=""editBMPanel_keywordRow""
+          collapsed=""true"">
+      <observes element=""additionalInfoBroadcaster"" attribute=""hidden""/>
+      <label value=""&editBookmarkOverlay.keyword.label;""
+             accesskey=""&editBookmarkOverlay.keyword.accesskey;""
+             control=""editBMPanel_keywordField""/>
+      <textbox id=""editBMPanel_keywordField""
+               onchange=""gEditItemOverlay.onKeywordFieldChange();""/>
+    </vbox>
 
-      <row id=""editBMPanel_descriptionRow""
-           collapsed=""true"">
-        <observes element=""additionalInfoBroadcaster"" attribute=""hidden""/>
-        <label value=""&editBookmarkOverlay.description.label;""
-               class=""editBMPanel_rowLabel""
-               accesskey=""&editBookmarkOverlay.description.accesskey;""
-               control=""editBMPanel_descriptionField""/>
-        <textbox id=""editBMPanel_descriptionField""
-                 multiline=""true""
-                 rows=""4""
-                 onchange=""gEditItemOverlay.onDescriptionFieldChange();""/>
-      </row>
-    </rows>
-  </grid>
+    <vbox id=""editBMPanel_descriptionRow""
+          collapsed=""true"">
+      <observes element=""additionalInfoBroadcaster"" attribute=""hidden""/>
+      <label value=""&editBookmarkOverlay.description.label;""
+             accesskey=""&editBookmarkOverlay.description.accesskey;""
+             control=""editBMPanel_descriptionField""/>
+      <textbox id=""editBMPanel_descriptionField""
+               multiline=""true""
+               rows=""4""
+               onchange=""gEditItemOverlay.onDescriptionFieldChange();""/>
+    </vbox>
+  </vbox>
 
   <checkbox id=""editBMPanel_loadInSidebarCheckbox""
             collapsed=""true""
@@ -169,4 +146,4 @@
   <!-- If the ids are changing or additional fields are being added, be sure
        to sync the values in places.js -->
   <broadcaster id=""additionalInfoBroadcaster""/>
-</vbox>
\ No newline at end of file
+</vbox>
diff -r ef4f9baee078 -r 11f29bd57a65 browser/themes/linux/browser.css
--- a/browser/themes/linux/browser.css	Wed May 23 10:06:46 2018 +0200
+++ b/browser/themes/linux/browser.css	Tue May 22 12:21:52 2018 +0200
@@ -400,28 +400,8 @@
 }
 
 /* Bookmarking panel */
-#editBookmarkPanelStarIcon {
-  list-style-image: url(""chrome://browser/skin/bookmark.svg"");
-  -moz-context-properties: fill;
-  fill: var(--toolbarbutton-icon-fill-attention);
-  width: 40px;
-  height: 40px;
-  margin: 4px;
-}
 
-#editBookmarkPanelTitle {
-  font-size: 130%;
-}
-
-#editBookmarkPanelHeader,
-#editBookmarkPanelContent {
-  margin-bottom: .5em;
-}
-
-/* Implements editBookmarkPanel resizing on folderTree un-collapse. */
-#editBMPanel_folderTree {
-  min-width: 27em;
-}
+%include ../shared/places/editBookmarkPanel.inc.css
 
 /* Content area */
 
diff -r ef4f9baee078 -r 11f29bd57a65 browser/themes/linux/jar.mn
--- a/browser/themes/linux/jar.mn	Wed May 23 10:06:46 2018 +0200
+++ b/browser/themes/linux/jar.mn	Tue May 22 12:21:52 2018 +0200
@@ -32,7 +32,7 @@
   skin/classic/browser/places/allBookmarks.png        (places/allBookmarks.png)
   skin/classic/browser/places/bookmarksMenu.png       (places/bookmarksMenu.png)
   skin/classic/browser/places/bookmarksToolbar.png    (places/bookmarksToolbar.png)
-* skin/classic/browser/places/editBookmark.css (places/editBookmark.css)
+  skin/classic/browser/places/editBookmark.css        (places/editBookmark.css)
   skin/classic/browser/places/livemark-item.png       (places/livemark-item.png)
 * skin/classic/browser/places/places.css              (places/places.css)
   skin/classic/browser/places/organizer.css           (places/organizer.css)
diff -r ef4f9baee078 -r 11f29bd57a65 browser/themes/linux/places/editBookmark.css
--- a/browser/themes/linux/places/editBookmark.css	Wed May 23 10:06:46 2018 +0200
+++ b/browser/themes/linux/places/editBookmark.css	Tue May 22 12:21:52 2018 +0200
@@ -1,8 +1,11 @@
-%if 0
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-%endif
+
+#editBookmarkPanelRows > vbox {
+  margin-bottom: .5em;
+}
+
 /**** folder menulist ****/
 .folder-icon > .menulist-label-box > .menulist-icon {
   width: 16px;
diff -r ef4f9baee078 -r 11f29bd57a65 browser/themes/osx/browser.css
--- a/browser/themes/osx/browser.css	Wed May 23 10:06:46 2018 +0200
+++ b/browser/themes/osx/browser.css	Tue May 22 12:21:52 2018 +0200
@@ -388,33 +388,12 @@
   margin-bottom: -26px;
 }
 
-/* BOOKMARKING PANEL */
-#editBookmarkPanelStarIcon {
-  list-style-image: url(""chrome://browser/skin/bookmark.svg"");
-  -moz-context-properties: fill;
-  fill: var(--toolbarbutton-icon-fill-attention);
-  width: 40px;
-  height: 40px;
-  margin: 4px;
-}
+/* Bookmarking panel */
 
-#editBookmarkPanelTitle {
-  font-size: 130%;
-  font-weight: bold;
-}
-
-#editBMPanel_rows > row {
-  margin-bottom: 8px;
-}
+%include ../shared/places/editBookmarkPanel.inc.css
 
-#editBMPanel_rows > row:last-of-type {
-  margin-bottom: 0;
-}
-
-/**** Input elements ****/
-
-#editBMPanel_rows > row > textbox,
-#editBMPanel_rows > row > hbox > textbox {
+#editBookmarkPanelRows > vbox > textbox,
+#editBookmarkPanelRows > vbox > hbox > textbox {
   -moz-appearance: none;
   background: linear-gradient(#fafafa, #fff);
   background-clip: padding-box;
@@ -426,15 +405,12 @@
   padding: 3px 6px;
 }
 
-#editBMPanel_rows > row > textbox[focused=""true""],
-#editBMPanel_rows > row > hbox > textbox[focused=""true""] {
+#editBookmarkPanelRows > vbox > textbox[focused=""true""],
+#editBookmarkPanelRows > vbox > hbox > textbox[focused=""true""] {
   border-color: -moz-mac-focusring !important;
   box-shadow: var(--focus-ring-box-shadow);
 }
 
-/**** HUD style buttons ****/
-
-.editBookmarkPanelHeaderButton,
 .editBookmarkPanelBottomButton {
   @hudButton@
   margin: 0;
@@ -442,12 +418,10 @@
   min-height: 22px;
 }
 
-.editBookmarkPanelHeaderButton:hover:active,
 .editBookmarkPanelBottomButton:hover:active {
   @hudButtonPressed@
 }
 
-.editBookmarkPanelHeaderButton:-moz-focusring,
 .editBookmarkPanelBottomButton:-moz-focusring {
   box-shadow: var(--focus-ring-box-shadow);
 }
@@ -456,10 +430,6 @@
   background-color: #666;
 }
 
-#editBookmarkPanelHeader {
-  margin-bottom: 6px;
-}
-
 .editBookmarkPanelBottomButton:last-child {
   margin-inline-start: 8px;
 }
@@ -634,10 +604,6 @@
   color: #bbb;
 }
 
-.editBMPanel_rowLabel {
-  text-align: end;
-}
-
 /* ----- SIDEBAR ELEMENTS ----- */
 
 %include ../shared/sidebar.inc.css
diff -r ef4f9baee078 -r 11f29bd57a65 browser/themes/osx/places/editBookmark.css
--- a/browser/themes/osx/places/editBookmark.css	Wed May 23 10:06:46 2018 +0200
+++ b/browser/themes/osx/places/editBookmark.css	Tue May 22 12:21:52 2018 +0200
@@ -2,8 +2,9 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-@namespace url(""http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"");
-@namespace html url(""http://www.w3.org/1999/xhtml"");
+#editBookmarkPanelRows > vbox {
+  margin-bottom: .5em;
+}
 
 /**** folder menulist ****/
 .folder-icon > .menulist-label-box > .menulist-icon,
diff -r ef4f9baee078 -r 11f29bd57a65 browser/themes/osx/places/organizer.css
--- a/browser/themes/osx/places/organizer.css	Wed May 23 10:06:46 2018 +0200
+++ b/browser/themes/osx/places/organizer.css	Tue May 22 12:21:52 2018 +0200
@@ -304,10 +304,6 @@
   color: GrayText;
 }
 
-.editBMPanel_rowLabel {
-  text-align: end;
-}
-
 /**
  * Downloads pane
  */
diff -r ef4f9baee078 -r 11f29bd57a65 browser/themes/shared/customizableui/panelUI.inc.css
--- a/browser/themes/shared/customizableui/panelUI.inc.css	Wed May 23 10:06:46 2018 +0200
+++ b/browser/themes/shared/customizableui/panelUI.inc.css	Tue May 22 12:21:52 2018 +0200
@@ -1505,9 +1505,12 @@
   font-size: 13px;
   font-weight: 500;
   margin: 0;
+  text-align: center;
+}
+
+.panel-header > .subviewbutton-back + label {
   /* Add the size of the back button to center properly. */
   margin-inline-end: 32px;
-  text-align: center;
 }
 
 .panel-header > .subviewbutton-back {
diff -r ef4f9baee078 -r 11f29bd57a65 browser/themes/shared/places/editBookmarkPanel.inc.css
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/browser/themes/shared/places/editBookmarkPanel.inc.css	Tue May 22 12:21:52 2018 +0200
@@ -0,0 +1,20 @@
+%if 0
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+%endif
+
+#editBookmarkPanel > .panel-arrowcontainer > .panel-arrowcontent {
+  padding: 0;
+}
+
+#editBookmarkPanelBottomButtons,
+#editBookmarkPanelRows {
+  padding: var(--arrowpanel-padding);
+}
+
+/* Implements editBookmarkPanel resizing on folderTree un-collapse. */
+#editBMPanel_folderTree {
+  min-width: 27em;
+}
+
diff -r ef4f9baee078 -r 11f29bd57a65 browser/themes/windows/browser.css
--- a/browser/themes/windows/browser.css	Wed May 23 10:06:46 2018 +0200
+++ b/browser/themes/windows/browser.css	Tue May 22 12:21:52 2018 +0200
@@ -636,28 +636,7 @@
 
 /* bookmarking panel */
 
-#editBookmarkPanelStarIcon {
-  list-style-image: url(""chrome://browser/skin/bookmark.svg"");
-  -moz-context-properties: fill;
-  fill: var(--toolbarbutton-icon-fill-attention);
-  width: 40px;
-  height: 40px;
-  margin: 4px;
-}
-
-#editBookmarkPanelTitle {
-  font-size: 130%;
-}
-
-#editBookmarkPanelHeader,
-#editBookmarkPanelContent {
-  margin-bottom: .5em;
-}
-
-/* Implements editBookmarkPanel resizing on folderTree un-collapse. */
-#editBMPanel_folderTree {
-  min-width: 27em;
-}
+%include ../shared/places/editBookmarkPanel.inc.css
 
 /* ::::: content area ::::: */
 
diff -r ef4f9baee078 -r 11f29bd57a65 browser/themes/windows/places/editBookmark.css
--- a/browser/themes/windows/places/editBookmark.css	Wed May 23 10:06:46 2018 +0200
+++ b/browser/themes/windows/places/editBookmark.css	Tue May 22 12:21:52 2018 +0200
@@ -2,6 +2,10 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+#editBookmarkPanelRows > vbox {
+  margin-bottom: .5em;
+}
+
 /**** folder menulist ****/
 .folder-icon > .menulist-label-box > .menulist-icon {
   width: 16px;
","diff -r 2e154dcda079 -r 2ca189b8925d browser/components/places/content/places.js
--- a/browser/components/places/content/places.js	Fri Apr 22 13:06:45 2022 +0000
+++ b/browser/components/places/content/places.js	Fri Apr 22 13:14:41 2022 +0000
@@ -444,6 +444,24 @@
         ? [view.selectedNode]
         : view.selectedNodes;
       this._fillDetailsPane(selectedNodes);
+      window
+        .promiseDocumentFlushed(() => {})
+        .then(() => {
+          if (view.selectedNode && ContentArea.currentView.view) {
+            // When looking at a list of bookmarks/folders,
+            // bookmarkIndex can be considered the row number.
+            // In other contexts (Tags/History/Downloads), calculate the
+            // row using the node even if some of the items in the
+            // list happen to be bookmarks.
+            let row =
+              view.selectedNode.bookmarkIndex !== -1
+                ? view.selectedNode.bookmarkIndex
+                : ContentArea.currentView.view.treeIndexForNode(
+                    view.selectedNode
+                  );
+            ContentTree.view.ensureRowIsVisible(row);
+          }
+        });
     }
   },
 
",1459885,11f29bd57a65909d20fdf96677ba95596c953f89,"Bug 1459885 - Implement new header style and lay out labels above input fields in the new bookmarks dialog. r=mak

MozReview-Commit-ID: 9FmGhfP9aDo",1471546,"Bug 1471546 - Scroll to bookmark in bookmark library on initial selection when it's not visible r=mak

Differential Revision: https://phabricator.services.mozilla.com/D139905",2018-05-22T12:21:00+02:00,Implement new header style and lay out labels above input fields in the new bookmarks dialog,"Instead of:

Name:   [_____________]
Folder: [__________][v]
Tags:   [__________][v]

the new layout looks like this:

Name:
[_____________]

Folder:
[__________][v]

Tags:
[__________][v]",New Library info pane overlaps the list of bookmarks,"Created attachment 8988128
screenshot.png

Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0
20180626220124

https://hg.mozilla.org/integration/autoland/pushloghtml?fromchange=ef4f9baee078151c09dc59dd2b38be8fef40498c&tochange=11f29bd57a65909d20fdf96677ba95596c953f89

1. Show All Bookmarks.
2. Select a folder with too many items to fit in view vertically, so that a vertical scrollbar shows.
3. Scroll down to the bottom.
4. Click the last item to select it.

Actual results:
The lower pane expands vertically, but the scroll position doesn't adjust. This results in the list of bookmarks being partially obscured, including the bookmark that was just selected.

Expected results:
The lower pane expands if necessary, without obscuring the list of bookmarks."
c06a67809a2c8e2951a3d9a139c02c2a415ccf2a,2020-11-09T12:34:00+00:00,"diff -r 28f5c2767938 -r def80b3ac3f6 devtools/server/actors/watcher/target-helpers/frame-helper.js
--- a/devtools/server/actors/watcher/target-helpers/frame-helper.js	Wed Aug 26 14:25:31 2020 +0000
+++ b/devtools/server/actors/watcher/target-helpers/frame-helper.js	Wed Aug 26 20:31:57 2020 +0000
@@ -180,10 +180,7 @@
   return getAllRemoteBrowsingContexts(
     browserElement?.browsingContext
   ).filter(browsingContext =>
-    shouldNotifyWindowGlobal(
-      browsingContext.currentWindowGlobal,
-      browserElement?.browserId
-    )
+    shouldNotifyWindowGlobal(browsingContext, browserElement?.browserId)
   );
 }
 
@@ -250,8 +247,13 @@
  * but may be not, it looks like the checks are really differents because WindowGlobalParent and WindowGlobalChild
  * expose very different attributes. (WindowGlobalChild exposes much less!)
  */
-function shouldNotifyWindowGlobal(windowGlobal, watchedBrowserId) {
-  const browsingContext = windowGlobal.browsingContext;
+function shouldNotifyWindowGlobal(browsingContext, watchedBrowserId) {
+  const windowGlobal = browsingContext.currentWindowGlobal;
+  // Loading or destroying BrowsingContext won't have any associated WindowGlobal.
+  // Ignore them. They should be either handled via DOMWindowCreated event or JSWindowActor destroy
+  if (!windowGlobal) {
+    return false;
+  }
   // Ignore extension for now as attaching to them is special.
   if (browsingContext.currentRemoteType == ""extension"") {
     return false;
","diff -r 52c6c1417aeb -r c06a67809a2c testing/talos/talos/tests/devtools/addon/content/damp-tests.js
--- a/testing/talos/talos/tests/devtools/addon/content/damp-tests.js	Wed Nov 11 02:02:24 2020 +0000
+++ b/testing/talos/talos/tests/devtools/addon/content/damp-tests.js	Mon Nov 09 12:34:01 2020 +0000
@@ -100,12 +100,13 @@
     description:
       ""Measure open/close toolbox on webconsole panel against complicated document"",
   },
-  {
-    name: ""complicated.inspector"",
-    path: ""inspector/complicated.js"",
-    description:
-      ""Measure open/close toolbox on inspector panel against complicated document"",
-  },
+  // Bug 1503499 - disable for frequent failures on fission
+  // {
+  //  name: ""complicated.inspector"",
+  //  path: ""inspector/complicated.js"",
+  //  description:
+  //    ""Measure open/close toolbox on inspector panel against complicated document"",
+  // },
   {
     name: ""complicated.debugger"",
     path: ""debugger/complicated.js"",
",1660895,def80b3ac3f69102911ad879de49161945557603,"Bug 1660895 - Eagerly ignore loading or destroying documents. r=nchevobbe

Differential Revision: https://phabricator.services.mozilla.com/D88075",1503499,"Bug 1503499 - disable damp | inspector/complicated.js for frequent failures r=intermittent-reviewers,perftest-reviewers,sparky,jmaher DONTBUILD

Differential Revision: https://phabricator.services.mozilla.com/D96330",2020-08-26T20:31:00+00:00,"Browser toolbox fail opening with ""watchTargets can't access property 'browsingContext', windowGlobal is null"" exception","It looks like in the following code, we may process a BrowsingContext in process of creation or destruction, which doesn't have a WindowGlobal currently associated.
https://searchfox.org/mozilla-central/rev/19c23d725f27d0989e4a60f36d64004cebb39736/devtools/server/actors/watcher/target-helpers/frame-helper.js#179-188
```
  return getAllRemoteBrowsingContexts(
    browserElement?.browsingContext
  ).filter(browsingContext =>
    shouldNotifyWindowGlobal(
      browsingContext.currentWindowGlobal,
      browserElement?.browserId
    )
  );
```
And so, `browsingContext.currentWindowGlobal` ends up being null.


```
console.error: ""Error while calling actor 'watcher's method 'watchTargets'"" ""can't access property \""browsingContext\"", windowGlobal is null""
console.error: ""shouldNotifyWindowGlobal@resource://devtools/server/actors/watcher/target-helpers/frame-helper.js:254:27\ngetFilteredRemoteBrowsingContext/<@resource://devtools/server/actors/watcher/target-helpers/frame-helper.js:183:29\ngetFilteredRemoteBrowsingContext@resource://devtools/server/actors/watcher/target-helpers/frame-helper.js:182:5\ncreateTargets@resource://devtools/server/actors/watcher/target-helpers/frame-helper.js:25:60\nwatchTargets@resource://devtools/server/actors/watcher.js:138:30\nhandler@resource://devtools/shared/protocol/Actor.js:166:37\nonPacket@resource://devtools/server/devtools-server-connection.js:379:58\n_onJSONObjectReady/<@resource://devtools/shared/transport/transport.js:464:22\nexports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22\nexports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22\n""
```",Permanent [fission][tier2] | TEST-UNEXPECTED-FAIL | damp | inspector/complicated.js: Test timed out,"Filed by: nerli [at] mozilla.com

https://treeherder.mozilla.org/logviewer.html#?job_id=208808602&repo=mozilla-inbound

https://queue.taskcluster.net/v1/task/TcLKvurnTHCdfJRDqtYgGw/runs/0/artifacts/public/logs/live_backing.log

22:48:53     INFO -  PID 1177 | ###!!! [Parent][MessageChannel] Error: (msgtype=0x190084,name=PBrowser::Msg_Destroy) Channel error: cannot send/recv
22:48:53     INFO -  PID 1177 |
22:48:53     INFO -  PID 1177 | dyld: Library not loaded: @executable_path/libmozglue.dylib
22:48:53     INFO -  PID 1177 |   Referenced from: /Users/cltbld/tasks/task_1540957034/build/application/Firefox Nightly.app/Contents/MacOS/crashreporter.app/Contents/MacOS/minidump-analyzer
22:48:53     INFO -  PID 1177 |   Reason: image not found
22:53:52     INFO -  PID 1177 | TEST-UNEXPECTED-FAIL | damp | inspector/complicated.js: Test timed out
22:53:52     INFO -  Terminating psutil.Process(pid=1177, name='firefox', started='22:43:24')
22:53:52     INFO -  PID 1177 | ** Unknown exception behavior: -2147483647
22:53:52     INFO -  PID 1177 | ** Unknown exception behavior: -2147483647
22:53:52     INFO -  PID 1177 | ** Unknown exception behavior: -2147483647
22:53:52     INFO -  mozcrash Downloading symbols from: https://queue.taskcluster.net/v1/task/S2tKNZYRRZWC5LO5Qw4AZw/artifacts/public/build/target.crashreporter-symbols.zip
22:54:01     INFO -  mozcrash Copy/paste: /Users/cltbld/tasks/task_1540957034/build/macosx64-minidump_stackwalk /var/folders/7d/qr4l8m592xj3bvhgjx8d_lsw00000x/T/tmp7_oRJV/profile/minidumps/498E12D0-8C58-45B2-9037-3BFA53321710.dmp /var/folders/7d/qr4l8m592xj3bvhgjx8d_lsw00000x/T/tmpxS9BTo
22:54:18     INFO -  mozcrash Saved minidump as /Users/cltbld/tasks/task_1540957034/build/blobber_upload_dir/498E12D0-8C58-45B2-9037-3BFA53321710.dmp
22:54:18     INFO -  mozcrash Saved app info as /Users/cltbld/tasks/task_1540957034/build/blobber_upload_dir/498E12D0-8C58-45B2-9037-3BFA53321710.extra
22:54:18     INFO -  PROCESS-CRASH | damp | application crashed [@ libFontParser.dylib + 0x5b330]
22:54:18     INFO -  Crash dump filename: /var/folders/7d/qr4l8m592xj3bvhgjx8d_lsw00000x/T/tmp7_oRJV/profile/minidumps/498E12D0-8C58-45B2-9037-3BFA53321710.dmp
22:54:18     INFO -  Operating system: Mac OS X
22:54:18     INFO -                    10.10.5 14F27
22:54:18     INFO -  CPU: amd64
22:54:18     INFO -       family 6 model 69 stepping 1
22:54:18     INFO -       4 CPUs
22:54:18     INFO -  GPU: UNKNOWN
22:54:18     INFO -  Crash reason:  EXC_BAD_ACCESS / KERN_INVALID_ADDRESS
22:54:18     INFO -  Crash address: 0x30
22:54:18     INFO -  Process uptime: 329 seconds
22:54:18     INFO -  Thread 34 (crashed)
22:54:18     INFO -   0  libFontParser.dylib + 0x5b330
22:54:18     INFO -      rax = 0x0000000000000000   rdx = 0x0000000000000001
22:54:18     INFO -      rcx = 0x00007fff8d2bc5da   rbx = 0x000000012e117000
22:54:18     INFO -      rsi = 0x0000000000000001   rdi = 0x0000000000000000
22:54:18     INFO -      rbp = 0x000000012e00f400   rsp = 0x000000012e00f3e0
22:54:18     INFO -       r8 = 0x00000000002000b3    r9 = 0x0000000000000000
22:54:18     INFO -      r10 = 0x00000000ffffffff   r11 = 0x0000000000000246
22:54:18     INFO -      r12 = 0x00000000000000b3   r13 = 0x0000000000000000
22:54:18     INFO -      r14 = 0x000000012e117008   r15 = 0x00007fff75623070
22:54:18     INFO -      rip = 0x00007fff8bbcb330
22:54:18     INFO -      Found by: given as instruction pointer in context
22:54:18     INFO -   1  libFontParser.dylib + 0xd099
22:54:18     INFO -      rbp = 0x000000012e00f680   rsp = 0x000000012e00f410
22:54:18     INFO -      rip = 0x00007fff8bb7d099
22:54:18     INFO -      Found by: previous frame's frame pointer
22:54:18     INFO -   2  CoreGraphics + 0x4fbce
22:54:18     INFO -      rbp = 0x000000012e00f6e0   rsp = 0x000000012e00f690
22:54:18     INFO -      rip = 0x00007fff87ed9bce
22:54:18     INFO -      Found by: previous frame's frame pointer
22:54:18     INFO -   3  CoreGraphics + 0x4fb1e
22:54:18     INFO -      rbp = 0x000000012e00f800   rsp = 0x000000012e00f6f0
22:54:18     INFO -      rip = 0x00007fff87ed9b1e
22:54:18     INFO -      Found by: previous frame's frame pointer
22:54:18     INFO -   4  CoreGraphics + 0x4f92b
22:54:18     INFO -      rbp = 0x000000012e00f860   rsp = 0x000000012e00f810
22:54:18     INFO -      rip = 0x00007fff87ed992b
22:54:18     INFO -      Found by: previous frame's frame pointer
22:54:18     INFO -   5  libRIP.A.dylib + 0x1272c
22:54:18     INFO -      rbp = 0x000000012e00f8f0   rsp = 0x000000012e00f870
22:54:18     INFO -      rip = 0x00007fff87d2a72c
22:54:18     INFO -      Found by: previous frame's frame pointer
22:54:18     INFO -   6  libRIP.A.dylib + 0x125e4
22:54:18     INFO -      rbp = 0x000000012e00fb10   rsp = 0x000000012e00f900
22:54:18     INFO -      rip = 0x00007fff87d2a5e4
22:54:18     INFO -      Found by: previous frame's frame pointer
22:54:18     INFO -   7  libRIP.A.dylib + 0x11f42
22:54:18     INFO -      rbp = 0x000000012e00fe90   rsp = 0x000000012e00fb20
22:54:18     INFO -      rip = 0x00007fff87d29f42
22:54:18     INFO -      Found by: previous frame's frame pointer
22:54:18     INFO -   8  CoreGraphics + 0x22e637
22:54:18     INFO -      rbp = 0x000000012e010090   rsp = 0x000000012e00fea0
22:54:18     INFO -      rip = 0x00007fff880b8637
22:54:18     INFO -      Found by: previous frame's frame pointer
22:54:18     INFO -   9  CoreText + 0x2a5ea
22:54:18     INFO -      rbp = 0x000000012e0107f0   rsp = 0x000000012e0100a0
22:54:18     INFO -      rip = 0x00007fff8bcc65ea
22:54:18     INFO -      Found by: previous frame's frame pointer
22:54:18     INFO -  10  CoreText + 0x83664
22:54:18     INFO -      rbp = 0x000000012e010910   rsp = 0x000000012e010800
22:54:18     INFO -      rip = 0x00007fff8bd1f664
22:54:18     INFO -      Found by: previous frame's frame pointer"
0294e60bc9949d7986b97d02bef849add0a7e318,2020-06-09T19:35:00+00:00,"diff -r 8f1ffafbdb88 -r 59eabdc7dc1a testing/mach_commands.py
--- a/testing/mach_commands.py	Fri Aug 31 16:55:04 2018 +0100
+++ b/testing/mach_commands.py	Fri Aug 31 09:59:07 2018 -0600
@@ -74,7 +74,7 @@
 def get_test_parser():
     from mozlog.commandline import add_logging_group
     parser = argparse.ArgumentParser()
-    parser.add_argument('what', default=None, nargs='*', help=TEST_HELP)
+    parser.add_argument('what', default=None, nargs='+', help=TEST_HELP)
     parser.add_argument('extra_args', default=None, nargs=argparse.REMAINDER,
                         help=""Extra arguments to pass to the underlying test command(s). ""
                              ""If an underlying command doesn't recognize the argument, it ""
","diff -r ca83702c2741 -r 0294e60bc994 testing/mach_commands.py
--- a/testing/mach_commands.py	Tue Jun 09 19:34:23 2020 +0000
+++ b/testing/mach_commands.py	Tue Jun 09 19:35:19 2020 +0000
@@ -28,9 +28,7 @@
 I was unable to find tests from the given argument(s).
 
 You should specify a test directory, filename, test suite name, or
-abbreviation. If no arguments are given, there must be local file
-changes and corresponding IMPACTED_TESTS annotations in moz.build
-files relevant to those files.
+abbreviation.
 
 It's possible my little brain doesn't know about the type of test you are
 trying to execute. If you suspect this, please request support by filing
@@ -305,11 +303,6 @@
         * A test suite name
         * An alias to a test suite name (codes used on TreeHerder)
 
-        If no input is provided, tests will be run based on files changed in
-        the local tree. Relevant tests, tags, or flavors are determined by
-        IMPACTED_TESTS annotations in moz.build files relevant to the
-        changed files.
-
         When paths or directories are given, they are first resolved to test
         files known to the build system.
 
diff -r ca83702c2741 -r 0294e60bc994 testing/mozbase/moztest/moztest/resolve.py
--- a/testing/mozbase/moztest/moztest/resolve.py	Tue Jun 09 19:34:23 2020 +0000
+++ b/testing/mozbase/moztest/moztest/resolve.py	Tue Jun 09 19:35:19 2020 +0000
@@ -883,23 +883,4 @@
             if not tests:
                 print('UNKNOWN TEST: %s' % entry, file=sys.stderr)
 
-        if not what:
-            res = self.get_outgoing_metadata()
-            paths, tags, flavors = (res[key] for key in ('paths', 'tags', 'flavors'))
-
-            # This requires multiple calls to resolve_tests, because the test
-            # resolver returns tests that match every condition, while we want
-            # tests that match any condition. Bug 1210213 tracks implementing
-            # more flexible querying.
-            if tags:
-                run_tests = list(self.resolve_tests(tags=tags))
-            if paths:
-                run_tests += [t for t in self.resolve_tests(paths=paths)
-                              if not (tags & set(t.get('tags', '').split()))]
-            if flavors:
-                run_tests = [
-                    t for t in run_tests if t['flavor'] not in flavors]
-                for flavor in flavors:
-                    run_tests += list(self.resolve_tests(flavor=flavor))
-
         return run_suites, run_tests
",1481449,59eabdc7dc1a1694edb17fd32815512e84b0794d,Bug 1481449 - Require at least one test argument for 'mach test'; r=ahal,1516847,"Bug 1516847 - Update help and remove support for 'mach test' with no arguments; r=ahal

Differential Revision: https://phabricator.services.mozilla.com/D78804",2018-08-31T09:59:00-06:00,mach test with no arguments ends with a child_exception,"james@ginny:~/develop/gecko$ ./mach test
[…]
Error running mach:

    ['test']

The error occurred in code that was called by the mach command. This is either
a bug in the called code itself or in the way that mach is calling it.

You should consider filing a bug for this issue.

If filing a bug, please include the full output of mach, including this error
message.

The details of the failure are as follows:

TypeError: coercing to Unicode: need string or buffer, NoneType found

  File ""/home/james/develop/gecko/testing/mach_commands.py"", line 171, in test
    argv=extra_args, test_objects=tests, **kwargs)
  File ""/home/james/develop/gecko/python/mach/mach/registrar.py"", line 129, in dispatch
    return self._run_command_handler(handler, context=context, **kwargs)
  File ""/home/james/develop/gecko/python/mach/mach/registrar.py"", line 90, in _run_command_handler
    result = fn(**kwargs)
  File ""/home/james/develop/gecko/python/mach_commands.py"", line 92, in python_test
    return self.run_python_tests(*args, **kwargs)
  File ""/home/james/develop/gecko/python/mach_commands.py"", line 105, in run_python_tests
    self.activate_pipenv(pipfile=None, populate=True, python=python)
  File ""/home/james/develop/gecko/python/mozbuild/mozbuild/base.py"", line 764, in activate_pipenv
    self.virtualenv_manager.activate_pipenv(pipfile, populate, python)
  File ""/home/james/develop/gecko/python/mozbuild/mozbuild/virtualenv.py"", line 608, in activate_pipenv
    stderr=subprocess.STDOUT, env=env)
  File ""/usr/lib/python2.7/subprocess.py"", line 185, in check_call
    retcode = call(*popenargs, **kwargs)
  File ""/usr/lib/python2.7/subprocess.py"", line 172, in call
    return Popen(*popenargs, **kwargs).wait()
  File ""/usr/lib/python2.7/subprocess.py"", line 394, in __init__
    errread, errwrite)
  File ""/usr/lib/python2.7/subprocess.py"", line 1047, in _execute_child
    raise child_exception

Supporting this is silly anyway, we should set nargs=""+"" on the path argument since wanting to run every test in the tree is not a sensible thing anyone should be doing; if you are doing this it's probably an error and you need help.",`./mach test` with no arguments doesn't seem to work.,"If I do `./mach test` with no arguments, it's supposed to check for changes to local files and determine the tests to run based on IMPACTED_TESTS entries in the relevant moz.build files.

But if I run `./mach test` with no arguments, it just prints out `mach test`'s usage instructions and the error ""error: too few arguments"". Unsure when that stopped working.

If I run `./mach test []`, it prints out ""Unknown test: []"" and tells me to either specify a test (or tests), directory, suite name, or job symbol, and that if I don't specify anything, it will determine tests to run based on the changed files. So mach certainly thinks like it's still a supported feature.

(Incidentally, it seems like there aren't very many IMPACTED_TESTS entries in the tree: https://searchfox.org/mozilla-central/search?q=IMPACTED_TESTS&path=moz.build )"
0cf838d61cdd13c9d2b6eefa0e75ebb2202a0934,2019-04-04T16:45:00+00:00,,"diff -r 50d64901b71f -r 0cf838d61cdd toolkit/themes/shared/aboutRights.css
--- a/toolkit/themes/shared/aboutRights.css	Thu Apr 04 16:30:13 2019 +0000
+++ b/toolkit/themes/shared/aboutRights.css	Thu Apr 04 16:45:56 2019 +0000
@@ -10,6 +10,6 @@
   padding-inline-end: 320px;
 }
 
-body[dir=""rtl""] .rights-header{
-   background-position: left center;
+.rights-header:dir(rtl) {
+  background-position: left center;
 }
",1519923,75766cc3befd561cc502e4b2a21118202541a540,"Bug 1519923 - Migrate about:rights to Fluent, r=jaws,flod

Differential Revision: https://phabricator.services.mozilla.com/D17731",1528573,"Bug 1528573 - [RTL] The sloth SVG is overlapping the header in about:rights, r=Gijs

Differential Revision: https://phabricator.services.mozilla.com/D26064",2019-02-08T17:36:00+00:00,Migrate about:rights to Fluent,"about:rights uses two DTD files, aboutRights.dtd and security.dtd. security.dtd is not referenced from any other file.

Both of these file should be migrated to Fluent, and the string from security.dtd can be moved to aboutRights.ftl since it is not referenced from anywhere else.

Please note that aboutRights.dtd is referenced by Android build files and the patch will need to update those files accordingly.",[RTL] The sloth SVG is overlapping the header in about:rights,"Created attachment 9044452
Screenshot

The sloth SVG should be placed on the left side of the header.
See attached for how this currently looks in RTL."
2c35163a7686b9caa9f5e608f8c7cbc2d3249cc7,2019-08-09T19:45:00+00:00,"diff -r b95563c224d8 -r 1056404c052e modules/libpref/init/all.js
--- a/modules/libpref/init/all.js	Fri Jan 29 21:54:47 2016 -0600
+++ b/modules/libpref/init/all.js	Fri Jan 29 22:58:43 2016 -0500
@@ -4630,8 +4630,9 @@
 
 // W3C touch events
 // 0 - disabled, 1 - enabled, 2 - autodetect
-// Enabling it for Windows is tracked by bug 736048.
-#if defined(XP_WIN) || defined(XP_MACOSX)
+#if defined(XP_MACOSX)
+pref(""dom.w3c_touch_events.enabled"", 0);
+#elif defined(XP_WIN) && !defined(NIGHTLY_BUILD)
 pref(""dom.w3c_touch_events.enabled"", 0);
 #else
 pref(""dom.w3c_touch_events.enabled"", 2);
","diff -r aae83fff273f -r 2c35163a7686 gfx/layers/apz/test/gtest/TestScrollHandoff.cpp
--- a/gfx/layers/apz/test/gtest/TestScrollHandoff.cpp	Fri Aug 09 19:38:44 2019 +0000
+++ b/gfx/layers/apz/test/gtest/TestScrollHandoff.cpp	Fri Aug 09 19:45:57 2019 +0000
@@ -188,6 +188,8 @@
 // wait for content to send a prevent-default message, overscroll is still
 // handed off correctly when the block is processed.
 TEST_F(APZScrollHandoffTester, DeferredInputEventProcessing) {
+  SCOPED_GFX_PREF_BOOL(""apz.allow_immediate_handoff"", true);
+
   // Set up the APZC tree.
   CreateScrollHandoffLayerTree1();
 
@@ -216,6 +218,8 @@
 // the original layer structure while overscroll handoff for the second block
 // follows the new layer structure.
 TEST_F(APZScrollHandoffTester, LayerStructureChangesWhileEventsArePending) {
+  SCOPED_GFX_PREF_BOOL(""apz.allow_immediate_handoff"", true);
+
   // Set up an initial APZC tree.
   CreateScrollHandoffLayerTree1();
 
@@ -476,6 +480,7 @@
 // Here we test that if two flings are happening simultaneously, overscroll
 // is handed off correctly for each.
 TEST_F(APZScrollHandoffTester, SimultaneousFlings) {
+  SCOPED_GFX_PREF_BOOL(""apz.allow_immediate_handoff"", true);
   SCOPED_GFX_PREF_FLOAT(""apz.fling_min_velocity_threshold"", 0.0f);
 
   // Set up an initial APZC tree.
@@ -508,6 +513,8 @@
 }
 
 TEST_F(APZScrollHandoffTester, Scrollgrab) {
+  SCOPED_GFX_PREF_BOOL(""apz.allow_immediate_handoff"", true);
+
   // Set up the layer tree
   CreateScrollgrabLayerTree();
 
@@ -523,6 +530,7 @@
 }
 
 TEST_F(APZScrollHandoffTester, ScrollgrabFling) {
+  SCOPED_GFX_PREF_BOOL(""apz.allow_immediate_handoff"", true);
   SCOPED_GFX_PREF_FLOAT(""apz.fling_min_velocity_threshold"", 0.0f);
 
   // Set up the layer tree
@@ -539,6 +547,7 @@
 }
 
 TEST_F(APZScrollHandoffTester, ScrollgrabFlingAcceleration1) {
+  SCOPED_GFX_PREF_BOOL(""apz.allow_immediate_handoff"", true);
   SCOPED_GFX_PREF_FLOAT(""apz.fling_min_velocity_threshold"", 0.0f);
   SCOPED_GFX_VAR(UseWebRender, bool, false);
   CreateScrollgrabLayerTree(true /* make parent scrollable */);
@@ -546,6 +555,7 @@
 }
 
 TEST_F(APZScrollHandoffTester, ScrollgrabFlingAcceleration2) {
+  SCOPED_GFX_PREF_BOOL(""apz.allow_immediate_handoff"", true);
   SCOPED_GFX_PREF_FLOAT(""apz.fling_min_velocity_threshold"", 0.0f);
   SCOPED_GFX_VAR(UseWebRender, bool, false);
   CreateScrollgrabLayerTree(false /* do not make parent scrollable */);
diff -r aae83fff273f -r 2c35163a7686 mobile/android/app/mobile.js
--- a/mobile/android/app/mobile.js	Fri Aug 09 19:38:44 2019 +0000
+++ b/mobile/android/app/mobile.js	Fri Aug 09 19:45:57 2019 +0000
@@ -477,7 +477,6 @@
 
 // APZ physics settings (fling acceleration, fling curving and axis lock) have
 // been reviewed by UX
-pref(""apz.allow_immediate_handoff"", false);
 pref(""apz.axis_lock.breakout_angle"", ""0.7853982"");    // PI / 4 (45 degrees)
 pref(""apz.axis_lock.mode"", 1); // Use ""strict"" axis locking
 pref(""apz.content_response_timeout"", 600);
diff -r aae83fff273f -r 2c35163a7686 modules/libpref/init/StaticPrefList.yaml
--- a/modules/libpref/init/StaticPrefList.yaml	Fri Aug 09 19:38:44 2019 +0000
+++ b/modules/libpref/init/StaticPrefList.yaml	Fri Aug 09 19:45:57 2019 +0000
@@ -185,7 +185,7 @@
 
 - name: apz.allow_immediate_handoff
   type: RelaxedAtomicBool
-  value: true
+  value: false
   mirror: always
 
 - name: apz.allow_zooming
diff -r aae83fff273f -r 2c35163a7686 modules/libpref/init/all.js
--- a/modules/libpref/init/all.js	Fri Aug 09 19:38:44 2019 +0000
+++ b/modules/libpref/init/all.js	Fri Aug 09 19:45:57 2019 +0000
@@ -685,7 +685,7 @@
 // APZ preferences. For documentation/details on what these prefs do, check
 // gfx/layers/apz/src/AsyncPanZoomController.cpp.
 pref(""apz.allow_double_tap_zooming"", true);
-pref(""apz.allow_immediate_handoff"", true);
+pref(""apz.allow_immediate_handoff"", false);
 pref(""apz.allow_zooming"", false);
 pref(""apz.android.chrome_fling_physics.enabled"", true);
 pref(""apz.android.chrome_fling_physics.friction"", ""0.015"");
",1180706,1056404c052eea689459638d6cb57fd888318a35,Bug 1180706 - Enable touch event support on Windows Nightly. r=botond,1528775,"Bug 1528775 - Disable immediate handoff on all platforms. r=tnikkel

Differential Revision: https://phabricator.services.mozilla.com/D41434",2016-01-29T22:58:00-05:00,[meta] Touch support in APZ on desktop platforms,Just a meta bug to group all the things related to supporting touch input on desktop platforms once APZ is live. I'm not yet sure of the dependency chain here.,Disable automatic scroll handoff from subframes to enclosing scrollframes on desktop touch devices,"Created attachment 9044682
scrollCoast.gif

**Affected versions**
* 65.0.1, 66.0b8, 67.0a1 (2019-02-18)

**Affected platforms**
* Windows 10;

**Steps to reproduce**
TouchScreen device needed; zoom in until the scroll bar is enabled in the page/window;

1. Access https://jsbin.com/cokemav/quiet
2. Tap on the screen and swipe down(scroll coasting),  a couple of times **in the text-area**;


**Expected result**
* When reaching the bottom of the text-area the swipe-scroll stops;

**Actual result**
* When reaching the bottom of the text-area the page starts scrolling down;

**Regression range**
* last good: 2016-01-30
* first bad: 2016-01-31
* pushlog URL: https://hg.mozilla.org/mozilla-central/pushloghtml?fromchange=54eea211e234217c0faa8c05bf4de9fd3005f5c2&tochange=941033a51983ddec2d99aa9f868a54c0196a4075

**Additional notes**
* Chrome and Edge don't have this issue;
* attached recording with the issue;
* turning the **layout.css.scroll-anchoring.enabled** pref off or on has no change in the behaviour."
d71878241de2fd78e8243ceb533d0921c17f96e4,2019-09-09T17:54:00+00:00,"diff -r 0b16da79b3ed -r f66935a5c80d devtools/client/definitions.js
--- a/devtools/client/definitions.js	Thu Dec 13 22:02:01 2018 +0000
+++ b/devtools/client/definitions.js	Wed Dec 12 23:04:29 2018 +0000
@@ -139,9 +139,7 @@
   label: l10n(""ToolboxDebugger.label""),
   panelLabel: l10n(""ToolboxDebugger.panelLabel""),
   get tooltip() {
-    return l10n(""ToolboxDebugger.tooltip2"",
-    (osString == ""Darwin"" ? ""Cmd+Opt+"" : ""Ctrl+Shift+"") +
-    l10n(""debugger.commandkey""));
+    return l10n(""ToolboxDebugger.tooltip2"");
   },
   inMenu: true,
   isTargetSupported: function() {
diff -r 0b16da79b3ed -r f66935a5c80d devtools/client/framework/test/browser_keybindings_01.js
--- a/devtools/client/framework/test/browser_keybindings_01.js	Thu Dec 13 22:02:01 2018 +0000
+++ b/devtools/client/framework/test/browser_keybindings_01.js	Wed Dec 12 23:04:29 2018 +0000
@@ -80,12 +80,6 @@
   await webconsoleShouldBeSelected();
 
   onSelectTool = gDevTools.once(""select-tool-command"");
-  const jsdebugger = allKeys.filter(({ toolId }) => toolId === ""jsdebugger"")[0];
-  jsdebugger.synthesizeKey();
-  await onSelectTool;
-  await jsdebuggerShouldBeSelected();
-
-  onSelectTool = gDevTools.once(""select-tool-command"");
   const netmonitor = allKeys.filter(({ toolId }) => toolId === ""netmonitor"")[0];
   netmonitor.synthesizeKey();
   await onSelectTool;
@@ -117,10 +111,6 @@
     is(toolbox.currentToolId, ""webconsole"", ""webconsole should be selected."");
   }
 
-  function jsdebuggerShouldBeSelected() {
-    is(toolbox.currentToolId, ""jsdebugger"", ""jsdebugger should be selected."");
-  }
-
   function netmonitorShouldBeSelected() {
     is(toolbox.currentToolId, ""netmonitor"", ""netmonitor should be selected."");
   }
diff -r 0b16da79b3ed -r f66935a5c80d devtools/startup/devtools-startup.js
--- a/devtools/startup/devtools-startup.js	Thu Dec 13 22:02:01 2018 +0000
+++ b/devtools/startup/devtools-startup.js	Wed Dec 12 23:04:29 2018 +0000
@@ -134,12 +134,6 @@
       shortcut: KeyShortcutsBundle.GetStringFromName(""webconsole.commandkey""),
       modifiers,
     },
-    // Key for opening the Debugger
-    {
-      toolId: ""jsdebugger"",
-      shortcut: KeyShortcutsBundle.GetStringFromName(""debugger.commandkey""),
-      modifiers,
-    },
     // Key for opening the Network Monitor
     {
       toolId: ""netmonitor"",
diff -r 0b16da79b3ed -r f66935a5c80d devtools/startup/locales/en-US/key-shortcuts.properties
--- a/devtools/startup/locales/en-US/key-shortcuts.properties	Thu Dec 13 22:02:01 2018 +0000
+++ b/devtools/startup/locales/en-US/key-shortcuts.properties	Wed Dec 12 23:04:29 2018 +0000
@@ -38,10 +38,6 @@
 # Key pressed to open a toolbox with the web console panel selected
 webconsole.commandkey=K
 
-# LOCALIZATION NOTE (debugger.commandkey):
-# Key pressed to open a toolbox with the debugger panel selected
-debugger.commandkey=S
-
 # LOCALIZATION NOTE (netmonitor.commandkey):
 # Key pressed to open a toolbox with the network monitor panel selected
 netmonitor.commandkey=E
","diff -r 6f28048f14b4 -r d71878241de2 devtools/client/definitions.js
--- a/devtools/client/definitions.js	Mon Sep 09 19:41:31 2019 +0000
+++ b/devtools/client/definitions.js	Mon Sep 09 17:54:53 2019 +0000
@@ -224,7 +224,11 @@
   label: l10n(""ToolboxDebugger.label""),
   panelLabel: l10n(""ToolboxDebugger.panelLabel""),
   get tooltip() {
-    return l10n(""ToolboxDebugger.tooltip3"");
+    return l10n(
+      ""ToolboxDebugger.tooltip4"",
+      (osString == ""Darwin"" ? ""Cmd+Opt+"" : ""Ctrl+Shift+"") +
+        l10n(""jsdebugger.commandkey"")
+    );
   },
   inMenu: true,
   isTargetSupported: function() {
diff -r 6f28048f14b4 -r d71878241de2 devtools/client/framework/test/browser_keybindings_01.js
--- a/devtools/client/framework/test/browser_keybindings_01.js	Mon Sep 09 19:41:31 2019 +0000
+++ b/devtools/client/framework/test/browser_keybindings_01.js	Mon Sep 09 17:54:53 2019 +0000
@@ -3,6 +3,8 @@
 
 ""use strict"";
 
+requestLongerTimeout(3);
+
 // Tests that the keybindings for opening and closing the inspector work as expected
 // Can probably make this a shared test that tests all of the tools global keybindings
 const TEST_URL =
@@ -89,6 +91,12 @@
   await onSelectTool;
   await netmonitorShouldBeSelected();
 
+  onSelectTool = gDevTools.once(""select-tool-command"");
+  const jsdebugger = allKeys.filter(({ toolId }) => toolId === ""jsdebugger"")[0];
+  jsdebugger.synthesizeKey();
+  await onSelectTool;
+  await jsdebuggerShouldBeSelected();
+
   if (isMac) {
     info(""On MacOS, we check the extra inspector shortcut too"");
     onSelectTool = gDevTools.once(""select-tool-command"");
@@ -111,6 +119,10 @@
     ok(true, ""picker-stopped event received, highlighter stopped"");
   }
 
+  function jsdebuggerShouldBeSelected() {
+    is(toolbox.currentToolId, ""jsdebugger"", ""jsdebugger should be selected."");
+  }
+
   function webconsoleShouldBeSelected() {
     is(toolbox.currentToolId, ""webconsole"", ""webconsole should be selected."");
   }
diff -r 6f28048f14b4 -r d71878241de2 devtools/client/locales/en-US/startup.properties
--- a/devtools/client/locales/en-US/startup.properties	Mon Sep 09 19:41:31 2019 +0000
+++ b/devtools/client/locales/en-US/startup.properties	Mon Sep 09 17:54:53 2019 +0000
@@ -70,10 +70,10 @@
 # This is used as the label for the toolbox panel.
 ToolboxDebugger.panelLabel=Debugger Panel
 
-# LOCALIZATION NOTE (ToolboxDebugger.tooltip3):
+# LOCALIZATION NOTE (ToolboxDebugger.tooltip4):
 # This string is displayed in the tooltip of the tab when the debugger is
 # displayed inside the developer tools window.
-ToolboxDebugger.tooltip3=JavaScript Debugger
+ToolboxDebugger.tooltip4=JavaScript Debugger (%S)
 
 # LOCALIZATION NOTE (debuggerMenu.accesskey)
 # Used for the menuitem in the tool menu
diff -r 6f28048f14b4 -r d71878241de2 devtools/startup/DevToolsStartup.jsm
--- a/devtools/startup/DevToolsStartup.jsm	Mon Sep 09 19:41:31 2019 +0000
+++ b/devtools/startup/DevToolsStartup.jsm	Mon Sep 09 17:54:53 2019 +0000
@@ -165,6 +165,12 @@
       shortcut: KeyShortcutsBundle.GetStringFromName(""webconsole.commandkey""),
       modifiers,
     },
+    // Key for opening the Debugger
+    {
+      toolId: ""jsdebugger"",
+      shortcut: KeyShortcutsBundle.GetStringFromName(""jsdebugger.commandkey""),
+      modifiers,
+    },
     // Key for opening the Network Monitor
     {
       toolId: ""netmonitor"",
diff -r 6f28048f14b4 -r d71878241de2 devtools/startup/locales/en-US/key-shortcuts.properties
--- a/devtools/startup/locales/en-US/key-shortcuts.properties	Mon Sep 09 19:41:31 2019 +0000
+++ b/devtools/startup/locales/en-US/key-shortcuts.properties	Mon Sep 09 17:54:53 2019 +0000
@@ -38,6 +38,10 @@
 # Key pressed to open a toolbox with the web console panel selected
 webconsole.commandkey=K
 
+# LOCALIZATION NOTE (jsdebugger.commandkey):
+# Key pressed to open a toolbox with the debugger panel selected
+jsdebugger.commandkey=L
+
 # LOCALIZATION NOTE (netmonitor.commandkey):
 # Key pressed to open a toolbox with the network monitor panel selected
 netmonitor.commandkey=E
",1502924,f66935a5c80de7fde4812634ba9d4a2fcab97388,"Bug 1502924 - Remove Ctrl + Shift + S keyboard shortcut r=jlast,_6a68
***

Remove Ctrl + Shift + S ( Cmd + Opt + S for Mac) key board shortcut

Differential Revision: https://phabricator.services.mozilla.com/D13854",1532139,"Bug 1532139 - Add keyboard shortcut open debugger r=jlast

Differential Revision: https://phabricator.services.mozilla.com/D41415",2018-12-12T23:04:00+00:00,Remove Ctrl + Shift + S keyboard shortcut,"This bug tracks removing the Ctrl + Shift + S shortcut from devtools, so that Screenshots can use it.

Background:

Firefox Screenshots has been interested in taking over the Ctrl + Shift + S keyboard shortcut from Devtools.

Bug 1456984 measured usage of various keyboard shortcuts, and based on conversation with :digitarald, we are good to proceed with Screenshots taking the shortcut.",Add back a keyboard shortcut to open the JavaScript Debugger,"Bug 1502924 removed the keyboard shortcut to open the JavaScript debugger. It's the fourth-most used panel of the devtools on the release channel and currently the only panel in menu Tools > Web Developer's first tier commands without a shortcut.

Please add back a keyboard shortcut to open the debugger."
bb3258d652a4b46f01097b231a055b2e0f97c7d4,2020-04-29T15:47:00+00:00,"diff -r 79556798ff9f -r 8885e98d44d4 browser/components/nsBrowserGlue.js
--- a/browser/components/nsBrowserGlue.js	Wed May 23 23:11:41 2018 -0400
+++ b/browser/components/nsBrowserGlue.js	Fri Jun 01 11:13:27 2018 -0400
@@ -759,6 +759,7 @@
       popup_text: ""rgb(249, 249, 250)"",
       popup_border: ""#27272b"",
       toolbar_field_text: ""rgb(249, 249, 250)"",
+      toolbar_field_border: ""rgba(249, 249, 250, 0.2)"",
       author: vendorShortName,
     });
 
diff -r 79556798ff9f -r 8885e98d44d4 browser/themes/linux/browser.css
--- a/browser/themes/linux/browser.css	Wed May 23 23:11:41 2018 -0400
+++ b/browser/themes/linux/browser.css	Fri Jun 01 11:13:27 2018 -0400
@@ -50,7 +50,11 @@
 }
 
 :root[lwt-popup-brighttext] {
-  --panel-separator-color: hsla(0,0%,80%,.25);
+  --panel-separator-color: rgba(249,249,250,.2);
+
+  --arrowpanel-dimmed: rgba(249,249,250,.1);
+  --arrowpanel-dimmed-further: rgba(249,249,250,.15);
+  --arrowpanel-dimmed-even-further: rgba(249,249,250,.2);
 }
 
 #menubar-items {
diff -r 79556798ff9f -r 8885e98d44d4 browser/themes/osx/browser.css
--- a/browser/themes/osx/browser.css	Wed May 23 23:11:41 2018 -0400
+++ b/browser/themes/osx/browser.css	Fri Jun 01 11:13:27 2018 -0400
@@ -41,7 +41,11 @@
 }
 
 :root[lwt-popup-brighttext] {
-  --panel-separator-color: hsla(0,0%,80%,.25);
+  --panel-separator-color: rgba(249,249,250,.2);
+
+  --arrowpanel-dimmed: rgba(249,249,250,.1);
+  --arrowpanel-dimmed-further: rgba(249,249,250,.15);
+  --arrowpanel-dimmed-even-further: rgba(249,249,250,.2);
 }
 
 #navigator-toolbox {
diff -r 79556798ff9f -r 8885e98d44d4 browser/themes/shared/compacttheme.inc.css
--- a/browser/themes/shared/compacttheme.inc.css	Wed May 23 23:11:41 2018 -0400
+++ b/browser/themes/shared/compacttheme.inc.css	Fri Jun 01 11:13:27 2018 -0400
@@ -30,6 +30,11 @@
   --lwt-toolbar-field-background-color: rgb(71, 71, 73);
   --lwt-toolbar-field-color: var(--chrome-color);
   --urlbar-separator-color: #5F6670;
+
+  /* !important to override LightweightThemeManager.addBuiltInTheme in
+     nsBrowserGlue.js */
+  --autocomplete-popup-background: #2A2A2E !important;
+  --autocomplete-popup-highlight-background: #0060DF;
 }
 
 :root:-moz-lwtheme-darktext {
diff -r 79556798ff9f -r 8885e98d44d4 browser/themes/shared/searchbar.inc.css
--- a/browser/themes/shared/searchbar.inc.css	Wed May 23 23:11:41 2018 -0400
+++ b/browser/themes/shared/searchbar.inc.css	Fri Jun 01 11:13:27 2018 -0400
@@ -52,6 +52,10 @@
   color: var(--panel-disabled-color);
 }
 
+:root[lwt-popup-brighttext] .search-panel-header {
+  color: var(--autocomplete-popup-color);
+}
+
 .search-panel-header > label {
   margin-top: 2px !important;
   margin-bottom: 1px !important;
diff -r 79556798ff9f -r 8885e98d44d4 browser/themes/windows/browser.css
--- a/browser/themes/windows/browser.css	Wed May 23 23:11:41 2018 -0400
+++ b/browser/themes/windows/browser.css	Fri Jun 01 11:13:27 2018 -0400
@@ -72,7 +72,11 @@
 }
 
 :root[lwt-popup-brighttext] {
-  --panel-separator-color: hsla(0,0%,80%,.25);
+  --panel-separator-color: rgba(249,249,250,.2);
+
+  --arrowpanel-dimmed: rgba(249,249,250,.1);
+  --arrowpanel-dimmed-further: rgba(249,249,250,.15);
+  --arrowpanel-dimmed-even-further: rgba(249,249,250,.2);
 }
 
 #navigator-toolbox:-moz-lwtheme {
","diff -r 94917b4ce0d1 -r bb3258d652a4 browser/components/customizableui/content/panelUI.inc.xhtml
--- a/browser/components/customizableui/content/panelUI.inc.xhtml	Wed Apr 29 15:21:51 2020 +0000
+++ b/browser/components/customizableui/content/panelUI.inc.xhtml	Wed Apr 29 15:47:03 2020 +0000
@@ -498,7 +498,7 @@
                            oncommand=""gSync.doSync();""
                            onmouseover=""gSync.refreshSyncButtonsTooltip();""
                            closemenu=""none""/>
-            <menuseparator id=""PanelUI-remotetabs-separator""/>
+            <toolbarseparator id=""PanelUI-remotetabs-separator""/>
           </vbox>
           <deck id=""PanelUI-remotetabs-deck"">
             <!-- Sync is ready to Sync and the ""tabs"" engine is enabled -->
diff -r 94917b4ce0d1 -r bb3258d652a4 browser/themes/shared/customizableui/panelUI.inc.css
--- a/browser/themes/shared/customizableui/panelUI.inc.css	Wed Apr 29 15:21:51 2020 +0000
+++ b/browser/themes/shared/customizableui/panelUI.inc.css	Wed Apr 29 15:47:03 2020 +0000
@@ -1335,7 +1335,6 @@
 }
 
 #widget-overflow-mainView > .panel-subview-body > toolbarseparator,
-.PanelUI-subView menuseparator,
 .PanelUI-subView toolbarseparator,
 .cui-widget-panelview menuseparator,
 .cui-widget-panel toolbarseparator {
@@ -1347,15 +1346,10 @@
   padding: 0;
 }
 
-.PanelUI-subView menuseparator {
-  margin-inline: -5px -4px;
-}
-
 .PanelUI-subView toolbarseparator {
   margin-inline: 0;
 }
 
-.PanelUI-subView menuseparator.small-separator,
 .PanelUI-subView toolbarseparator.small-separator {
   margin-inline: 5px;
 }
",1453722,8885e98d44d4a34619e5840b160f48d0b89a1337,"Bug 1453722 - Improvements to Dark Theme search bar. r=dao

MozReview-Commit-ID: AH3QVBRKymc",1532172,"Bug 1532172 - Fix separators in the context menu for downloaded files in the Library r=dao

Differential Revision: https://phabricator.services.mozilla.com/D72048",2018-06-01T11:13:00-04:00,Updates to Dark Theme Search Bar,"Hi, 

I've provided a spec to update the colouring of the search bar in Dark theme below. You can click on each element to get their values. Thanks!


https://firefoxux.github.io/people/amlee/Dark-Theme-Search-Bar/",Almost invisible separators in the context menu of a downloaded item in the Library when dark theme is enabled,"Created attachment 9048053
Separators in the context menu of a downloaded item, from the Downloads

This is a regression caused by bug 1453722.

STR:
1. New profile, enable dark theme
2. Download any file
3. Click the Downloads icon on the toolbar > right click the downloaded item > observe separators color and style -- expected
4. Click the Library icon > Downloads > right click the downloaded item > observe separators color and style -- bad

There are actually 2 issues here:
1. The separators are almost invisible -- this is regression from bug 1453722
2. Their style is not the same as other separators in the Firefox UI (not so much padding before and after) -- this goes back to when the Downloads section was first introduced in the Library

See attached."
bd3a170fc984a92ff6478480b16e3d8ce9cb2f68,2020-05-19T23:57:00+00:00,"diff -r ef38e7c833c7 -r ace4bfaec686 layout/generic/ScrollAnchorContainer.cpp
--- a/layout/generic/ScrollAnchorContainer.cpp	Mon Apr 13 15:42:59 2020 +0000
+++ b/layout/generic/ScrollAnchorContainer.cpp	Mon Apr 13 20:58:14 2020 +0000
@@ -76,15 +76,20 @@
                            nsIFrame* aAnchorNode, bool aInScrollAnchorChain) {
   nsIFrame* frame = aAnchorNode;
   while (frame && frame != aScrolledFrame) {
-    MOZ_ASSERT(
-        frame == aAnchorNode || !frame->IsScrollFrame(),
-        ""We shouldn't select an anchor node inside a nested scroll frame."");
-
+    // TODO(emilio, bug 1629280): This commented out assertion below should
+    // hold, but it may not in the case of reparenting-during-reflow (due to
+    // inline fragmentation or such). That looks fishy!
+    //
+    // We should either invalidate the anchor when reparenting any frame on the
+    // chain, or fix up the chain flags.
+    //
+    // MOZ_DIAGNOSTIC_ASSERT(frame->IsInScrollAnchorChain() !=
+    //                       aInScrollAnchorChain);
     frame->SetInScrollAnchorChain(aInScrollAnchorChain);
     frame = frame->GetParent();
   }
   MOZ_ASSERT(frame,
-             ""The anchor node should be a descendant of the scroll frame"");
+             ""The anchor node should be a descendant of the scrolled frame"");
   // If needed, invalidate the frame so that we start/stop highlighting the
   // anchor
   if (StaticPrefs::layout_css_scroll_anchoring_highlight()) {
@@ -196,55 +201,63 @@
   return logicalBounding.BStart(writingMode);
 }
 
-void ScrollAnchorContainer::SelectAnchor() {
-  MOZ_ASSERT(mScrollFrame->mScrolledFrame);
-  MOZ_ASSERT(mAnchorNodeIsDirty);
-
-  if (mDisabled || !StaticPrefs::layout_css_scroll_anchoring_enabled()) {
-    return;
+bool ScrollAnchorContainer::CanMaintainAnchor() const {
+  if (!StaticPrefs::layout_css_scroll_anchoring_enabled()) {
+    return false;
   }
 
-  AUTO_PROFILER_LABEL(""ScrollAnchorContainer::SelectAnchor"", LAYOUT);
-  ANCHOR_LOG(
-      ""Selecting anchor for with scroll-port=%s.\n"",
-      mozilla::ToString(mScrollFrame->GetVisualOptimalViewingRect()).c_str());
+  // If we've been disabled due to heuristics, we don't anchor anymore.
+  if (mDisabled) {
+    return false;
+  }
 
-  const nsStyleDisplay* disp = Frame()->StyleDisplay();
-
+  const nsStyleDisplay& disp = *Frame()->StyleDisplay();
   // Don't select a scroll anchor if the scroll frame has `overflow-anchor:
   // none`.
-  bool overflowAnchor =
-      disp->mOverflowAnchor == mozilla::StyleOverflowAnchor::Auto;
+  if (disp.mOverflowAnchor != mozilla::StyleOverflowAnchor::Auto) {
+    return false;
+  }
 
   // Or if the scroll frame has not been scrolled from the logical origin. This
   // is not in the specification [1], but Blink does this.
   //
   // [1] https://github.com/w3c/csswg-drafts/issues/3319
-  bool isScrolled = mScrollFrame->GetLogicalScrollPosition() != nsPoint();
+  if (mScrollFrame->GetLogicalScrollPosition() == nsPoint()) {
+    return false;
+  }
 
   // Or if there is perspective that could affect the scrollable overflow rect
   // for descendant frames. This is not in the specification as Blink doesn't
   // share this behavior with perspective [1].
   //
   // [1] https://github.com/w3c/csswg-drafts/issues/3322
-  bool hasPerspective = Frame()->ChildrenHavePerspective();
+  if (Frame()->ChildrenHavePerspective()) {
+    return false;
+  }
+
+  return true;
+}
+
+void ScrollAnchorContainer::SelectAnchor() {
+  MOZ_ASSERT(mScrollFrame->mScrolledFrame);
+  MOZ_ASSERT(mAnchorNodeIsDirty);
+
+  AUTO_PROFILER_LABEL(""ScrollAnchorContainer::SelectAnchor"", LAYOUT);
+  ANCHOR_LOG(
+      ""Selecting anchor with scroll-port=%s.\n"",
+      mozilla::ToString(mScrollFrame->GetVisualOptimalViewingRect()).c_str());
 
   // Select a new scroll anchor
   nsIFrame* oldAnchor = mAnchorNode;
-  if (overflowAnchor && isScrolled && !hasPerspective) {
-    ANCHOR_LOG(""Beginning candidate selection.\n"");
+  if (CanMaintainAnchor()) {
+    MOZ_DIAGNOSTIC_ASSERT(
+        !mScrollFrame->mScrolledFrame->IsInScrollAnchorChain(),
+        ""Our scrolled frame can't serve as or contain an anchor for an ""
+        ""ancestor if it can maintain its own anchor"");
+    ANCHOR_LOG(""Beginning selection.\n"");
     mAnchorNode = FindAnchorIn(mScrollFrame->mScrolledFrame);
   } else {
-    if (!overflowAnchor) {
-      ANCHOR_LOG(""Skipping candidate selection for `overflow-anchor: none`\n"");
-    }
-    if (!isScrolled) {
-      ANCHOR_LOG(""Skipping candidate selection for not being scrolled\n"");
-    }
-    if (hasPerspective) {
-      ANCHOR_LOG(
-          ""Skipping candidate selection for scroll frame with perspective\n"");
-    }
+    ANCHOR_LOG(""Skipping selection, doesn't maintain a scroll anchor"");
     mAnchorNode = nullptr;
   }
 
@@ -260,9 +273,9 @@
 
     // Set all flags for the new scroll anchor
     if (mAnchorNode) {
-      // Anchor selection will never select a descendant of a different scroll
-      // frame, so we can set flags without conflicting with other scroll
-      // anchor containers.
+      // Anchor selection will never select a descendant of a nested scroll
+      // frame which maintains an anchor, so we can set flags without
+      // conflicting with other scroll anchor containers.
       SetAnchorFlags(mScrollFrame->mScrolledFrame, mAnchorNode, true);
     }
   } else {
@@ -360,13 +373,19 @@
 
   if (mAnchorNode) {
     SetAnchorFlags(mScrollFrame->mScrolledFrame, mAnchorNode, false);
+  } else if (mScrollFrame->mScrolledFrame->IsInScrollAnchorChain()) {
+    // We don't maintain an anchor, and our scrolled frame is in the anchor
+    // chain of an ancestor. Invalidate that anchor.
+    //
+    // NOTE: Intentionally not forwarding aSchedule: Scheduling is always safe
+    // and not doing so is just an optimization.
+    FindFor(Frame())->InvalidateAnchor();
   }
   mAnchorNode = nullptr;
   mAnchorNodeIsDirty = true;
   mLastAnchorOffset = 0;
 
-  if (mDisabled || aSchedule == ScheduleSelection::No ||
-      !StaticPrefs::layout_css_scroll_anchoring_enabled()) {
+  if (!CanMaintainAnchor() || aSchedule == ScheduleSelection::No) {
     return;
   }
 
@@ -520,14 +539,18 @@
 
   const bool isAnonBox = aFrame->Style()->IsAnonBox();
 
-  // See if this frame could have its own anchor node. We could check
-  // IsScrollFrame(), but that would miss nsListControlFrame which is not a
-  // scroll frame, but still inherits from nsHTMLScrollFrame.
+  // See if this frame could have its own anchor node.
   nsIScrollableFrame* scrollable = do_QueryFrame(aFrame);
+  const bool isScrollableWithAnchor =
+      scrollable && scrollable->Anchor()->CanMaintainAnchor();
 
-  // We don't allow scroll anchors to be selected inside of scrollable frames as
-  // it's not clear how an anchor adjustment should apply to multiple scrollable
-  // frames. Blink allows this to happen, but they're not sure why [1].
+  // We don't allow scroll anchors to be selected inside of nested scrollable
+  // frames which maintain an anchor node as it's not clear how an anchor
+  // adjustment should apply to multiple scrollable frames.
+  //
+  // It is important to descend into _some_ scrollable frames, specially
+  // overflow: hidden, as those don't generally maintain their own anchors, and
+  // it is a common case in the wild where scroll anchoring ought to work.
   //
   // We also don't allow scroll anchors to be selected inside of replaced
   // elements (like <img>, <video>, <svg>...) as they behave atomically. SVG
@@ -535,7 +558,7 @@
   // it should apply anyway.
   //
   // [1] https://github.com/w3c/csswg-drafts/issues/3477
-  const bool canDescend = !scrollable && !isReplaced;
+  const bool canDescend = !isScrollableWithAnchor && !isReplaced;
 
   // Non-replaced inline boxes (including ruby frames) and anon boxes are not
   // acceptable anchors, so we descend if possible, or otherwise exclude them
diff -r ef38e7c833c7 -r ace4bfaec686 layout/generic/ScrollAnchorContainer.h
--- a/layout/generic/ScrollAnchorContainer.h	Mon Apr 13 15:42:59 2020 +0000
+++ b/layout/generic/ScrollAnchorContainer.h	Mon Apr 13 20:58:14 2020 +0000
@@ -64,6 +64,11 @@
   void SelectAnchor();
 
   /**
+   * Whether this scroll frame can maintain an anchor node at the moment.
+   */
+  bool CanMaintainAnchor() const;
+
+  /**
    * Notify the scroll anchor container that its scroll frame has been
    * scrolled by a user and should invalidate itself.
    */
diff -r ef38e7c833c7 -r ace4bfaec686 layout/generic/nsFrame.cpp
--- a/layout/generic/nsFrame.cpp	Mon Apr 13 15:42:59 2020 +0000
+++ b/layout/generic/nsFrame.cpp	Mon Apr 13 20:58:14 2020 +0000
@@ -10038,15 +10038,27 @@
     return false;
   }
 
-  ScrollAnchorContainer* container = ScrollAnchorContainer::FindFor(this);
-  if (container->AnchorNode() != this) {
-    return false;
-  }
-
-  if (aOutContainer) {
-    *aOutContainer = container;
-  }
-  return true;
+  nsIFrame* f = this;
+
+  // FIXME(emilio, bug 1629280): We should find a non-null anchor if we have the
+  // flag set, but bug 1629280 makes it so that we cannot really assert it /
+  // make this just a `while (true)`, and uncomment the below assertion.
+  while (auto* container = ScrollAnchorContainer::FindFor(f)) {
+    // MOZ_ASSERT(f->IsInScrollAnchorChain());
+    if (nsIFrame* anchor = container->AnchorNode()) {
+      if (anchor != this) {
+        return false;
+      }
+      if (aOutContainer) {
+        *aOutContainer = container;
+      }
+      return true;
+    }
+
+    f = container->Frame();
+  }
+
+  return false;
 }
 
 bool nsIFrame::IsInScrollAnchorChain() const { return mInScrollAnchorChain; }
diff -r ef38e7c833c7 -r ace4bfaec686 testing/web-platform/meta/css/css-scroll-anchoring/nested-overflow-subtree-layout.html.ini
--- a/testing/web-platform/meta/css/css-scroll-anchoring/nested-overflow-subtree-layout.html.ini	Mon Apr 13 15:42:59 2020 +0000
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,2 +0,0 @@
-[nested-overflow-subtree-layout.html]
-  expected: FAIL
","diff -r a23749aac83b -r bd3a170fc984 layout/generic/ScrollAnchorContainer.cpp
--- a/layout/generic/ScrollAnchorContainer.cpp	Tue May 19 16:30:20 2020 +0000
+++ b/layout/generic/ScrollAnchorContainer.cpp	Tue May 19 23:57:23 2020 +0000
@@ -366,6 +366,20 @@
 void ScrollAnchorContainer::SuppressAdjustments() {
   ANCHOR_LOG(""Received a scroll anchor suppression for %p.\n"", this);
   mSuppressAnchorAdjustment = true;
+
+  // Forward to our parent if appropriate, that is, if we don't maintain an
+  // anchor, and we can't maintain one.
+  //
+  // Note that we need to check !CanMaintainAnchor(), instead of just whether
+  // our frame is in the anchor chain of our ancestor as InvalidateAnchor()
+  // does, given some suppression triggers apply even for nodes that are not in
+  // the anchor chain.
+  if (!mAnchorNode && !CanMaintainAnchor()) {
+    if (ScrollAnchorContainer* container = FindFor(Frame())) {
+      ANCHOR_LOG("" > Forwarding to parent anchor\n"");
+      container->SuppressAdjustments();
+    }
+  }
 }
 
 void ScrollAnchorContainer::InvalidateAnchor(ScheduleSelection aSchedule) {
@@ -374,6 +388,7 @@
   if (mAnchorNode) {
     SetAnchorFlags(mScrollFrame->mScrolledFrame, mAnchorNode, false);
   } else if (mScrollFrame->mScrolledFrame->IsInScrollAnchorChain()) {
+    ANCHOR_LOG("" > Forwarding to parent anchor\n"");
     // We don't maintain an anchor, and our scrolled frame is in the anchor
     // chain of an ancestor. Invalidate that anchor.
     //
diff -r a23749aac83b -r bd3a170fc984 testing/web-platform/tests/css/css-scroll-anchoring/position-change-heuristic-in-nested-scroll-box.html
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/testing/web-platform/tests/css/css-scroll-anchoring/position-change-heuristic-in-nested-scroll-box.html	Tue May 19 23:57:23 2020 +0000
@@ -0,0 +1,85 @@
+<!DOCTYPE html>
+<script src=""/resources/testharness.js""></script>
+<script src=""/resources/testharnessreport.js""></script>
+<link rel=""help"" href=""https://drafts.csswg.org/css-scroll-anchoring/#suppression-triggers"">
+<style>
+#space {
+  height: 4000px;
+  overflow: hidden;
+}
+#header {
+  background-color: #F5B335;
+  height: 50px;
+  width: 100%;
+}
+#content {
+  background-color: #D3D3D3;
+  height: 400px;
+}
+.scroller {
+  overflow: scroll;
+  position: relative;
+  width: 600px;
+  height: 600px;
+}
+body {
+  overflow: hidden;
+}
+</style>
+<div id=""maybeScroller"">
+  <div id=""space"">
+    <div id=""header""></div>
+    <div id=""before""></div>
+    <div id=""content""></div>
+  </div>
+</div>
+<script>
+
+// Tests that scroll anchoring is suppressed when an element in the scroller
+// changes its in-flow state.
+
+var scroller;
+
+function runCase(oldPos, newPos, expectSuppression, skipInverse) {
+  var header = document.querySelector(""#header"");
+  var before = document.querySelector(""#before"");
+
+  header.style.position = oldPos;
+  before.style.height = ""0"";
+  scroller.scrollTop = 200;
+
+  header.style.position = newPos;
+  before.style.height = ""25px"";
+
+  var expectedTop = expectSuppression ? 200 : 225;
+  assert_equals(scroller.scrollTop, expectedTop);
+
+  if (!skipInverse)
+    runCase(newPos, oldPos, expectSuppression, true);
+}
+
+test(() => {
+  scroller = document.scrollingElement;
+  document.querySelector(""#maybeScroller"").className = """";
+
+  runCase(""static"", ""fixed"", true);
+  runCase(""static"", ""absolute"", true);
+  runCase(""static"", ""relative"", false);
+  runCase(""fixed"", ""absolute"", false);
+  runCase(""fixed"", ""relative"", true);
+  runCase(""absolute"", ""relative"", true);
+}, ""Position changes in document scroller."");
+
+test(() => {
+  scroller = document.querySelector(""#maybeScroller"");
+  scroller.className = ""scroller"";
+
+  runCase(""static"", ""fixed"", true);
+  runCase(""static"", ""absolute"", true);
+  runCase(""static"", ""relative"", false);
+  runCase(""fixed"", ""absolute"", false);
+  runCase(""fixed"", ""relative"", true);
+  runCase(""absolute"", ""relative"", true);
+}, ""Position changes in scrollable <div>."");
+
+</script>
",1520581,ace4bfaec6861e9d6b4a3cebc07b96194acf9ed7,"Bug 1520581 - Allow to select scroll anchors inside nested scroll frames. r=dholbert

As long as the nested scrollframe doesn't maintain an anchor itself.

This is important for pages which use overflow: hidden to contain large
parts of their scrollable content, see bug 1629237 for an example.

When calling InvalidateAnchor(), we may invalidate an ancestor anchor
itself, if we're not maintaining an anchor and our scrolled frame is
part of the anchor chain. This is important to maintain our state
properly.

I was going to add some assertion to this effect but it can fail when
fragmenting inlines already, so for now I've commented it out and filed
bug 1629280 for that. It's not great, but it cannot lead to a security
issue so we probably can fix it with time.

Differential Revision: https://phabricator.services.mozilla.com/D70609",1538537,"Bug 1538537 - When suppressing anchoring on an scrollframe, forward to the frame that actually maintains the anchor as needed. r=dholbert

The test-case is position-change-heuristic.html but with body and #space
having overflow: hidden, which makes it fail on Nightly.

Differential Revision: https://phabricator.services.mozilla.com/D75825",2020-04-13T20:58:00+00:00,Descendant 'overflow: hidden' elements with auto height can prevent effective scroll anchoring,"Mozilla/5.0 (Android 8.1.0; Mobile; rv:66.0) Gecko/66.0 Firefox/66.0 (20190116093310)


STR:
1 Open Firefox.
2 Go to https://www.rottentomatoes.com/m/mechanic_resurrection/
3 Scroll down all the way to ""Movie Info"" section while the other sections aren't loaded


ER: Solid scroll position
AR: The page jump once the content is fully loaded


The same behavior could be observed in the responsive design mode. 

https://St3fQA.tinytake.com/sf/MzIzNDMzNF85NjkxMzAz",Cannot scroll down to payment section on a specific website,"User Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0

Steps to reproduce:

visit the checkout on a woocommerce website. tried multiple browsers and firefox is the only one with the issue. updated a dev version to the lastest of wordpress, woocommerce etc.. issue still there.

example: https://www.netpal.co.uk/checkout/ add a product to the cart and go to the checkout.


Actual results:

users cannot scroll to the payment section. there is an infinite loop that holds you at the top of the page and stops you from scrolling down any further. does not affect firefox on ipad or mobile


Expected results:

normal page scrolling behaviour"
c02b7ed97e6021621e09a9c870e8639643ec8da7,2020-08-17T19:42:00+00:00,"diff -r fd650d585c34 -r 24d820f46375 dom/base/nsDOMWindowUtils.cpp
--- a/dom/base/nsDOMWindowUtils.cpp	Wed Oct 31 08:48:35 2018 +0000
+++ b/dom/base/nsDOMWindowUtils.cpp	Wed Oct 31 08:55:33 2018 +0000
@@ -3603,7 +3603,8 @@
   while (node) {
     if (node->IsNodeOfType(nsINode::eHTML_FORM_CONTROL)) {
       nsCOMPtr<nsIFormControl> fc = do_QueryInterface(node);
-      if (fc && fc->IsDisabledForEvents(eVoidEvent)) {
+      WidgetEvent event(true, eVoidEvent);
+      if (fc && fc->IsDisabledForEvents(&event)) {
         *aRetVal = true;
         break;
       }
diff -r fd650d585c34 -r 24d820f46375 dom/html/HTMLButtonElement.cpp
--- a/dom/html/HTMLButtonElement.cpp	Wed Oct 31 08:48:35 2018 +0000
+++ b/dom/html/HTMLButtonElement.cpp	Wed Oct 31 08:55:33 2018 +0000
@@ -175,18 +175,19 @@
 }
 
 bool
-HTMLButtonElement::IsDisabledForEvents(EventMessage aMessage)
+HTMLButtonElement::IsDisabledForEvents(WidgetEvent* aEvent)
 {
   nsIFormControlFrame* formControlFrame = GetFormControlFrame(false);
   nsIFrame* formFrame = do_QueryFrame(formControlFrame);
-  return IsElementDisabledForEvents(aMessage, formFrame);
+  return IsElementDisabledForEvents(aEvent, formFrame);
 }
 
 void
 HTMLButtonElement::GetEventTargetParent(EventChainPreVisitor& aVisitor)
 {
   aVisitor.mCanHandle = false;
-  if (IsDisabledForEvents(aVisitor.mEvent->mMessage)) {
+
+  if (IsDisabledForEvents(aVisitor.mEvent)) {
     return;
   }
 
diff -r fd650d585c34 -r 24d820f46375 dom/html/HTMLButtonElement.h
--- a/dom/html/HTMLButtonElement.h	Wed Oct 31 08:48:35 2018 +0000
+++ b/dom/html/HTMLButtonElement.h	Wed Oct 31 08:55:33 2018 +0000
@@ -46,7 +46,7 @@
   NS_IMETHOD SubmitNamesValues(HTMLFormSubmission* aFormSubmission) override;
   NS_IMETHOD SaveState() override;
   bool RestoreState(PresState* aState) override;
-  virtual bool IsDisabledForEvents(EventMessage aMessage) override;
+  virtual bool IsDisabledForEvents(WidgetEvent* aEvent) override;
 
   virtual void FieldSetDisabledChanged(bool aNotify) override;
 
diff -r fd650d585c34 -r 24d820f46375 dom/html/HTMLFieldSetElement.cpp
--- a/dom/html/HTMLFieldSetElement.cpp	Wed Oct 31 08:48:35 2018 +0000
+++ b/dom/html/HTMLFieldSetElement.cpp	Wed Oct 31 08:55:33 2018 +0000
@@ -49,9 +49,9 @@
 
 
 bool
-HTMLFieldSetElement::IsDisabledForEvents(EventMessage aMessage)
+HTMLFieldSetElement::IsDisabledForEvents(WidgetEvent* aEvent)
 {
-  return IsElementDisabledForEvents(aMessage, nullptr);
+  return IsElementDisabledForEvents(aEvent, nullptr);
 }
 
 // nsIContent
@@ -60,7 +60,7 @@
 {
   // Do not process any DOM events if the element is disabled.
   aVisitor.mCanHandle = false;
-  if (IsDisabledForEvents(aVisitor.mEvent->mMessage)) {
+  if (IsDisabledForEvents(aVisitor.mEvent)) {
     return;
   }
 
diff -r fd650d585c34 -r 24d820f46375 dom/html/HTMLFieldSetElement.h
--- a/dom/html/HTMLFieldSetElement.h	Wed Oct 31 08:48:35 2018 +0000
+++ b/dom/html/HTMLFieldSetElement.h	Wed Oct 31 08:55:33 2018 +0000
@@ -47,7 +47,7 @@
   // nsIFormControl
   NS_IMETHOD Reset() override;
   NS_IMETHOD SubmitNamesValues(HTMLFormSubmission* aFormSubmission) override;
-  virtual bool IsDisabledForEvents(EventMessage aMessage) override;
+  virtual bool IsDisabledForEvents(WidgetEvent* aEvent) override;
   virtual nsresult Clone(dom::NodeInfo*, nsINode** aResult) const override;
 
   const nsIContent* GetFirstLegend() const { return mFirstLegend; }
diff -r fd650d585c34 -r 24d820f46375 dom/html/HTMLInputElement.cpp
--- a/dom/html/HTMLInputElement.cpp	Wed Oct 31 08:48:35 2018 +0000
+++ b/dom/html/HTMLInputElement.cpp	Wed Oct 31 08:55:33 2018 +0000
@@ -3372,9 +3372,9 @@
 }
 
 bool
-HTMLInputElement::IsDisabledForEvents(EventMessage aMessage)
-{
-  return IsElementDisabledForEvents(aMessage, GetPrimaryFrame());
+HTMLInputElement::IsDisabledForEvents(WidgetEvent* aEvent)
+{
+  return IsElementDisabledForEvents(aEvent, GetPrimaryFrame());
 }
 
 void
@@ -3382,7 +3382,7 @@
 {
   // Do not process any DOM events if the element is disabled
   aVisitor.mCanHandle = false;
-  if (IsDisabledForEvents(aVisitor.mEvent->mMessage)) {
+  if (IsDisabledForEvents(aVisitor.mEvent)) {
     return;
   }
 
diff -r fd650d585c34 -r 24d820f46375 dom/html/HTMLInputElement.h
--- a/dom/html/HTMLInputElement.h	Wed Oct 31 08:48:35 2018 +0000
+++ b/dom/html/HTMLInputElement.h	Wed Oct 31 08:55:33 2018 +0000
@@ -168,7 +168,7 @@
   NS_IMETHOD SaveState() override;
   virtual bool RestoreState(PresState* aState) override;
   virtual bool AllowDrop() override;
-  virtual bool IsDisabledForEvents(EventMessage aMessage) override;
+  virtual bool IsDisabledForEvents(WidgetEvent* aEvent) override;
 
   virtual void FieldSetDisabledChanged(bool aNotify) override;
 
diff -r fd650d585c34 -r 24d820f46375 dom/html/HTMLOptGroupElement.cpp
--- a/dom/html/HTMLOptGroupElement.cpp	Wed Oct 31 08:48:35 2018 +0000
+++ b/dom/html/HTMLOptGroupElement.cpp	Wed Oct 31 08:55:33 2018 +0000
@@ -44,11 +44,6 @@
 HTMLOptGroupElement::GetEventTargetParent(EventChainPreVisitor& aVisitor)
 {
   aVisitor.mCanHandle = false;
-  // Do not process any DOM events if the element is disabled
-  // XXXsmaug This is not the right thing to do. But what is?
-  if (IsDisabled()) {
-    return;
-  }
 
   if (nsIFrame* frame = GetPrimaryFrame()) {
     // FIXME(emilio): This poking at the style of the frame is broken unless we
diff -r fd650d585c34 -r 24d820f46375 dom/html/HTMLSelectElement.cpp
--- a/dom/html/HTMLSelectElement.cpp	Wed Oct 31 08:48:35 2018 +0000
+++ b/dom/html/HTMLSelectElement.cpp	Wed Oct 31 08:55:33 2018 +0000
@@ -1304,21 +1304,21 @@
 }
 
 bool
-HTMLSelectElement::IsDisabledForEvents(EventMessage aMessage)
+HTMLSelectElement::IsDisabledForEvents(WidgetEvent* aEvent)
 {
   nsIFormControlFrame* formControlFrame = GetFormControlFrame(false);
   nsIFrame* formFrame = nullptr;
   if (formControlFrame) {
     formFrame = do_QueryFrame(formControlFrame);
   }
-  return IsElementDisabledForEvents(aMessage, formFrame);
+  return IsElementDisabledForEvents(aEvent, formFrame);
 }
 
 void
 HTMLSelectElement::GetEventTargetParent(EventChainPreVisitor& aVisitor)
 {
   aVisitor.mCanHandle = false;
-  if (IsDisabledForEvents(aVisitor.mEvent->mMessage)) {
+  if (IsDisabledForEvents(aVisitor.mEvent)) {
     return;
   }
 
diff -r fd650d585c34 -r 24d820f46375 dom/html/HTMLSelectElement.h
--- a/dom/html/HTMLSelectElement.h	Wed Oct 31 08:48:35 2018 +0000
+++ b/dom/html/HTMLSelectElement.h	Wed Oct 31 08:55:33 2018 +0000
@@ -254,7 +254,7 @@
   NS_IMETHOD SubmitNamesValues(HTMLFormSubmission* aFormSubmission) override;
   NS_IMETHOD SaveState() override;
   virtual bool RestoreState(PresState* aState) override;
-  virtual bool IsDisabledForEvents(EventMessage aMessage) override;
+  virtual bool IsDisabledForEvents(WidgetEvent* aEvent) override;
 
   virtual void FieldSetDisabledChanged(bool aNotify) override;
 
diff -r fd650d585c34 -r 24d820f46375 dom/html/HTMLTextAreaElement.cpp
--- a/dom/html/HTMLTextAreaElement.cpp	Wed Oct 31 08:48:35 2018 +0000
+++ b/dom/html/HTMLTextAreaElement.cpp	Wed Oct 31 08:55:33 2018 +0000
@@ -481,18 +481,18 @@
 }
 
 bool
-HTMLTextAreaElement::IsDisabledForEvents(EventMessage aMessage)
+HTMLTextAreaElement::IsDisabledForEvents(WidgetEvent* aEvent)
 {
   nsIFormControlFrame* formControlFrame = GetFormControlFrame(false);
   nsIFrame* formFrame = do_QueryFrame(formControlFrame);
-  return IsElementDisabledForEvents(aMessage, formFrame);
+  return IsElementDisabledForEvents(aEvent, formFrame);
 }
 
 void
 HTMLTextAreaElement::GetEventTargetParent(EventChainPreVisitor& aVisitor)
 {
   aVisitor.mCanHandle = false;
-  if (IsDisabledForEvents(aVisitor.mEvent->mMessage)) {
+  if (IsDisabledForEvents(aVisitor.mEvent)) {
     return;
   }
 
diff -r fd650d585c34 -r 24d820f46375 dom/html/HTMLTextAreaElement.h
--- a/dom/html/HTMLTextAreaElement.h	Wed Oct 31 08:48:35 2018 +0000
+++ b/dom/html/HTMLTextAreaElement.h	Wed Oct 31 08:55:33 2018 +0000
@@ -65,7 +65,7 @@
   NS_IMETHOD SubmitNamesValues(HTMLFormSubmission* aFormSubmission) override;
   NS_IMETHOD SaveState() override;
   virtual bool RestoreState(PresState* aState) override;
-  virtual bool IsDisabledForEvents(EventMessage aMessage) override;
+  virtual bool IsDisabledForEvents(WidgetEvent* aEvent) override;
 
   virtual void FieldSetDisabledChanged(bool aNotify) override;
 
diff -r fd650d585c34 -r 24d820f46375 dom/html/nsGenericHTMLElement.cpp
--- a/dom/html/nsGenericHTMLElement.cpp	Wed Oct 31 08:48:35 2018 +0000
+++ b/dom/html/nsGenericHTMLElement.cpp	Wed Oct 31 08:55:33 2018 +0000
@@ -2180,10 +2180,17 @@
 }
 
 bool
-nsGenericHTMLFormElement::IsElementDisabledForEvents(EventMessage aMessage,
+nsGenericHTMLFormElement::IsElementDisabledForEvents(WidgetEvent* aEvent,
                                                      nsIFrame* aFrame)
 {
-  switch (aMessage) {
+  MOZ_ASSERT(aEvent);
+
+  // Allow dispatch of CustomEvent and untrusted Events.
+  if (!aEvent->IsTrusted()) {
+    return false;
+  }
+
+  switch (aEvent->mMessage) {
     case eMouseMove:
     case eMouseOver:
     case eMouseOut:
@@ -2440,8 +2447,9 @@
 void
 nsGenericHTMLElement::Click(CallerType aCallerType)
 {
-  if (HandlingClick())
+  if (IsDisabled() || HandlingClick()) {
     return;
+  }
 
   // Strong in case the event kills it
   nsCOMPtr<nsIDocument> doc = GetComposedDoc();
diff -r fd650d585c34 -r 24d820f46375 dom/html/nsGenericHTMLElement.h
--- a/dom/html/nsGenericHTMLElement.h	Wed Oct 31 08:48:35 2018 +0000
+++ b/dom/html/nsGenericHTMLElement.h	Wed Oct 31 08:55:33 2018 +0000
@@ -1133,7 +1133,7 @@
                               void* aData);
 
   // Returns true if the event should not be handled from GetEventTargetParent
-  bool IsElementDisabledForEvents(mozilla::EventMessage aMessage,
+  bool IsElementDisabledForEvents(mozilla::WidgetEvent* aEvent,
                                   nsIFrame* aFrame);
 
   // The focusability state of this form control.  eUnfocusable means that it
diff -r fd650d585c34 -r 24d820f46375 dom/html/nsIFormControl.h
--- a/dom/html/nsIFormControl.h	Wed Oct 31 08:48:35 2018 +0000
+++ b/dom/html/nsIFormControl.h	Wed Oct 31 08:55:33 2018 +0000
@@ -219,7 +219,7 @@
    */
   inline bool AllowDraggableChildren() const;
 
-  virtual bool IsDisabledForEvents(mozilla::EventMessage aMessage)
+  virtual bool IsDisabledForEvents(mozilla::WidgetEvent* aEvent)
   {
     return false;
   }
diff -r fd650d585c34 -r 24d820f46375 testing/web-platform/meta/html/semantics/forms/attributes-common-to-form-controls/disabled-elements-01.html.ini
--- a/testing/web-platform/meta/html/semantics/forms/attributes-common-to-form-controls/disabled-elements-01.html.ini	Wed Oct 31 08:48:35 2018 +0000
+++ b/testing/web-platform/meta/html/semantics/forms/attributes-common-to-form-controls/disabled-elements-01.html.ini	Wed Oct 31 08:55:33 2018 +0000
@@ -1,13 +1,13 @@
 [disabled-elements-01.html]
   [Test [button\]: synthetic click events should be dispatched]
-    expected: FAIL
+    expected: PASS
 
   [Test [input\]: synthetic click events should be dispatched]
-    expected: FAIL
+    expected: PASS
 
   [Test [select\]: synthetic click events should be dispatched]
-    expected: FAIL
+    expected: PASS
 
   [Test [textarea\]: synthetic click events should be dispatched]
-    expected: FAIL
+    expected: PASS
 
diff -r fd650d585c34 -r 24d820f46375 testing/web-platform/tests/dom/events/Event-dispatch-on-disabled-elements.html
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/testing/web-platform/tests/dom/events/Event-dispatch-on-disabled-elements.html	Wed Oct 31 08:55:33 2018 +0000
@@ -0,0 +1,132 @@
+<!doctype html>
+<meta charset=""utf8"">
+<title>Events must dispatch on disabled elements</title>
+<script src=""/resources/testharness.js""></script>
+<script src=""/resources/testharnessreport.js""></script>
+<script src=""/resources/testdriver.js""></script>
+<script src=""/resources/testdriver-vendor.js""></script>
+<body>
+<script>
+// HTML elements that can be disabled
+const formElements = [""button"", ""fieldset"", ""input"", ""select"", ""textarea""];
+
+test(() => {
+  for (const localName of formElements) {
+    const elem = document.createElement(localName);
+    elem.disabled = true;
+    // pass becomes true if the event is called and it's the right type.
+    let pass = false;
+    const listener = ({ type }) => {
+      pass = type === ""click"";
+    };
+    elem.addEventListener(""click"", listener, { once: true });
+    elem.dispatchEvent(new Event(""click""));
+    assert_true(
+      pass,
+      `Untrusted ""click"" Event didn't dispatch on ${elem.constructor.name}.`
+    );
+  }
+}, ""Can dispatch untrusted 'click' Events at disabled HTML elements."");
+
+test(() => {
+  for (const localName of formElements) {
+    const elem = document.createElement(localName);
+    elem.disabled = true;
+    // pass becomes true if the event is called and it's the right type.
+    let pass = false;
+    const listener = ({ type }) => {
+      pass = type === ""pass"";
+    };
+    elem.addEventListener(""pass"", listener, { once: true });
+    elem.dispatchEvent(new Event(""pass""));
+    assert_true(
+      pass,
+      `Untrusted ""pass"" Event didn't dispatch on ${elem.constructor.name}`
+    );
+  }
+}, ""Can dispatch untrusted Events at disabled HTML elements."");
+
+test(() => {
+  for (const localName of formElements) {
+    const elem = document.createElement(localName);
+    elem.disabled = true;
+    // pass becomes true if the event is called and it's the right type.
+    let pass = false;
+    const listener = ({ type }) => {
+      pass = type === ""custom-pass"";
+    };
+    elem.addEventListener(""custom-pass"", listener, { once: true });
+    elem.dispatchEvent(new CustomEvent(""custom-pass""));
+    assert_true(
+      pass,
+      `CustomEvent ""custom-pass"" didn't dispatch on ${elem.constructor.name}`
+    );
+  }
+}, ""Can dispatch CustomEvents at disabled HTML elements."");
+
+test(() => {
+  for (const localName of formElements) {
+    const elem = document.createElement(localName);
+
+    // Element is disabled... so this click() MUST NOT fire an event.
+    elem.disabled = true;
+    let pass = true;
+    elem.onclick = e => {
+      pass = false;
+    };
+    elem.click();
+    assert_true(
+      pass,
+      `.click() must not dispatch ""click"" event on disabled ${
+        elem.constructor.name
+      }.`
+    );
+
+    // Element is (re)enabled... so this click() fires an event.
+    elem.disabled = false;
+    pass = false;
+    elem.onclick = e => {
+      pass = true;
+    };
+    elem.click();
+    assert_true(
+      pass,
+      `.click() must dispatch ""click"" event on enabled ${
+        elem.constructor.name
+      }.`
+    );
+  }
+}, ""Calling click() on disabled elements must not dispatch events."");
+
+promise_test(async () => {
+  for (const localName of formElements) {
+    const elem = document.createElement(localName);
+    elem.disabled = true;
+    document.body.appendChild(elem);
+
+    // Element is disabled, so clicking must not fire events
+    let pass = true;
+    elem.onclick = e => {
+      pass = false;
+    };
+    await test_driver.click(elem); // triggers ""onclick""
+    assert_true(
+      pass,
+      `${elem.constructor.name} is disabled, so onclick must not fire.`
+    );
+
+    // Element is (re)enabled... so this click() will fire an event.
+    pass = false;
+    elem.disabled = false;
+    elem.onclick = () => {
+      pass = true;
+    };
+    await test_driver.click(elem); // triggers ""onclick""
+    assert_true(
+      pass,
+      `${elem.constructor.name} is enabled, so onclick must fire.`
+    );
+    elem.remove();
+  }
+}, ""Real clicks on disabled elements must not dispatch events."");
+</script>
","diff -r 39fd3e407dba -r c02b7ed97e60 dom/html/HTMLLabelElement.cpp
--- a/dom/html/HTMLLabelElement.cpp	Mon Aug 17 19:51:44 2020 +0000
+++ b/dom/html/HTMLLabelElement.cpp	Mon Aug 17 19:42:14 2020 +0000
@@ -87,92 +87,94 @@
   // Strong ref because event dispatch is going to happen.
   RefPtr<Element> content = GetLabeledElement();
 
-  if (content) {
-    mHandlingEvent = true;
-    switch (aVisitor.mEvent->mMessage) {
-      case eMouseDown:
-        if (mouseEvent->mButton == MouseButton::ePrimary) {
-          // We reset the mouse-down point on every event because there is
-          // no guarantee we will reach the eMouseClick code below.
-          LayoutDeviceIntPoint* curPoint =
-              new LayoutDeviceIntPoint(mouseEvent->mRefPoint);
-          SetProperty(nsGkAtoms::labelMouseDownPtProperty,
-                      static_cast<void*>(curPoint),
-                      nsINode::DeleteProperty<LayoutDeviceIntPoint>);
-        }
-        break;
+  if (!content || content->IsDisabled()) {
+    return NS_OK;
+  }
+
+  mHandlingEvent = true;
+  switch (aVisitor.mEvent->mMessage) {
+    case eMouseDown:
+      if (mouseEvent->mButton == MouseButton::ePrimary) {
+        // We reset the mouse-down point on every event because there is
+        // no guarantee we will reach the eMouseClick code below.
+        LayoutDeviceIntPoint* curPoint =
+            new LayoutDeviceIntPoint(mouseEvent->mRefPoint);
+        SetProperty(nsGkAtoms::labelMouseDownPtProperty,
+                    static_cast<void*>(curPoint),
+                    nsINode::DeleteProperty<LayoutDeviceIntPoint>);
+      }
+      break;
+
+    case eMouseClick:
+      if (mouseEvent->IsLeftClickEvent()) {
+        LayoutDeviceIntPoint* mouseDownPoint =
+            static_cast<LayoutDeviceIntPoint*>(
+                GetProperty(nsGkAtoms::labelMouseDownPtProperty));
+
+        bool dragSelect = false;
+        if (mouseDownPoint) {
+          LayoutDeviceIntPoint dragDistance = *mouseDownPoint;
+          RemoveProperty(nsGkAtoms::labelMouseDownPtProperty);
 
-      case eMouseClick:
-        if (mouseEvent->IsLeftClickEvent()) {
-          LayoutDeviceIntPoint* mouseDownPoint =
-              static_cast<LayoutDeviceIntPoint*>(
-                  GetProperty(nsGkAtoms::labelMouseDownPtProperty));
-
-          bool dragSelect = false;
-          if (mouseDownPoint) {
-            LayoutDeviceIntPoint dragDistance = *mouseDownPoint;
-            RemoveProperty(nsGkAtoms::labelMouseDownPtProperty);
-
-            dragDistance -= mouseEvent->mRefPoint;
-            const int CLICK_DISTANCE = 2;
-            dragSelect = dragDistance.x > CLICK_DISTANCE ||
-                         dragDistance.x < -CLICK_DISTANCE ||
-                         dragDistance.y > CLICK_DISTANCE ||
-                         dragDistance.y < -CLICK_DISTANCE;
-          }
-          // Don't click the for-content if we did drag-select text or if we
-          // have a kbd modifier (which adjusts a selection).
-          if (dragSelect || mouseEvent->IsShift() || mouseEvent->IsControl() ||
-              mouseEvent->IsAlt() || mouseEvent->IsMeta()) {
-            break;
+          dragDistance -= mouseEvent->mRefPoint;
+          const int CLICK_DISTANCE = 2;
+          dragSelect = dragDistance.x > CLICK_DISTANCE ||
+                       dragDistance.x < -CLICK_DISTANCE ||
+                       dragDistance.y > CLICK_DISTANCE ||
+                       dragDistance.y < -CLICK_DISTANCE;
+        }
+        // Don't click the for-content if we did drag-select text or if we
+        // have a kbd modifier (which adjusts a selection).
+        if (dragSelect || mouseEvent->IsShift() || mouseEvent->IsControl() ||
+            mouseEvent->IsAlt() || mouseEvent->IsMeta()) {
+          break;
+        }
+        // Only set focus on the first click of multiple clicks to prevent
+        // to prevent immediate de-focus.
+        if (mouseEvent->mClickCount <= 1) {
+          if (nsFocusManager* fm = nsFocusManager::GetFocusManager()) {
+            // Use FLAG_BYMOVEFOCUS here so that the label is scrolled to.
+            // Also, within HTMLInputElement::PostHandleEvent, inputs will
+            // be selected only when focused via a key or when the navigation
+            // flag is used and we want to select the text on label clicks as
+            // well.
+            // If the label has been clicked by the user, we also want to
+            // pass FLAG_BYMOUSE so that we get correct focus ring behavior,
+            // but we don't want to pass FLAG_BYMOUSE if this click event was
+            // caused by the user pressing an accesskey.
+            bool byMouse = (mouseEvent->mInputSource !=
+                            MouseEvent_Binding::MOZ_SOURCE_KEYBOARD);
+            bool byTouch = (mouseEvent->mInputSource ==
+                            MouseEvent_Binding::MOZ_SOURCE_TOUCH);
+            fm->SetFocus(content,
+                         nsIFocusManager::FLAG_BYMOVEFOCUS |
+                             (byMouse ? nsIFocusManager::FLAG_BYMOUSE : 0) |
+                             (byTouch ? nsIFocusManager::FLAG_BYTOUCH : 0));
           }
-          // Only set focus on the first click of multiple clicks to prevent
-          // to prevent immediate de-focus.
-          if (mouseEvent->mClickCount <= 1) {
-            if (nsFocusManager* fm = nsFocusManager::GetFocusManager()) {
-              // Use FLAG_BYMOVEFOCUS here so that the label is scrolled to.
-              // Also, within HTMLInputElement::PostHandleEvent, inputs will
-              // be selected only when focused via a key or when the navigation
-              // flag is used and we want to select the text on label clicks as
-              // well.
-              // If the label has been clicked by the user, we also want to
-              // pass FLAG_BYMOUSE so that we get correct focus ring behavior,
-              // but we don't want to pass FLAG_BYMOUSE if this click event was
-              // caused by the user pressing an accesskey.
-              bool byMouse = (mouseEvent->mInputSource !=
-                              MouseEvent_Binding::MOZ_SOURCE_KEYBOARD);
-              bool byTouch = (mouseEvent->mInputSource ==
-                              MouseEvent_Binding::MOZ_SOURCE_TOUCH);
-              fm->SetFocus(content,
-                           nsIFocusManager::FLAG_BYMOVEFOCUS |
-                               (byMouse ? nsIFocusManager::FLAG_BYMOUSE : 0) |
-                               (byTouch ? nsIFocusManager::FLAG_BYTOUCH : 0));
-            }
-          }
-          // Dispatch a new click event to |content|
-          //    (For compatibility with IE, we do only left click.  If
-          //    we wanted to interpret the HTML spec very narrowly, we
-          //    would do nothing.  If we wanted to do something
-          //    sensible, we might send more events through like
-          //    this.)  See bug 7554, bug 49897, and bug 96813.
-          nsEventStatus status = aVisitor.mEventStatus;
-          // Ok to use aVisitor.mEvent as parameter because DispatchClickEvent
-          // will actually create a new event.
-          EventFlags eventFlags;
-          eventFlags.mMultipleActionsPrevented = true;
-          DispatchClickEvent(MOZ_KnownLive(aVisitor.mPresContext), mouseEvent,
-                             content, false, &eventFlags, &status);
-          // Do we care about the status this returned?  I don't think we do...
-          // Don't run another <label> off of this click
-          mouseEvent->mFlags.mMultipleActionsPrevented = true;
         }
-        break;
+        // Dispatch a new click event to |content|
+        //    (For compatibility with IE, we do only left click.  If
+        //    we wanted to interpret the HTML spec very narrowly, we
+        //    would do nothing.  If we wanted to do something
+        //    sensible, we might send more events through like
+        //    this.)  See bug 7554, bug 49897, and bug 96813.
+        nsEventStatus status = aVisitor.mEventStatus;
+        // Ok to use aVisitor.mEvent as parameter because DispatchClickEvent
+        // will actually create a new event.
+        EventFlags eventFlags;
+        eventFlags.mMultipleActionsPrevented = true;
+        DispatchClickEvent(MOZ_KnownLive(aVisitor.mPresContext), mouseEvent,
+                           content, false, &eventFlags, &status);
+        // Do we care about the status this returned?  I don't think we do...
+        // Don't run another <label> off of this click
+        mouseEvent->mFlags.mMultipleActionsPrevented = true;
+      }
+      break;
 
-      default:
-        break;
-    }
-    mHandlingEvent = false;
+    default:
+      break;
   }
+  mHandlingEvent = false;
   return NS_OK;
 }
 
diff -r 39fd3e407dba -r c02b7ed97e60 testing/web-platform/tests/dom/events/Event-dispatch-click.tentative.html
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/testing/web-platform/tests/dom/events/Event-dispatch-click.tentative.html	Mon Aug 17 19:42:14 2020 +0000
@@ -0,0 +1,52 @@
+<!doctype html>
+<title>Clicks on input element</title>
+<script src=""/resources/testharness.js""></script>
+<script src=""/resources/testharnessreport.js""></script>
+<div id=dump style=display:none></div>
+<script>
+var dump = document.getElementById(""dump"")
+
+test(t => {
+  const input = document.createElement(""input"");
+  input.type = ""checkbox"";
+  input.disabled = true;
+  const label = document.createElement(""label"");
+  label.append(input);
+  dump.append(label);
+  label.click();
+  assert_false(input.checked);
+}, ""disabled checkbox should not be checked from label click"");
+
+test(t => {
+  const input = document.createElement(""input"");
+  input.type = ""radio"";
+  input.disabled = true;
+  const label = document.createElement(""label"");
+  label.append(input);
+  dump.append(label);
+  label.click();
+  assert_false(input.checked);
+}, ""disabled radio should not be checked from label click"");
+
+test(t => {
+  const input = document.createElement(""input"");
+  input.type = ""checkbox"";
+  input.disabled = true;
+  const label = document.createElement(""label"");
+  label.append(input);
+  dump.append(label);
+  label.dispatchEvent(new MouseEvent(""click""));
+  assert_false(input.checked);
+}, ""disabled checkbox should not be checked from label click by dispatchEvent"");
+
+test(t => {
+  const input = document.createElement(""input"");
+  input.type = ""radio"";
+  input.disabled = true;
+  const label = document.createElement(""label"");
+  label.append(input);
+  dump.append(label);
+  label.dispatchEvent(new MouseEvent(""click""));
+  assert_false(input.checked);
+}, ""disabled radio should not be checked from label click by dispatchEvent"");
+</script>
",329509,24d820f46375e012400fa2afd17bcda7ac7efa59,"Bug 329509 - allow dispatching event when element is disabled. r=annevk,smaug

Allow untrusted Events and Custom events to be dispatched at disabled form element. This is for interop and some developers have asked for this.

Differential Revision: https://phabricator.services.mozilla.com/D10000",1540995,"Bug 1540995 - Ignore disabled labeled controls r=smaug

This patch intentionally does not ignore all click events on <input>
as web compatibility requires <input type=""checkbox""> and
<input type=""radio""> to mutate from `dispatchEvent()`.

Depends on D87022

Differential Revision: https://phabricator.services.mozilla.com/D87148",2018-10-31T08:55:00+00:00,Do not prevent event dispatching via dispatchEvent even if there is no prescontext or (form) element is disabled,"Do not prevent event dispatching even if there is no prescontext or (form) element is disabled. Currently for example mutation events don't work if form elements are
disabled.",calling click() on a label with disabled checkbox must not toggle its checked state,"User Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36

Steps to reproduce:

Here's a pen to test https://codepen.io/lausselloic/pen/pBJNmV
Tested on FF64, FF65 and FF66 till FF65 the checked state is updated, that wasn't the case on FF64


Actual results:

Checkbox state change when mycheck.check() is called


Expected results:

Checkbox doesn't change as it's disabled"
3514a3988f2505b9739cea0664c4a2b7579f5d33,2019-04-11T09:23:00+00:00,"diff -r 6fca712ccc8c -r f2b5c9dd4f59 toolkit/content/license.html
--- a/toolkit/content/license.html	Wed Sep 27 09:33:02 2017 -0500
+++ b/toolkit/content/license.html	Wed Sep 27 17:03:10 2017 +0200
@@ -7,20 +7,20 @@
   <head>
     <meta http-equiv=""Content-Type"" content=""text/html;charset=utf-8"">
     <title>Licenses</title>
-
     <link rel=""stylesheet"" href=""chrome://global/skin/in-content/info-pages.css"" type=""text/css"">
+    <link rel=""stylesheet"" href=""chrome://global/skin/aboutLicense.css"" type=""text/css""/>
   </head>
 
   <body id=""lic-info"">
-    <div class=""container"">
+  <div class=""license-header"">
+    <div>
       <h1><a id=""top""></a>Licenses</h1>
-
-      <div>
-
 #ifdef APP_LICENSE_BLOCK
 #includesubst @APP_LICENSE_BLOCK@
 #endif
-
+    </div>
+  </div>
+  <div>
     <p>All of the <b>source code</b> to this product is
        available under licenses which are both
        <a href=""http://www.gnu.org/philosophy/free-sw.html"">free</a> and
diff -r 6fca712ccc8c -r f2b5c9dd4f59 toolkit/themes/shared/aboutLicense.css
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/toolkit/themes/shared/aboutLicense.css	Wed Sep 27 17:03:10 2017 +0200
@@ -0,0 +1,15 @@
+/* License Illustration */
+
+.license-header {
+  background-image: url(""chrome://global/skin/illustrations/about-license.svg"");
+  background-repeat: no-repeat;
+  background-position: right center;
+  min-height: 300px;
+  display: flex;
+  align-items: center;
+  padding-inline-end: 320px;
+}
+
+body[dir=""rtl""] .rights-header {
+  background-position-x: left;
+}
diff -r 6fca712ccc8c -r f2b5c9dd4f59 toolkit/themes/shared/illustrations/about-license.svg
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/toolkit/themes/shared/illustrations/about-license.svg	Wed Sep 27 17:03:10 2017 +0200
@@ -0,0 +1,52 @@
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+<svg xmlns=""http://www.w3.org/2000/svg"" width=""300"" height=""300"" viewBox=""0 0 300 300"">
+ <defs>
+   <linearGradient id=""a"" x1=""-300.021"" y1=""-272.736"" x2=""547.138"" y2=""574.423"" gradientUnits=""userSpaceOnUse"">
+     <stop offset=""0"" stop-color=""#ccfbff""/>
+     <stop offset=""1"" stop-color=""#c9e4ff""/>
+   </linearGradient>
+   <linearGradient id=""b"" x1=""-18.672"" y1=""23.78"" x2=""279.805"" y2=""322.256"" gradientUnits=""userSpaceOnUse"">
+     <stop offset=""0"" stop-color=""#00c8d7""/>
+     <stop offset=""1"" stop-color=""#0a84ff""/>
+   </linearGradient>
+ </defs>
+  <path d=""M267.464 87.073h-27.583c-2.347-4.377-8.617-14.64-16.509-16.145-10.217-1.948-12.254 8.237-12.254 8.237s-6.79-17.654-23.97-15.315c-19.262 2.623-10.189 22.9-10.189 22.9h-29l16.568.323h-16.569a1 1 0 0 0 0 2h119.506a1 1 0 0 0 0-2z"" fill=""#fff""/>
+  <path d=""M100.384 63.259H84.836c-1.212-2.3-4.758-8.29-9.271-9.15-5.682-1.083-6.814 4.58-6.814 4.58s-3.776-9.817-13.33-8.517c-10.712 1.458-5.666 12.735-5.666 12.735H33.629l18.049.352H33.924a1 1 0 1 0 0 2h66.46a1 1 0 0 0 0-2z"" fill=""#fff""/>
+  <path d=""M122.246 134H26.93a1 1 0 1 1 0-2h95.316a1 1 0 1 1 0 2z"" fill=""#eaeaee""/>
+  <path d=""M106.678 127.455H60.912a.5.5 0 1 1 0-1h45.766a.5.5 0 0 1 0 1z"" fill=""#eaeaee""/>
+  <path d=""M245.16 186.748h-90.336a1 1 0 0 1 0-2h90.336a1 1 0 0 1 0 2z"" fill=""#eaeaee""/>
+  <path fill=""none"" stroke=""#eaeaee"" stroke-linecap=""round"" stroke-linejoin=""round"" stroke-dasharray=""12 8 3 4 1 9"" d=""M132.518 192.779h135.95""/>
+  <path d=""M148.458 82.782h29s-9.074-20.277 10.189-22.9c17.18-2.339 23.97 15.315 23.97 15.315s2.037-10.185 12.254-8.237c10.074 1.921 17.511 16.634 17.511 16.634h25.25"" fill=""none"" stroke=""#eaeaee"" stroke-linecap=""round"" stroke-linejoin=""round"" stroke-dasharray=""12 8 3 4 1 9""/>
+  <path d=""M34.125 60.429H50.25s-5.05-11.276 5.667-12.735c9.554-1.3 13.33 8.517 13.33 8.517s1.133-5.664 6.814-4.58c5.6 1.068 9.738 8.589 9.738 8.589h14.042"" fill=""none"" stroke=""#eaeaee"" stroke-linecap=""round"" stroke-linejoin=""round"" stroke-dasharray=""12 8 3 4 1 9""/>
+  <ellipse cx=""149.78"" cy=""243.175"" rx=""77.947"" ry=""6.445"" fill=""#eaeaee""/>
+  <path d=""M221.876 77.056H78.01a10.312 10.312 0 0 0-10.3 10.3v134.026a9.824 9.824 0 0 0 9.95 9.669h144.566a9.824 9.824 0 0 0 9.95-9.669V87.356a10.313 10.313 0 0 0-10.3-10.3z"" fill=""#fff""/>
+  <path d=""M221.876 81.89H78.01a5.306 5.306 0 0 0-5.3 5.3v134.027a4.821 4.821 0 0 0 4.95 4.669h144.566a4.821 4.821 0 0 0 4.95-4.669V87.19a5.307 5.307 0 0 0-5.3-5.3z"" fill=""#f9f9fa""/>
+  <g fill=""url(#a)"">
+   <path d=""M76.368 105.543V219c0 2.28.84 3.13 3.12 3.13H220.4c2.28 0 3.12-.85 3.12-3.13V105.543zM185 200.6a3.693 3.693 0 0 1-3.693 3.693h-60.762a3.693 3.693 0 0 1-3.693-3.693v-78.762a3.693 3.693 0 0 1 3.693-3.693h44.971L185 137.421z""/>
+   <path d=""M187.187 193.93h-16.773a2.625 2.625 0 0 1-1.924-.89l-5.326-5.759a2.924 2.924 0 0 1 0-3.894l5.326-5.759a2.625 2.625 0 0 1 1.924-.89h16.773c1.6 0 2.9 1.582 2.9 3.534V190.4c-.001 1.948-1.299 3.53-2.9 3.53z""/>
+   <path d=""M187.187 166.021h-16.773a2.625 2.625 0 0 1-1.924-.89l-5.326-5.759a2.924 2.924 0 0 1 0-3.894l5.326-5.759a2.625 2.625 0 0 1 1.924-.89h16.773c1.6 0 2.9 1.582 2.9 3.534v10.126c-.001 1.949-1.299 3.532-2.9 3.532z""/>
+  </g>
+  <g fill=""url(#b)"">
+   <path d=""M221.876 81.891a5.307 5.307 0 0 1 5.3 5.3v134.026a4.821 4.821 0 0 1-4.95 4.669H77.66a4.821 4.821 0 0 1-4.95-4.669V87.19a5.306 5.306 0 0 1 5.3-5.3h143.866m0-2H78.01a7.308 7.308 0 0 0-7.3 7.3v134.027a6.822 6.822 0 0 0 6.95 6.669h144.566a6.822 6.822 0 0 0 6.95-6.669V87.19a7.309 7.309 0 0 0-7.3-7.3z""/>
+   <circle cx=""85.771"" cy=""93.32"" r=""3.241""/>
+   <circle cx=""96.226"" cy=""93.32"" r=""3.241""/>
+   <path d=""M186.093 96.986h-72.3a3.509 3.509 0 0 1-3.509-3.509v-.313a3.509 3.509 0 0 1 3.509-3.509h72.3a3.509 3.509 0 0 1 3.509 3.509v.313a3.509 3.509 0 0 1-3.509 3.509z""/>
+   <circle cx=""203.66"" cy=""93.32"" r=""3.241""/>
+   <circle cx=""214.116"" cy=""93.32"" r=""3.241""/>
+   <path d=""M157.13 131.141h-31.754a1.351 1.351 0 1 1 0-2.7h31.755a1.351 1.351 0 1 1 0 2.7z""/>
+   <path d=""M153.609 139.09a1.351 1.351 0 0 0-1.351-1.351h-26.882a1.351 1.351 0 0 0 0 2.7h26.882a1.351 1.351 0 0 0 1.351-1.349z""/>
+   <path d=""M164.676 148.39a1.351 1.351 0 0 0-1.351-1.351h-37.949a1.351 1.351 0 0 0 0 2.7h37.949a1.351 1.351 0 0 0 1.351-1.349z""/>
+   <path d=""M159.665 157.69a1.351 1.351 0 0 0-1.351-1.351h-32.938a1.351 1.351 0 0 0 0 2.7h32.938a1.351 1.351 0 0 0 1.351-1.349z""/>
+   <path d=""M153.609 166.99a1.351 1.351 0 0 0-1.351-1.351h-26.882a1.351 1.351 0 1 0 0 2.7h26.882a1.351 1.351 0 0 0 1.351-1.349z""/>
+   <path d=""M164.676 176.29a1.351 1.351 0 0 0-1.351-1.351h-37.949a1.351 1.351 0 1 0 0 2.7h37.949a1.351 1.351 0 0 0 1.351-1.349z""/>
+   <path d=""M159.672 185.59a1.351 1.351 0 0 0-1.351-1.351h-32.945a1.351 1.351 0 1 0 0 2.7h32.944a1.351 1.351 0 0 0 1.352-1.349z""/>
+   <path d=""M164.676 194.89a1.351 1.351 0 0 0-1.351-1.351h-37.949a1.351 1.351 0 1 0 0 2.7h37.949a1.351 1.351 0 0 0 1.351-1.349z""/>
+   <path d=""M165.517 118.145l19.276 19.276h-15.179a4.1 4.1 0 0 1-4.1-4.1v-15.176m0-1a1 1 0 0 0-1 1v15.179a5.1 5.1 0 0 0 5.1 5.1h15.179a1 1 0 0 0 .707-1.707l-19.276-19.276a1 1 0 0 0-.707-.293z""/>
+   <path d=""M187.187 178.737c.367 0 .9.6.9 1.534V190.4c0 .936-.532 1.534-.9 1.534h-16.773a.689.689 0 0 1-.455-.248l-5.326-5.759a.932.932 0 0 1 0-1.178l5.326-5.759a.688.688 0 0 1 .455-.248h16.773m0-2h-16.773a2.625 2.625 0 0 0-1.924.89l-5.326 5.759a2.924 2.924 0 0 0 0 3.894l5.326 5.759a2.626 2.626 0 0 0 1.924.89h16.773c1.6 0 2.9-1.582 2.9-3.534v-10.129c0-1.952-1.3-3.534-2.9-3.534z""/>
+   <path d=""M187.187 150.827c.367 0 .9.6.9 1.534v10.126c0 .936-.532 1.534-.9 1.534h-16.773a.689.689 0 0 1-.455-.248l-5.326-5.759a.932.932 0 0 1 0-1.178l5.326-5.76a.687.687 0 0 1 .455-.248h16.773m0-2h-16.773a2.624 2.624 0 0 0-1.924.89l-5.326 5.759a2.924 2.924 0 0 0 0 3.894l5.326 5.759a2.626 2.626 0 0 0 1.924.89h16.773c1.6 0 2.9-1.582 2.9-3.534v-10.125c0-1.952-1.3-3.534-2.9-3.534z""/>
+   <path d=""M186.408 136l-19.485-19.276a2 2 0 0 0-1.407-.578h-44.971a5.7 5.7 0 0 0-5.693 5.693V200.6a5.7 5.7 0 0 0 5.693 5.693h60.763A5.693 5.693 0 0 0 187 200.6v-8.67h-2v8.67a3.693 3.693 0 0 1-3.693 3.693h-60.762a3.693 3.693 0 0 1-3.693-3.693v-78.762a3.693 3.693 0 0 1 3.693-3.693h44.971L185 137.421v13.406h2v-13.406a2 2 0 0 0-.592-1.421zM185 178.737h2v-14.716h-2z""/>
+   <path d=""M180.308 205.81h-58.763a5.7 5.7 0 0 1-5.693-5.693v4.667a5.7 5.7 0 0 0 5.693 5.693h58.763a5.693 5.693 0 0 0 5.692-5.694v-4.667a5.693 5.693 0 0 1-5.693 5.693z""/>
+  </g>
+</svg>
diff -r 6fca712ccc8c -r f2b5c9dd4f59 toolkit/themes/shared/jar.inc.mn
--- a/toolkit/themes/shared/jar.inc.mn	Wed Sep 27 09:33:02 2017 -0500
+++ b/toolkit/themes/shared/jar.inc.mn	Wed Sep 27 17:03:10 2017 +0200
@@ -19,6 +19,7 @@
   skin/classic/global/aboutReaderContent.css               (../../shared/aboutReaderContent.css)
 * skin/classic/global/aboutReaderControls.css              (../../shared/aboutReaderControls.css)
   skin/classic/global/aboutRights.css                      (../../shared/aboutRights.css)
+  skin/classic/global/aboutLicense.css                     (../../shared/aboutLicense.css)
   skin/classic/global/aboutSupport.css                     (../../shared/aboutSupport.css)
   skin/classic/global/appPicker.css                        (../../shared/appPicker.css)
   skin/classic/global/config.css                           (../../shared/config.css)
@@ -44,6 +45,7 @@
   skin/classic/global/icons/warning.svg                    (../../shared/icons/warning.svg)
   skin/classic/global/illustrations/about-rights.svg       (../../shared/illustrations/about-rights.svg)
   skin/classic/global/icons/blocked.svg                    (../../shared/incontent-icons/blocked.svg)
+  skin/classic/global/illustrations/about-license.svg      (../../shared/illustrations/about-license.svg)
   skin/classic/global/narrate.css                          (../../shared/narrate.css)
   skin/classic/global/narrateControls.css                  (../../shared/narrateControls.css)
   skin/classic/global/narrate/arrow.svg                    (../../shared/narrate/arrow.svg)
","diff -r 6f76423aad07 -r 3514a3988f25 toolkit/themes/shared/aboutLicense.css
--- a/toolkit/themes/shared/aboutLicense.css	Thu Apr 11 09:03:53 2019 +0000
+++ b/toolkit/themes/shared/aboutLicense.css	Thu Apr 11 09:23:08 2019 +0000
@@ -10,6 +10,3 @@
   padding-inline-end: 320px;
 }
 
-body[dir=""rtl""] .rights-header {
-  background-position-x: left;
-}
",1361695,f2b5c9dd4f592de658126269d1488b88c3dd7d7a,"Bug 1361695 - Added illustration to about:license; r=dao

MozReview-Commit-ID: 6MIY0cvBPQ6",1543143,"Bug 1543143 - deleted bogus selector in aboutLicense.css r=Gijs

Differential Revision: https://phabricator.services.mozilla.com/D27039",2017-09-27T17:03:00+02:00,Add illustration to about:license,"mockup: https://mozilla.invisionapp.com/share/ZKBC94BPQ#/screens/229803192

image: attachment 8861726",about:license has bogus [dir=rtl] selector,"There's some confusing things going on here - bug 1361695 added a `license-header`, but the CSS uses `rights-header`, in addition to a body[dir=rtl] check that looks to me like it'll never match because nothing would set that attribute (that I can see)."
6b754628d15922d6f564ea222fbb0d90135e25a9,2019-04-16T18:45:00+00:00,"diff -r af3fd1f92628 -r 0dcf343133e9 js/src/vm/TypeInference-inl.h
--- a/js/src/vm/TypeInference-inl.h	Fri Oct 05 14:29:20 2018 +0000
+++ b/js/src/vm/TypeInference-inl.h	Thu Oct 04 14:56:57 2018 +0200
@@ -15,6 +15,8 @@
 #include ""mozilla/Casting.h""
 #include ""mozilla/PodOperations.h""
 
+#include <utility> // for ::std::swap
+
 #include ""builtin/Symbol.h""
 #include ""gc/GC.h""
 #include ""jit/BaselineJIT.h""
@@ -1094,6 +1096,101 @@
 
         return nullptr;
     }
+
+    template <class T, class U, class Key, typename Fun>
+    static void
+    MapEntries(U**& values, unsigned count, Fun f)
+    {
+        // No element.
+        if (count == 0) {
+            MOZ_RELEASE_ASSERT(!values);
+            return;
+        }
+
+        // When we have a single element it is stored in-place of the function
+        // array pointer.
+        if (count == 1) {
+            values = reinterpret_cast<U**>(f(reinterpret_cast<U*>(values)));
+            return;
+        }
+
+        // When we have SET_ARRAY_SIZE or fewer elements, the values is an
+        // unorderred array.
+        if (count <= SET_ARRAY_SIZE) {
+            for (unsigned i = 0; i < count; i++) {
+                values[i] = f(values[i]);
+            }
+            return;
+        }
+
+        // Simple functions to read and mutate the lowest bit of pointers.
+        auto lowBit = [](U* elem) -> bool {
+            return bool(reinterpret_cast<uintptr_t>(elem) & 1);
+        };
+        auto toggleLowBit = [](U* elem) -> U* {
+            return reinterpret_cast<U*>(reinterpret_cast<uintptr_t>(elem) ^ 1);
+        };
+
+        // This code applies the function f and relocates the values based on
+        // the new pointers.
+        //
+        // To avoid allocations, we reuse the same structure but distinguish the
+        // elements to be rellocated from the rellocated elements with the
+        // lowest bit.
+        unsigned capacity = Capacity(count);
+        MOZ_RELEASE_ASSERT(uintptr_t(values[-1]) == capacity);
+        unsigned found = 0;
+        for (unsigned i = 0; i < capacity; i++) {
+            if (!values[i]) {
+                continue;
+            }
+            MOZ_ASSERT(found <= count);
+            U* elem = f(values[i]);
+            values[i] = nullptr;
+            MOZ_ASSERT(!lowBit(elem));
+            values[found++] = toggleLowBit(elem);
+        }
+        MOZ_ASSERT(found == count);
+
+        // Follow the same rule as InsertTry, except that for each cell we
+        // identify empty cell content with:
+        //
+        //   nullptr    empty cell.
+        //   0b....0    inserted element.
+        //   0b....1    empty cell - element to be inserted.
+        unsigned mask = capacity - 1;
+        for (unsigned i = 0; i < count; i++) {
+            U* elem = values[i];
+            if (!lowBit(elem)) {
+                // If this is a newly inserted element, this implies that one of
+                // the previous objects was moved to this position.
+                continue;
+            }
+            values[i] = nullptr;
+            while (elem) {
+                MOZ_ASSERT(lowBit(elem));
+                elem = toggleLowBit(elem);
+                unsigned pos = HashKey<T,Key>(Key::getKey(elem)) & mask;
+                while (values[pos] != nullptr && !lowBit(values[pos])) {
+                    pos = (pos + 1) & mask;
+                }
+                // The replaced element is either a nullptr, which stops this
+                // loop, or an element to be inserted, which would be inserted
+                // by this loop.
+                std::swap(values[pos], elem);
+            }
+        }
+#ifdef DEBUG
+        unsigned inserted = 0;
+        for (unsigned i = 0; i < capacity; i++) {
+            if (!values[i]) {
+                continue;
+            }
+            inserted++;
+        }
+        MOZ_ASSERT(inserted == count);
+#endif
+    }
 };
 
 /////////////////////////////////////////////////////////////////////
diff -r af3fd1f92628 -r 0dcf343133e9 js/src/vm/TypeInference.cpp
--- a/js/src/vm/TypeInference.cpp	Fri Oct 05 14:29:20 2018 +0000
+++ b/js/src/vm/TypeInference.cpp	Thu Oct 04 14:56:57 2018 +0200
@@ -4546,47 +4546,13 @@
     MOZ_ASSERT(JS::RuntimeHeapIsMinorCollecting());
 
     unsigned objectCount = baseObjectCount();
-    if (objectCount >= 2) {
-        unsigned oldCapacity = TypeHashSet::Capacity(objectCount);
-        ObjectKey** oldArray = objectSet;
-
-        MOZ_RELEASE_ASSERT(uintptr_t(oldArray[-1]) == oldCapacity);
-
-        unsigned oldObjectCount = objectCount;
-        unsigned oldObjectsFound = 0;
-
-        clearObjects();
-        objectCount = 0;
-        for (unsigned i = 0; i < oldCapacity; i++) {
-            ObjectKey* key = oldArray[i];
-            if (!key) {
-                continue;
-            }
+    TypeHashSet::MapEntries<ObjectKey*, ObjectKey, ObjectKey>(
+        objectSet,
+        objectCount,
+        [&](ObjectKey* key) -> ObjectKey* {
             TraceObjectKey(trc, &key);
-            oldObjectsFound++;
-
-            AutoEnterOOMUnsafeRegion oomUnsafe;
-            ObjectKey** pentry =
-                TypeHashSet::Insert<ObjectKey*, ObjectKey, ObjectKey>
-                    (zone->types.typeLifoAlloc(), objectSet, objectCount, key);
-            if (!pentry) {
-                oomUnsafe.crash(""ConstraintTypeSet::trace"");
-            }
-
-            *pentry = key;
-        }
-        MOZ_RELEASE_ASSERT(oldObjectCount == oldObjectsFound);
-        setBaseObjectCount(objectCount);
-        // Note: -1/+1 to also poison the capacity field.
-        JS_POISON(oldArray - 1, JS_SWEPT_TI_PATTERN, (oldCapacity + 1) * sizeof(oldArray[0]),
-                  MemCheckKind::MakeUndefined);
-    } else if (objectCount == 1) {
-        ObjectKey* key = (ObjectKey*) objectSet;
-        TraceObjectKey(trc, &key);
-        objectSet = reinterpret_cast<ObjectKey**>(key);
-    } else {
-        MOZ_RELEASE_ASSERT(!objectSet);
-    }
+            return key;
+        });
 
 #ifdef DEBUG
     MOZ_ASSERT(objectCount == baseObjectCount());
","diff -r a0eb669e2d77 -r 6b754628d159 js/src/vm/TypeInference-inl.h
--- a/js/src/vm/TypeInference-inl.h	Wed Apr 17 10:24:30 2019 +0000
+++ b/js/src/vm/TypeInference-inl.h	Tue Apr 16 18:45:45 2019 +0000
@@ -993,10 +993,21 @@
       return;
     }
 
+    // Simple functions to read and mutate the mark bit of pointers.
+    auto markBit = [](U* elem) -> bool {
+      return bool(reinterpret_cast<uintptr_t>(elem) & U::TypeHashSetMarkBit);
+    };
+    auto toggleMarkBit = [](U* elem) -> U* {
+      return reinterpret_cast<U*>(
+          reinterpret_cast<uintptr_t>(elem) ^ U::TypeHashSetMarkBit);
+    };
+
     // When we have a single element it is stored in-place of the function
     // array pointer.
     if (count == 1) {
-      values = reinterpret_cast<U**>(f(reinterpret_cast<U*>(values)));
+      U* elem = f(reinterpret_cast<U*>(values));
+      MOZ_ASSERT(!markBit(elem));
+      values = reinterpret_cast<U**>(elem);
       return;
     }
 
@@ -1004,25 +1015,19 @@
     // unorderred array.
     if (count <= SET_ARRAY_SIZE) {
       for (unsigned i = 0; i < count; i++) {
-        values[i] = f(values[i]);
+        U* elem = f(values[i]);
+        MOZ_ASSERT(!markBit(elem));
+        values[i] = elem;
       }
       return;
     }
 
-    // Simple functions to read and mutate the lowest bit of pointers.
-    auto lowBit = [](U* elem) -> bool {
-      return bool(reinterpret_cast<uintptr_t>(elem) & 1);
-    };
-    auto toggleLowBit = [](U* elem) -> U* {
-      return reinterpret_cast<U*>(reinterpret_cast<uintptr_t>(elem) ^ 1);
-    };
-
     // This code applies the function f and relocates the values based on
     // the new pointers.
     //
     // To avoid allocations, we reuse the same structure but distinguish the
     // elements to be rellocated from the rellocated elements with the
-    // lowest bit.
+    // mark bit.
     unsigned capacity = Capacity(count);
     MOZ_RELEASE_ASSERT(uintptr_t(values[-1]) == capacity);
     unsigned found = 0;
@@ -1033,31 +1038,31 @@
       MOZ_ASSERT(found <= count);
       U* elem = f(values[i]);
       values[i] = nullptr;
-      MOZ_ASSERT(!lowBit(elem));
-      values[found++] = toggleLowBit(elem);
+      MOZ_ASSERT(!markBit(elem));
+      values[found++] = toggleMarkBit(elem);
     }
     MOZ_ASSERT(found == count);
 
-    // Follow the same rule as InsertTry, except that for each cell we
-    // identify empty cell content with:
+    // Follow the same rule as InsertTry, except that for each cell we identify
+    // empty cell content with either a nullptr or the value of the mark bit:
     //
     //   nullptr    empty cell.
-    //   0b....0    inserted element.
-    //   0b....1    empty cell - element to be inserted.
+    //   0b...0.    inserted element.
+    //   0b...1.    empty cell - element to be inserted.
     unsigned mask = capacity - 1;
     for (unsigned i = 0; i < count; i++) {
       U* elem = values[i];
-      if (!lowBit(elem)) {
+      if (!markBit(elem)) {
         // If this is a newly inserted element, this implies that one of
         // the previous objects was moved to this position.
         continue;
       }
       values[i] = nullptr;
       while (elem) {
-        MOZ_ASSERT(lowBit(elem));
-        elem = toggleLowBit(elem);
+        MOZ_ASSERT(markBit(elem));
+        elem = toggleMarkBit(elem);
         unsigned pos = HashKey<T, Key>(Key::getKey(elem)) & mask;
-        while (values[pos] != nullptr && !lowBit(values[pos])) {
+        while (values[pos] != nullptr && !markBit(values[pos])) {
           pos = (pos + 1) & mask;
         }
         // The replaced element is either a nullptr, which stops this
diff -r a0eb669e2d77 -r 6b754628d159 js/src/vm/TypeSet.h
--- a/js/src/vm/TypeSet.h	Wed Apr 17 10:24:30 2019 +0000
+++ b/js/src/vm/TypeSet.h	Tue Apr 16 18:45:45 2019 +0000
@@ -289,6 +289,7 @@
 
     bool isGroup() { return (uintptr_t(this) & 1) == 0; }
     bool isSingleton() { return (uintptr_t(this) & 1) != 0; }
+    static constexpr uintptr_t TypeHashSetMarkBit = 1 << 1;
 
     inline ObjectGroup* group();
     inline JSObject* singleton();
",1496402,0dcf343133e9c8339c2d1d989f3d2c7f2a243f53,Bug 1496402 - ConstraintTypeSet::trace: Rehash HashTypeSet in-place after tracing. r=sfink,1543159,"Bug 1543159 - TypeHashSet should use a non-reserved bit for marking elements to be moved. r=jandem

Differential Revision: https://phabricator.services.mozilla.com/D26961",2018-10-04T14:56:00+02:00,ConstraintTypeSet::trace reallocate its content with a oomUnsafe LifoAlloc on minor GCs.,"When doing a minor GC, we have to trace all ObjectKey* which changes the pointers value. TypeHashSet uses these pointers values to compute the hash. As they got modified by the tracing function their hashes are no longer valid and they have to be moved accordingly.

At the moment, this is done by iterating over all ObjectKey* elements, tracing them, and inserting them back in a new TypeHashSet allocated in a LifoAlloc.  This implies that every time ConstraintTypeSet::trace is called, we are going to increase the memory consumption a lot.

We have 2 approaches to this problem, either:
 1. We use a LifoAllocScope to create the new TypeHashSet before copying them back on the original TypeHashSet, and reclaim the memory when going out of the LifoAllocScope.
 2. We rewrite this mechanism to rehash the content in-place.

The first approach is the simplest but it might trip on the edge case of being at the end of a LifoAlloc chunks, which would involve much more logic than simply doing a bump allocator.

The second approach is more complex, but give us the opportunity to remove the oomUnsafe case, which appeared while testing Bug 1489572.",TypeHashSet::MapEntries doesn't handle ObjectKey elements correctly,"Changing SET_ARRAY_SIZE in TypeInference-inl.h from 8 to 2 triggers several jit-test assertion failures here:

https://searchfox.org/mozilla-central/rev/8d78f219702286c873860f39f9ed78bad1a6d062/js/src/vm/TypeInference-inl.h#1036

The problem is that ObjectKey *also* uses the low bit, for singleton vs group.

(Without the SET_ARRAY_SIZE change it's relatively hard to trigger in the shell due to different TypeSet object limits for DOM classes...)"
bc17715cc318a32b92e818ff3bfb666baf0c893f,2019-04-11T09:58:00+00:00,"diff -r 662b776a02e6 -r 55ed5f885d52 .clang-format
--- a/.clang-format	Fri Apr 05 21:41:42 2019 +0000
+++ b/.clang-format	Fri Apr 05 21:41:57 2019 +0000
@@ -25,3 +25,5 @@
 
 SortIncludes: false
 IndentPPDirectives: AfterHash
+StatementMacros: [MARKUPMAP, ASSERT_TRUE, ASSERT_FALSE, TEST, CHECK]
+
","diff -r 1c603eed6ce4 -r bc17715cc318 python/mozbuild/mozbuild/mach_commands.py
--- a/python/mozbuild/mozbuild/mach_commands.py	Fri Apr 12 17:03:32 2019 +0000
+++ b/python/mozbuild/mozbuild/mach_commands.py	Thu Apr 11 09:58:59 2019 +0000
@@ -1677,6 +1677,8 @@
     # File contaning all paths to exclude from formatting
     _format_ignore_file = '.clang-format-ignore'
 
+    _clang_tidy_config = None
+
     @Command('static-analysis', category='testing',
              description='Run C++ static analysis checks')
     def static_analysis(self):
@@ -1724,9 +1726,17 @@
         self._set_log_level(verbose)
         self.log_manager.enable_all_structured_loggers()
 
+        rc = self._get_clang_tools(verbose=verbose)
+        if rc != 0:
+            return rc
+
+        if self._is_version_eligible() is False:
+            self.log(logging.ERROR, 'static-analysis', {}, ""You're using an old version of clang-format binary.""
+                            "" Please update to a more recent one by running: './mach bootstrap'"")
+            return 1
+
         rc = self._build_compile_db(verbose=verbose)
         rc = rc or self._build_export(jobs=jobs, verbose=verbose)
-        rc = rc or self._get_clang_tools(verbose=verbose)
         if rc != 0:
             return rc
 
@@ -1753,7 +1763,8 @@
 
         cwd = self.topobjdir
         self._compilation_commands_path = self.topobjdir
-        self._clang_tidy_config = self._get_clang_tidy_config()
+        if self._clang_tidy_config is None:
+            self._clang_tidy_config = self._get_clang_tidy_config()
         args = self._get_clang_tidy_command(
             checks=checks, header_filter=header_filter, sources=source, jobs=jobs, fix=fix)
 
@@ -2203,6 +2214,34 @@
             return None
         return config
 
+    def _is_version_eligible(self):
+        # make sure that we've cached self._clang_tidy_config
+        if self._clang_tidy_config is None:
+            self._clang_tidy_config = self._get_clang_tidy_config()
+
+        version = None
+        if 'package_version' in self._clang_tidy_config:
+            version = self._clang_tidy_config['package_version']
+        else:
+            self.log(logging.ERROR, 'static-analysis', {}, ""Unable to find 'package_version' in the config.yml"")
+            return False
+
+        # Because the fact that we ship together clang-tidy and clang-format
+        # we are sure that these two will always share the same version.
+        # Thus in order to determine that the version is compatible we only
+        # need to check one of them, going with clang-format
+        cmd = [self._clang_format_path, '--version']
+        try:
+            output = subprocess.check_output(cmd, stderr=subprocess.STDOUT).decode('utf-8')
+            version_string = 'clang-format version ' + version
+            if output.startswith(version_string):
+                return True
+        except subprocess.CalledProcessError as e:
+            self.log(logging.ERROR, 'static-analysis', {},
+                     ""Error determining the version clang-tidy/format binary, please see the attached exception: \n{}"".format(e.output))
+
+        return False
+
     def _get_clang_tidy_command(self, checks, header_filter, sources, jobs, fix):
 
         if checks == '-*':
@@ -2755,6 +2794,11 @@
             if rc != 0:
                 return rc
 
+        if self._is_version_eligible() is False:
+            self.log(logging.ERROR, 'static-analysis', {}, ""You're using an old version of clang-format binary.""
+                            "" Please update to a more recent one by running: './mach bootstrap'"")
+            return 1
+
         if path is None:
             return self._run_clang_format_diff(self._clang_format_diff,
                                                self._clang_format_path, commit, output)
diff -r 1c603eed6ce4 -r bc17715cc318 tools/clang-tidy/config.yaml
--- a/tools/clang-tidy/config.yaml	Fri Apr 12 17:03:32 2019 +0000
+++ b/tools/clang-tidy/config.yaml	Thu Apr 11 09:58:59 2019 +0000
@@ -18,7 +18,7 @@
   - win64
 # Minimum clang-tidy version that is required for all the following checkers
 # to work properly.
-min_clang_tidy: ""8.0.0""
+package_version: ""8.0.0""
 clang_checkers:
   - name: -*
     publish: !!bool no
",1542146,55ed5f885d52c347f6ef98bb86d2eb71f2a729c3,"Bug 1542146 - Use the new option StatementMacros from clang-format-8 r=andi

Differential Revision: https://phabricator.services.mozilla.com/D26279",1543492,"Bug 1543492 - for clang based static-analysis and formating add a package version that represents a baseline if we continue the analysis or prompt for an update. r=sylvestre

Differential Revision: https://phabricator.services.mozilla.com/D27042",2019-04-05T21:41:00+00:00,Use the new option StatementMacros from clang-format-8,"It helps clang-format-8 to know if they should be considered as function
https://reviews.llvm.org/D33440

StatementMacros: [MARKUPMAP, ASSERT_TRUE, ASSERT_FALSE, TEST, CHECK]",Improve the error message when the clang-format isn't correct,"A couple of times I've seen this error after using `hg rebase` or `hg backout`:

```
Processing 1 file(s)...
YAML:28:19: error: unknown key 'StatementMacros'
StatementMacros: [MARKUPMAP, ASSERT_TRUE, ASSERT_FALSE, TEST, CHECK]
                  ^
Error reading /home/keeler/mozilla-unified/.clang-format: Invalid argument
The error occurred in the implementation of the invoked mach command.

This should never occur and is likely a bug in the implementation of that
command. Consider filing a bug for this issue.

If filing a bug, please include the full output of mach, including this error
message.

The details of the failure are as follows:

AssertionError

  File ""/home/keeler/mozilla-unified/python/mach/mach/main.py"", line 524, in _run
    **vars(args.command_args))
  File ""/home/keeler/mozilla-unified/python/mach/mach/registrar.py"", line 101, in _run_command_handler
    assert isinstance(result, (int, long))
```"
7e7affa995d31d0325c26d7a9994971e7682f3a0,2020-07-16T12:23:00+00:00,"diff -r e7c3a3369339 -r 2b0ece669e73 dom/security/nsCSPContext.cpp
--- a/dom/security/nsCSPContext.cpp	Tue Jul 16 13:40:43 2019 +0000
+++ b/dom/security/nsCSPContext.cpp	Tue Jul 16 13:25:05 2019 +0000
@@ -549,13 +549,16 @@
       }
     }
 
-    if (content.IsEmpty()) {
-      content = aContentOfPseudoScript;
+    // Check if the csp-hash matches against the hash of the script or
+    // pseudoscript. If we can't get any content to check, block the script.
+    if (!content.IsEmpty() || !aContentOfPseudoScript.IsEmpty()) {
+      if (content.IsEmpty()) {
+        content = aContentOfPseudoScript;
+      }
+      allowed =
+          mPolicies[i]->allows(aContentType, CSP_HASH, content, aParserCreated);
     }
 
-    allowed =
-        mPolicies[i]->allows(aContentType, CSP_HASH, content, aParserCreated);
-
     if (!allowed) {
       // policy is violoated: deny the load unless policy is report only and
       // report the violation.
diff -r e7c3a3369339 -r 2b0ece669e73 dom/security/test/csp/file_bug1452037.html
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/dom/security/test/csp/file_bug1452037.html	Tue Jul 16 13:25:05 2019 +0000
@@ -0,0 +1,9 @@
+<html>
+<head>
+  <meta charset=""utf-8"">
+  <meta http-equiv=""Content-Security-Policy"" content=""script-src 'sha256-47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU='"">
+</head>
+<body>
+  <a href=""javascript:window.parent.postMessage({}, '*');"">Click here</a>
+</body>
+</html>
diff -r e7c3a3369339 -r 2b0ece669e73 dom/security/test/csp/mochitest.ini
--- a/dom/security/test/csp/mochitest.ini	Tue Jul 16 13:40:43 2019 +0000
+++ b/dom/security/test/csp/mochitest.ini	Tue Jul 16 13:25:05 2019 +0000
@@ -86,6 +86,7 @@
   file_bug1312272.html
   file_bug1312272.js
   file_bug1312272.html^headers^
+  file_bug1452037.html
   file_policyuri_regression_from_multipolicy.html
   file_policyuri_regression_from_multipolicy.html^headers^
   file_policyuri_regression_from_multipolicy_policy
@@ -239,7 +240,7 @@
 [test_blob_data_schemes.html]
 [test_connect-src.html]
 [test_CSP.html]
-[test_bug1388015.html]
+[test_bug1452037.html]
 [test_allow_https_schemes.html]
 [test_bug663567.html]
 [test_bug802872.html]
diff -r e7c3a3369339 -r 2b0ece669e73 dom/security/test/csp/test_bug1452037.html
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/dom/security/test/csp/test_bug1452037.html	Tue Jul 16 13:25:05 2019 +0000
@@ -0,0 +1,40 @@
+<!DOCTYPE HTML>
+<html>
+<head>
+  <title>Test if ""script-src: sha-... "" Whitelists ""javascript:"" URIs</title>
+  <!-- Including SimpleTest.js so we can use waitForExplicitFinish !-->
+  <script src=""/tests/SimpleTest/SimpleTest.js""></script>
+  <link rel=""stylesheet"" type=""text/css"" href=""/tests/SimpleTest/test.css"" />
+</head>
+<body>
+    <iframe src=""file_bug1452037.html""></iframe>
+
+<script class=""testbody"">
+    SimpleTest.requestCompleteLog();
+    SimpleTest.waitForExplicitFinish();
+
+    let frame = document.querySelector(""iframe"");
+    
+    window.addEventListener(""message"", (msg)=>{
+        ok(false, ""The CSP did not block javascript:uri"");
+          SimpleTest.finish();
+    }, false);
+
+    document.addEventListener(""securitypolicyviolation"",()=>{
+        ok(true, ""The CSP did block javascript:uri"");
+        SimpleTest.finish();
+    });
+    
+    frame.addEventListener(""load"",()=>{
+    let link = frame.contentWindow.document.querySelector(""a"");
+    frame.contentWindow.document.addEventListener(""securitypolicyviolation"",()=>{
+        ok(true, ""The CSP did block javascript:uri"");
+        SimpleTest.finish();
+    })
+    link.click();
+    })
+
+
+</script>
+</body>
+</html>
","diff -r 15f69af9b5b9 -r 7e7affa995d3 dom/jsurl/nsJSProtocolHandler.cpp
--- a/dom/jsurl/nsJSProtocolHandler.cpp	Thu Jul 16 11:48:07 2020 +0000
+++ b/dom/jsurl/nsJSProtocolHandler.cpp	Thu Jul 16 12:23:08 2020 +0000
@@ -127,7 +127,8 @@
   return global;
 }
 
-static bool AllowedByCSP(nsIContentSecurityPolicy* aCSP) {
+static bool AllowedByCSP(nsIContentSecurityPolicy* aCSP,
+                         const nsAString& aContentOfPseudoScript) {
   if (!aCSP) {
     return true;
   }
@@ -138,9 +139,9 @@
                                       true,           // aParserCreated
                                       nullptr,        // aElement,
                                       nullptr,        // nsICSPEventListener
-                                      EmptyString(),  // aContent
-                                      0,              // aLineNumber
-                                      0,              // aColumnNumber
+                                      aContentOfPseudoScript,  // aContent
+                                      0,                       // aLineNumber
+                                      0,                       // aColumnNumber
                                       &allowsInlineScript);
 
   return (NS_SUCCEEDED(rv) && allowsInlineScript);
@@ -201,7 +202,12 @@
   // target document.  The target document check is performed below,
   // once we have determined the target document.
   nsCOMPtr<nsIContentSecurityPolicy> csp = loadInfo->GetCspToInherit();
-  if (!AllowedByCSP(csp)) {
+
+  nsAutoCString script(mScript);
+  // Unescape the script
+  NS_UnescapeURL(script);
+
+  if (!AllowedByCSP(csp, NS_ConvertASCIItoUTF16(script))) {
     return NS_ERROR_DOM_RETVAL_UNDEFINED;
   }
 
@@ -245,7 +251,7 @@
     // against if the triggering principal is system.
     if (targetDoc->NodePrincipal()->Subsumes(loadInfo->TriggeringPrincipal())) {
       nsCOMPtr<nsIContentSecurityPolicy> targetCSP = targetDoc->GetCsp();
-      if (!AllowedByCSP(targetCSP)) {
+      if (!AllowedByCSP(targetCSP, NS_ConvertASCIItoUTF16(script))) {
         return NS_ERROR_DOM_RETVAL_UNDEFINED;
       }
     }
@@ -260,10 +266,6 @@
   nsCOMPtr<nsIScriptContext> scriptContext = global->GetContext();
   if (!scriptContext) return NS_ERROR_FAILURE;
 
-  nsAutoCString script(mScript);
-  // Unescape the script
-  NS_UnescapeURL(script);
-
   // New script entry point required, due to the ""Create a script"" step of
   // http://www.whatwg.org/specs/web-apps/current-work/#javascript-protocol
   mozilla::nsAutoMicroTask mt;
diff -r 15f69af9b5b9 -r 7e7affa995d3 dom/security/nsCSPContext.cpp
--- a/dom/security/nsCSPContext.cpp	Thu Jul 16 11:48:07 2020 +0000
+++ b/dom/security/nsCSPContext.cpp	Thu Jul 16 12:23:08 2020 +0000
@@ -565,15 +565,11 @@
       }
     }
 
-    // Check if the csp-hash matches against the hash of the script or
-    // pseudoscript. If we can't get any content to check, block the script.
-    if (!content.IsEmpty() || !aContentOfPseudoScript.IsEmpty()) {
-      if (content.IsEmpty()) {
-        content = aContentOfPseudoScript;
-      }
-      allowed =
-          mPolicies[i]->allows(aContentType, CSP_HASH, content, aParserCreated);
+    if (content.IsEmpty()) {
+      content = aContentOfPseudoScript;
     }
+    allowed =
+        mPolicies[i]->allows(aContentType, CSP_HASH, content, aParserCreated);
 
     if (!allowed) {
       // policy is violoated: deny the load unless policy is report only and
diff -r 15f69af9b5b9 -r 7e7affa995d3 dom/security/test/csp/mochitest.ini
--- a/dom/security/test/csp/mochitest.ini	Thu Jul 16 11:48:07 2020 +0000
+++ b/dom/security/test/csp/mochitest.ini	Thu Jul 16 12:23:08 2020 +0000
@@ -431,3 +431,4 @@
   file_upgrade_insecure_navigation_redirect.sjs
   file_upgrade_insecure_navigation_redirect_same_origin.html
   file_upgrade_insecure_navigation_redirect_cross_origin.html
+[test_csp_style_src_empty_hash.html]
diff -r 15f69af9b5b9 -r 7e7affa995d3 dom/security/test/csp/test_csp_style_src_empty_hash.html
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/dom/security/test/csp/test_csp_style_src_empty_hash.html	Thu Jul 16 12:23:08 2020 +0000
@@ -0,0 +1,32 @@
+<!DOCTYPE HTML>
+<html>
+<head>
+  <title>Bug 1609122 - Empty Style Element with valid style-src hash </title>
+  <!-- Including SimpleTest.js so we can use waitForExplicitFinish !-->
+  <script src=""/tests/SimpleTest/SimpleTest.js""></script>
+  
+  <meta http-equiv=""Content-Security-Policy"" content=""style-src 'sha256-47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=';"">
+</head>
+<body>
+<iframe style=""width:100%;"" id=""testframe""></iframe>
+
+<script class=""testbody"" type=""text/javascript"">
+
+SimpleTest.waitForExplicitFinish();
+
+/* Description of the test:
+ * We try to load a stylesheet that is empty with a matching hash
+ * sha256-47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=' should match """"
+ * thus allow the style to be accessed
+ */
+
+
+var s = document.head.appendChild(document.createElement(""style""));
+s.disabled = true;
+
+is(s.disabled, true, ""Empty Stylesheet with matching Hash was not blocked"");
+SimpleTest.finish();
+
+</script>
+</body>
+</html>
",1452037,2b0ece669e73c2ac0574510d68e10366f0630f27,"Bug 1452037 - Fix Whitelisting of javascript-uris with csp hash r=ckerschb

Differential Revision: https://phabricator.services.mozilla.com/D35412",1544705,"Bug 1544705 - Re-Allow empty content for CSP-hashing r=ckerschb

Differential Revision: https://phabricator.services.mozilla.com/D83533",2019-07-16T13:25:00+00:00,script-src 'sha256-47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=' security policy will whitelist all javascript: URIs,"Created attachment 8965617
Proof of concept page

Note: This is likely related to bug 1314567 which I cannot access.

As implemented right now, execution of any javascript: URIs can be allowed using a hash-based source that takes the empty string as input. For example, script-src 'sha256-47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=' is supposed to allow empty <script> tags only but will enable arbitrary javascript: URIs as well. So specifying a source like this weakens CSP protection considerably which is not obvious.

You can reproduce by opening the attached proof of concept page and clicking the link. In Chrome 65 this doesn't do anything, the javascript: URI is blocked by CSP. In Firefox 59.0.2 and Firefox 61.0a1 (2018-04-04) nightly on the other hand the code executes and shows a message saying ""clicked.""

IMHO the issue is the code here:

> https://dxr.mozilla.org/mozilla-central/rev/2f5ffe4fa2153a798ed8b310a597ea92abd1b868/dom/security/nsCSPContext.cpp#582

If aElementOrContent is neither a string nor an element (nullptr in this case) this code will leave content variable uninitialized (empty) but perform matching hash sources nevertheless.

I can see two ways how this can have a security impact:

1) A website might specify this script source assuming that it is innocuous (an empty script cannot do any harm). Not sure whether any real-world websites actually do this.

2) WebExtensions aren't allowed to specify unsafe-inline in their CSP for security reasons, meaning in particular that they aren't allowed to use javascript: URIs. This issue allows weakening the CSP protection nevertheless.",CSP check for inline <style> elements depends on stylesheet contents.,"User Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36

Steps to reproduce:

Tested on Firefox Developer Edition v67.0b10 x64.

1. Load the unpacked extension: https://github.com/eight04/webextension-test/tree/ff-style-disabled
2. Go to http://example.com/
3. Press F12 to open the console, take a screenshot.
4. Go to https://pypi.org/project/utilsuneed/
5. Press F12 to open the console, take a screenshot.



Actual results:

On example.com, you get:
```
false
true
true
```
On pypi, you get:
```
false
false
true
```


Expected results:

On Chrome, the result is always:
```
false
true
true
```"
a3acb30248ff81e6a0a10a61783fa25896e23e21,2019-04-17T19:10:00+00:00,"diff -r 3239894a7402 -r db20a3f4324e storage/mozStorageConnection.cpp
--- a/storage/mozStorageConnection.cpp	Tue Apr 02 17:49:49 2019 +0000
+++ b/storage/mozStorageConnection.cpp	Tue Apr 02 18:49:21 2019 +0000
@@ -563,7 +563,7 @@
 
 int32_t Connection::getSqliteRuntimeStatus(int32_t aStatusOption,
                                            int32_t *aMaxValue) {
-  MOZ_ASSERT(mDBConn, ""A connection must exist at this point"");
+  MOZ_ASSERT(connectionReady(), ""A connection must exist at this point"");
   int curr = 0, max = 0;
   DebugOnly<int> rc =
       ::sqlite3_db_status(mDBConn, aStatusOption, &curr, &max, 0);
@@ -595,7 +595,8 @@
 }
 
 nsresult Connection::initialize() {
-  NS_ASSERTION(!mDBConn, ""Initialize called on already opened database!"");
+  NS_ASSERTION(!connectionReady(),
+               ""Initialize called on already opened database!"");
   MOZ_ASSERT(!mIgnoreLockingMode, ""Can't ignore locking on an in-memory db."");
   AUTO_PROFILER_LABEL(""Connection::initialize"", OTHER);
 
@@ -624,7 +625,8 @@
 
 nsresult Connection::initialize(nsIFile *aDatabaseFile) {
   NS_ASSERTION(aDatabaseFile, ""Passed null file!"");
-  NS_ASSERTION(!mDBConn, ""Initialize called on already opened database!"");
+  NS_ASSERTION(!connectionReady(),
+               ""Initialize called on already opened database!"");
   AUTO_PROFILER_LABEL(""Connection::initialize"", OTHER);
 
   mDatabaseFile = aDatabaseFile;
@@ -666,7 +668,8 @@
 
 nsresult Connection::initialize(nsIFileURL *aFileURL) {
   NS_ASSERTION(aFileURL, ""Passed null file URL!"");
-  NS_ASSERTION(!mDBConn, ""Initialize called on already opened database!"");
+  NS_ASSERTION(!connectionReady(),
+               ""Initialize called on already opened database!"");
   AUTO_PROFILER_LABEL(""Connection::initialize"", OTHER);
 
   nsCOMPtr<nsIFile> databaseFile;
@@ -826,7 +829,10 @@
 nsresult Connection::databaseElementExists(
     enum DatabaseElementType aElementType, const nsACString &aElementName,
     bool *_exists) {
-  nsresult rv = connectionReady(SYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_AVAILABLE;
+  }
+  nsresult rv = ensureOperationSupported(SYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -933,25 +939,27 @@
   return NS_OK;
 }
 
-nsresult Connection::connectionReady(ConnectionOperation aOperation) {
-  if (NS_WARN_IF(aOperation == SYNCHRONOUS &&
+bool Connection::operationSupported(ConnectionOperation aOperationType) {
+  if (NS_WARN_IF(aOperationType == SYNCHRONOUS &&
                  mSupportedOperations == ASYNCHRONOUS && NS_IsMainThread())) {
-    MOZ_ASSERT(false,
-               ""Don't use async connections synchronously on the main thread"");
-    return NS_ERROR_NOT_AVAILABLE;
+    return false;
   }
-  if (!mDBConn) {
-    return NS_ERROR_NOT_INITIALIZED;
-  }
-  return NS_OK;
+  return true;
+}
+
+nsresult Connection::ensureOperationSupported(
+    ConnectionOperation aOperationType) {
+  MOZ_ASSERT(operationSupported(aOperationType),
+             ""Don't use async connections synchronously on the main thread"");
+  return operationSupported(aOperationType) ? NS_OK : NS_ERROR_NOT_AVAILABLE;
 }
 
 bool Connection::isConnectionReadyOnThisThread() {
-  MOZ_ASSERT_IF(mDBConn, !mConnectionClosed);
+  MOZ_ASSERT_IF(connectionReady(), !mConnectionClosed);
   if (mAsyncExecutionThread && mAsyncExecutionThread->IsOnCurrentThread()) {
     return true;
   }
-  return mDBConn != nullptr;
+  return connectionReady();
 }
 
 bool Connection::isClosing() {
@@ -1228,7 +1236,7 @@
 
 NS_IMETHODIMP
 Connection::Close() {
-  nsresult rv = connectionReady(SYNCHRONOUS);
+  nsresult rv = ensureOperationSupported(SYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -1236,7 +1244,7 @@
 }
 
 nsresult Connection::synchronousClose() {
-  if (!mDBConn) {
+  if (!connectionReady()) {
     return NS_ERROR_NOT_INITIALIZED;
   }
 
@@ -1279,6 +1287,10 @@
 
 NS_IMETHODIMP
 Connection::SpinningSynchronousClose() {
+  nsresult rv = ensureOperationSupported(SYNCHRONOUS);
+  if (NS_FAILED(rv)) {
+    return rv;
+  }
   if (threadOpenedOn != NS_GetCurrentThread()) {
     return NS_ERROR_NOT_SAME_THREAD;
   }
@@ -1286,9 +1298,8 @@
   // As currently implemented, we can't spin to wait for an existing AsyncClose.
   // Our only existing caller will never have called close; assert if misused
   // so that no new callers assume this works after an AsyncClose.
-  nsresult rv = connectionReady(SYNCHRONOUS);
-  MOZ_DIAGNOSTIC_ASSERT(NS_SUCCEEDED(rv));
-  if (NS_FAILED(rv)) {
+  MOZ_DIAGNOSTIC_ASSERT(connectionReady());
+  if (!connectionReady()) {
     return NS_ERROR_UNEXPECTED;
   }
 
@@ -1305,7 +1316,10 @@
 Connection::AsyncClose(mozIStorageCompletionCallback *aCallback) {
   NS_ENSURE_TRUE(NS_IsMainThread(), NS_ERROR_NOT_SAME_THREAD);
   // Check if AsyncClose or Close were already invoked.
-  nsresult rv = connectionReady(ASYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(ASYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -1407,7 +1421,10 @@
   AUTO_PROFILER_LABEL(""Connection::AsyncClone"", OTHER);
 
   NS_ENSURE_TRUE(NS_IsMainThread(), NS_ERROR_NOT_SAME_THREAD);
-  nsresult rv = connectionReady(ASYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(ASYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -1587,7 +1604,10 @@
 
   AUTO_PROFILER_LABEL(""Connection::Clone"", OTHER);
 
-  nsresult rv = connectionReady(SYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(SYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -1616,10 +1636,12 @@
 NS_IMETHODIMP
 Connection::Interrupt() {
   MOZ_ASSERT(threadOpenedOn == NS_GetCurrentThread());
-  if (!mDBConn) {
+  if (!connectionReady()) {
     return NS_ERROR_NOT_INITIALIZED;
   }
-  if (mSupportedOperations == SYNCHRONOUS || !(mFlags & SQLITE_OPEN_READONLY)) {
+  if (operationSupported(SYNCHRONOUS) || !(mFlags & SQLITE_OPEN_READONLY)) {
+    // Interrupting a synchronous connection from the same thread doesn't make
+    // sense, and read-write connections aren't safe to interrupt.
     return NS_ERROR_INVALID_ARG;
   }
   ::sqlite3_interrupt(mDBConn);
@@ -1635,13 +1657,16 @@
 NS_IMETHODIMP
 Connection::GetConnectionReady(bool *_ready) {
   MOZ_ASSERT(threadOpenedOn == NS_GetCurrentThread());
-  *_ready = !!mDBConn;
+  *_ready = connectionReady();
   return NS_OK;
 }
 
 NS_IMETHODIMP
 Connection::GetDatabaseFile(nsIFile **_dbFile) {
-  nsresult rv = connectionReady(ASYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(ASYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -1653,7 +1678,10 @@
 
 NS_IMETHODIMP
 Connection::GetLastInsertRowID(int64_t *_id) {
-  nsresult rv = connectionReady(SYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(SYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -1666,7 +1694,10 @@
 
 NS_IMETHODIMP
 Connection::GetAffectedRows(int32_t *_rows) {
-  nsresult rv = connectionReady(SYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(SYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -1678,7 +1709,10 @@
 
 NS_IMETHODIMP
 Connection::GetLastError(int32_t *_error) {
-  nsresult rv = connectionReady(SYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(SYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -1690,7 +1724,10 @@
 
 NS_IMETHODIMP
 Connection::GetLastErrorString(nsACString &_errorString) {
-  nsresult rv = connectionReady(SYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(SYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -1703,7 +1740,10 @@
 
 NS_IMETHODIMP
 Connection::GetSchemaVersion(int32_t *_version) {
-  nsresult rv = connectionReady(SYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(SYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -1723,7 +1763,10 @@
 
 NS_IMETHODIMP
 Connection::SetSchemaVersion(int32_t aVersion) {
-  nsresult rv = connectionReady(SYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(SYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -1738,7 +1781,10 @@
 Connection::CreateStatement(const nsACString &aSQLStatement,
                             mozIStorageStatement **_stmt) {
   NS_ENSURE_ARG_POINTER(_stmt);
-  nsresult rv = connectionReady(SYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(SYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -1759,7 +1805,10 @@
 Connection::CreateAsyncStatement(const nsACString &aSQLStatement,
                                  mozIStorageAsyncStatement **_stmt) {
   NS_ENSURE_ARG_POINTER(_stmt);
-  nsresult rv = connectionReady(ASYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(ASYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -1779,7 +1828,10 @@
 NS_IMETHODIMP
 Connection::ExecuteSimpleSQL(const nsACString &aSQLStatement) {
   CHECK_MAINTHREAD_ABUSE();
-  nsresult rv = connectionReady(SYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(SYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -1849,7 +1901,10 @@
 
 NS_IMETHODIMP
 Connection::GetTransactionInProgress(bool *_inProgress) {
-  nsresult rv = connectionReady(SYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(SYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -1874,7 +1929,10 @@
 
 NS_IMETHODIMP
 Connection::BeginTransaction() {
-  nsresult rv = connectionReady(SYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(SYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -1906,7 +1964,10 @@
 
 NS_IMETHODIMP
 Connection::CommitTransaction() {
-  nsresult rv = connectionReady(SYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(SYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -1925,7 +1986,10 @@
 
 NS_IMETHODIMP
 Connection::RollbackTransaction() {
-  nsresult rv = connectionReady(SYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(SYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -1945,7 +2009,10 @@
 
 NS_IMETHODIMP
 Connection::CreateTable(const char *aTableName, const char *aTableSchema) {
-  nsresult rv = connectionReady(SYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(SYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -1963,7 +2030,10 @@
 Connection::CreateFunction(const nsACString &aFunctionName,
                            int32_t aNumArguments,
                            mozIStorageFunction *aFunction) {
-  nsresult rv = connectionReady(ASYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(ASYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -1989,7 +2059,10 @@
 Connection::CreateAggregateFunction(const nsACString &aFunctionName,
                                     int32_t aNumArguments,
                                     mozIStorageAggregateFunction *aFunction) {
-  nsresult rv = connectionReady(ASYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(ASYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -2018,7 +2091,10 @@
 
 NS_IMETHODIMP
 Connection::RemoveFunction(const nsACString &aFunctionName) {
-  nsresult rv = connectionReady(ASYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(ASYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -2040,7 +2116,10 @@
 Connection::SetProgressHandler(int32_t aGranularity,
                                mozIStorageProgressHandler *aHandler,
                                mozIStorageProgressHandler **_oldHandler) {
-  nsresult rv = connectionReady(ASYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(ASYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -2061,7 +2140,13 @@
 
 NS_IMETHODIMP
 Connection::RemoveProgressHandler(mozIStorageProgressHandler **_oldHandler) {
-  if (!mDBConn) return NS_ERROR_NOT_INITIALIZED;
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(ASYNCHRONOUS);
+  if (NS_FAILED(rv)) {
+    return rv;
+  }
 
   // Return previous one
   SQLiteMutexAutoLock lockedScope(sharedDBMutex);
@@ -2076,10 +2161,14 @@
 NS_IMETHODIMP
 Connection::SetGrowthIncrement(int32_t aChunkSize,
                                const nsACString &aDatabaseName) {
-  nsresult rv = connectionReady(SYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(SYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
+
   // Bug 597215: Disk space is extremely limited on Android
   // so don't preallocate space. This is also not effective
   // on log structured file systems used by Android devices
@@ -2103,7 +2192,10 @@
 
 NS_IMETHODIMP
 Connection::EnableModule(const nsACString &aModuleName) {
-  nsresult rv = connectionReady(SYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(SYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -2130,7 +2222,10 @@
   MOZ_ASSERT(aDatabaseQuotaObject);
   MOZ_ASSERT(aJournalQuotaObject);
 
-  nsresult rv = connectionReady(SYNCHRONOUS);
+  if (!connectionReady()) {
+    return NS_ERROR_NOT_INITIALIZED;
+  }
+  nsresult rv = ensureOperationSupported(SYNCHRONOUS);
   if (NS_FAILED(rv)) {
     return rv;
   }
diff -r 3239894a7402 -r db20a3f4324e storage/mozStorageConnection.h
--- a/storage/mozStorageConnection.h	Tue Apr 02 17:49:49 2019 +0000
+++ b/storage/mozStorageConnection.h	Tue Apr 02 18:49:21 2019 +0000
@@ -236,16 +236,18 @@
   nsresult rollbackTransactionInternal(sqlite3 *aNativeConnection);
 
   /**
-   * Indicates if this database connection is ready and supports the given
-   * operation.
+   * Indicates if this database connection is open.
+   */
+  inline bool connectionReady() { return mDBConn != nullptr; }
+
+  /**
+   * Indicates if this database connection supports the given operation.
    *
    * @param  aOperationType
    *         The operation type, sync or async.
-   * @throws NS_ERROR_NOT_AVAILABLE if the operation isn't supported on this
-   *         connection.
-   * @throws NS_ERROR_NOT_INITIALIZED if the connection isn't set up.
+   * @return `true` if the operation is supported, `false` otherwise.
    */
-  nsresult connectionReady(ConnectionOperation aOperationType);
+  bool operationSupported(ConnectionOperation aOperationType);
 
   /**
    * Thread-aware version of connectionReady, results per caller's thread are:
@@ -346,6 +348,12 @@
   // if there is one. Do nothing in other cases.
   int progressHandler();
 
+  /**
+   * Like `operationSupported`, but throws (and, in a debug build, asserts) if
+   * the operation is unsupported.
+   */
+  nsresult ensureOperationSupported(ConnectionOperation aOperationType);
+
   sqlite3 *mDBConn;
   nsCOMPtr<nsIFileURL> mFileURL;
   nsCOMPtr<nsIFile> mDatabaseFile;
diff -r 3239894a7402 -r db20a3f4324e storage/mozStorageService.cpp
--- a/storage/mozStorageService.cpp	Tue Apr 02 17:49:49 2019 +0000
+++ b/storage/mozStorageService.cpp	Tue Apr 02 18:49:21 2019 +0000
@@ -119,8 +119,7 @@
       // main-thread, like the DOM Cache and IndexedDB, and as such we must be
       // sure that we have a connection.
       MutexAutoLock lockedAsyncScope(conn->sharedAsyncExecutionMutex);
-      nsresult rv = conn->connectionReady(Connection::ASYNCHRONOUS);
-      if (NS_FAILED(rv)) {
+      if (!conn->connectionReady()) {
         continue;
       }
 
@@ -304,17 +303,14 @@
     RefPtr<Connection> conn = connections[i];
     // For non-main-thread owning/opening threads, we may be racing against them
     // closing their connection or their thread.  That's okay, see below.
-    nsresult rv = conn->connectionReady(Connection::ASYNCHRONOUS);
-    if (NS_FAILED(rv)) {
+    if (!conn->connectionReady()) {
       continue;
     }
 
     NS_NAMED_LITERAL_CSTRING(shrinkPragma, ""PRAGMA shrink_memory"");
-    nsCOMPtr<mozIStorageConnection> syncConn = do_QueryInterface(
-        NS_ISUPPORTS_CAST(mozIStorageAsyncConnection *, conn));
     bool onOpenedThread = false;
 
-    if (!syncConn) {
+    if (!conn->operationSupported(Connection::SYNCHRONOUS)) {
       // This is a mozIStorageAsyncConnection, it can only be used on the main
       // thread, so we can do a straight API call.
       nsCOMPtr<mozIStoragePendingStatement> ps;
diff -r 3239894a7402 -r db20a3f4324e storage/test/unit/test_minimizeMemory.js
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/storage/test/unit/test_minimizeMemory.js	Tue Apr 02 18:49:21 2019 +0000
@@ -0,0 +1,22 @@
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+
+// This file tests that invoking `Service::minimizeMemory` succeeds for sync
+// and async connections.
+
+function minimizeMemory() {
+  Services.storage.QueryInterface(Ci.nsIObserver)
+                  .observe(null, ""memory-pressure"", null);
+}
+
+add_task(async function test_minimizeMemory_async_connection() {
+  let db = await openAsyncDatabase(getTestDB());
+  minimizeMemory();
+  await asyncClose(db);
+});
+
+add_task(async function test_minimizeMemory_sync_connection() {
+  let db = getOpenedDatabase();
+  minimizeMemory();
+  db.close();
+});
diff -r 3239894a7402 -r db20a3f4324e storage/test/unit/xpcshell.ini
--- a/storage/test/unit/xpcshell.ini	Tue Apr 02 17:49:49 2019 +0000
+++ b/storage/test/unit/xpcshell.ini	Tue Apr 02 18:49:21 2019 +0000
@@ -29,6 +29,7 @@
 [test_like.js]
 [test_like_escape.js]
 [test_locale_collation.js]
+[test_minimizeMemory.js]
 [test_page_size_is_32k.js]
 [test_sqlite_secure_delete.js]
 [test_statement_executeAsync.js]
","diff -r a51a461f3df3 -r a3acb30248ff storage/mozStorageConnection.cpp
--- a/storage/mozStorageConnection.cpp	Wed Apr 17 23:54:44 2019 +0000
+++ b/storage/mozStorageConnection.cpp	Wed Apr 17 19:10:28 2019 +0000
@@ -941,18 +941,30 @@
 }
 
 bool Connection::operationSupported(ConnectionOperation aOperationType) {
-  if (NS_WARN_IF(aOperationType == SYNCHRONOUS &&
-                 mSupportedOperations == ASYNCHRONOUS && NS_IsMainThread())) {
-    return false;
+  if (aOperationType == ASYNCHRONOUS) {
+    // Async operations are supported for all connections, on any thread.
+    return true;
   }
-  return true;
+  // Sync operations are supported for sync connections (on any thread), and
+  // async connections on a background thread.
+  MOZ_ASSERT(aOperationType == SYNCHRONOUS);
+  return mSupportedOperations == SYNCHRONOUS || !NS_IsMainThread();
 }
 
 nsresult Connection::ensureOperationSupported(
     ConnectionOperation aOperationType) {
-  MOZ_ASSERT(operationSupported(aOperationType),
-             ""Don't use async connections synchronously on the main thread"");
-  return operationSupported(aOperationType) ? NS_OK : NS_ERROR_NOT_AVAILABLE;
+  if (NS_WARN_IF(!operationSupported(aOperationType))) {
+#ifdef DEBUG
+    if (NS_IsMainThread()) {
+      nsCOMPtr<nsIXPConnect> xpc = nsIXPConnect::XPConnect();
+      Unused << xpc->DebugDumpJSStack(false, false, false);
+    }
+#endif
+    MOZ_ASSERT(false,
+               ""Don't use async connections synchronously on the main thread"");
+    return NS_ERROR_NOT_AVAILABLE;
+  }
+  return NS_OK;
 }
 
 bool Connection::isConnectionReadyOnThisThread() {
",1539104,db20a3f4324ec9fc29bb21bda77672e7e7640529,"Bug 1539104 - Add a way to detect supported storage connection operations. r=mak

In retrospect, overloading `Connection::connectionReady` to mean
""is ready _and_ supports this operation"" wasn't a good idea. This
commit reverts that change (cfd44c936a9b), and adds two new methods:

* `Connection::operationSupported`, to check if a connection supports
  sync or async operations. This method is public.
* `Connection::ensureOperationSupported`, that asserts or returns an
  error if the connection doesn't support an operation. This is
  private.

`operationSupported` is used by callers like `Service::minimizeMemory`
to detect if the connection supports sync operations, since both sync
and async connections implement `mozIStorageConnection` now.

Finally, some callers used `!mDBConn` to check if the connection was
ready, while others used `connectionReady()`. This commit changes them
to use the latter.

Differential Revision: https://phabricator.services.mozilla.com/D24974",1545200,"Bug 1545200 - Squelch spurious synchronous operation warnings in `Connection::operationSupported`. r=mak

Differential Revision: https://phabricator.services.mozilla.com/D27959",2019-04-02T18:49:00+00:00,"Intermittent GECKO(849) | Assertion failure: false (Don't use async connections synchronously on the main thread), at /builds/worker/workspace/build/src/storage/mozStorageConnection.cpp:940","#[markdown(off)]
Filed by: ncsoregi [at] mozilla.com

https://treeherder.mozilla.org/logviewer.html#?job_id=236060117&repo=mozilla-inbound

https://queue.taskcluster.net/v1/task/Z6-xagsmQUOgkG5rAOi6QA/runs/0/artifacts/public/logs/live_backing.log

08:27:02     INFO - TEST-OK | browser/components/enterprisepolicies/tests/browser/disable_default_bookmarks/browser_policy_no_default_bookmarks.js | took 64ms
08:27:02     INFO - GECKO(849) | ### XPCOM_MEM_BLOAT_LOG defined -- logging bloat/leaks to /var/folders/qb/nc1k_bf97hzdn4_8gyj23zpr00000x/T/tmpCAEAt2.mozrunner/runtests_leaks_tab_pid854.log
08:27:02     INFO - GECKO(849) | ++DOMWINDOW == 3 (0x1249ce800) [pid = 853] [serial = 3] [outer = 0x124931020]
08:27:02     INFO - checking window state
08:27:02     INFO - GECKO(849) | ++DOMWINDOW == 12 (0x13094d800) [pid = 849] [serial = 12] [outer = 0x1222bfa60]
08:27:02     INFO - Console message: [JavaScript Error: ""TypeError: reply[0] is undefined"" {file: ""chrome://marionette/content/listener.js"" line: 453}]
08:27:02     INFO - GECKO(849) | ++DOMWINDOW == 13 (0x134c5c400) [pid = 849] [serial = 13] [outer = 0x1222bfa60]
08:27:02     INFO - GECKO(849) | [Parent 849, Main Thread] WARNING: 'aOperation == SYNCHRONOUS && mSupportedOperations == ASYNCHRONOUS && NS_IsMainThread()', file /builds/worker/workspace/build/src/storage/mozStorageConnection.cpp, line 938
08:27:02     INFO - GECKO(849) | Assertion failure: false (Don't use async connections synchronously on the main thread), at /builds/worker/workspace/build/src/storage/mozStorageConnection.cpp:940
08:28:33     INFO - GECKO(849) | #01: mozilla::storage::Service::minimizeMemory() [xpcom/base/nsCOMPtr.h:439]
08:28:33     INFO - 
08:28:33     INFO - GECKO(849) | #02: mozilla::storage::Service::Observe(nsISupports*, char const*, char16_t const*) [storage/mozStorageService.cpp:0]
08:28:33     INFO - 
08:28:33     INFO - GECKO(849) | #03: non-virtual thunk to mozilla::storage::Service::Observe(nsISupports*, char const*, char16_t const*) [storage/mozStorageService.cpp:0]
08:28:33     INFO - 
08:28:33     INFO - GECKO(849) | #04: nsObserverList::NotifyObservers(nsISupports*, char const*, char16_t const*) [xpcom/ds/nsObserverList.cpp:65]
08:28:33     INFO - 
08:28:33     INFO - GECKO(849) | #05: nsObserverService::NotifyObservers(nsISupports*, char const*, char16_t const*) [mozglue/misc/TimeStamp.h:452]
08:28:33     INFO - 
08:28:33     INFO - GECKO(849) | --DOMWINDOW == 3 (0x1143a7000) [pid = 851] [serial = 2] [outer = 0x0] [url = about:blank]
08:28:33     INFO - GECKO(849) | Exiting due to channel error.
08:28:33     INFO - GECKO(849) | Exiting due to channel error.
08:28:33     INFO - GECKO(849) | Exiting due to channel error.
08:28:33     INFO - GECKO(849) | Exiting due to channel error.
08:28:33     INFO - GECKO(849) | Exiting due to channel error.
08:28:33     INFO - TEST-INFO | Main app process: exit 1
08:28:33    ERROR - TEST-UNEXPECTED-FAIL | ShutdownLeaks | process() called before end of test suite
08:28:33     INFO - Buffered messages finished
08:28:33    ERROR - TEST-UNEXPECTED-FAIL | Last test finished | application terminated with exit code 1",Squelch spurious synchronous operation warnings in `Connection::operationSupported`,"From Mak on IRC:

> I'm running toolkit/components/places/tests/unifiedcomplete/test_tab_matches.js
> lina I also see quite some WARNING: 'aOperationType == SYNCHRONOUS && mSupportedOperations == ASYNCHRONOUS && NS_IsMainThread())
> (don't have a stack atm)

This comes from `Connection::Interrupt`, which checks if the connection is synchronous. In this case, the warning is spurious—we _want_ to check if it's sync, and throw if you try to interrupt it.

I think we should move the warning into `ensureOperationSupported`, and dump the JS stack while we're at it."
ea7a5405334e2c55da08f92bc47c7983de261581,2020-11-27T22:32:00+00:00,"diff -r 8d39eba47c3c -r f026ead5dbfc browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js	Wed Mar 21 23:35:00 2018 +0100
+++ b/browser/app/profile/firefox.js	Wed Mar 21 23:35:00 2018 +0100
@@ -260,7 +260,12 @@
 pref(""browser.startup.firstrunSkipsHomepage"", true);
 
 // Show an about:blank window as early as possible for quick startup feedback.
+#ifdef XP_MACOSX
+// Disabled on Mac because the bouncing dock icon already provides feedback.
 pref(""browser.startup.blankWindow"", false);
+#else
+pref(""browser.startup.blankWindow"", true);
+#endif
 
 pref(""browser.slowStartup.notificationDisabled"", false);
 pref(""browser.slowStartup.timeThreshold"", 20000);
diff -r 8d39eba47c3c -r f026ead5dbfc browser/base/content/test/performance/browser_startup.js
--- a/browser/base/content/test/performance/browser_startup.js	Wed Mar 21 23:35:00 2018 +0100
+++ b/browser/base/content/test/performance/browser_startup.js	Wed Mar 21 23:35:00 2018 +0100
@@ -122,6 +122,10 @@
   }},
 };
 
+if (Services.prefs.getBoolPref(""browser.startup.blankWindow"")) {
+  startupPhases[""before profile selection""].whitelist.components.add(""XULStore.js"");
+}
+
 if (!gBrowser.selectedBrowser.isRemoteBrowser) {
   // With e10s disabled, Places and RecentWindow.jsm (from a
   // SessionSaver.jsm timer) intermittently get loaded earlier. Likely
","diff -r c1fa6c80a1a0 -r ea7a5405334e gfx/layers/d3d11/CompositorD3D11.cpp
--- a/gfx/layers/d3d11/CompositorD3D11.cpp	Fri Nov 27 14:47:30 2020 +0000
+++ b/gfx/layers/d3d11/CompositorD3D11.cpp	Fri Nov 27 22:32:05 2020 +0000
@@ -1425,7 +1425,7 @@
   mSwapChain->GetDesc(&desc);
 
   if (desc.BufferDesc.Width == size.width &&
-      desc.BufferDesc.Height == size.height) {
+      desc.BufferDesc.Height == size.height && size == mBufferSize) {
     mSwapChain->Present(0, 0);
     if (mIsDoubleBuffered) {
       // Make sure we present what was the front buffer before that we know is
@@ -1528,6 +1528,9 @@
     gfxCriticalNote << ""D3D11 swap resize buffers failed "" << hexa(hr) << "" on ""
                     << mSize;
     HandleError(hr);
+    mBufferSize = LayoutDeviceIntSize();
+  } else {
+    mBufferSize = mSize;
   }
 
   mBackBufferInvalid = mFrontBufferInvalid =
diff -r c1fa6c80a1a0 -r ea7a5405334e gfx/layers/d3d11/CompositorD3D11.h
--- a/gfx/layers/d3d11/CompositorD3D11.h	Fri Nov 27 14:47:30 2020 +0000
+++ b/gfx/layers/d3d11/CompositorD3D11.h	Fri Nov 27 22:32:05 2020 +0000
@@ -258,6 +258,10 @@
 
   LayoutDeviceIntSize mSize;
 
+  // The size that we passed to ResizeBuffers to set
+  // the swapchain buffer size.
+  LayoutDeviceIntSize mBufferSize;
+
   HWND mHwnd;
 
   D3D_FEATURE_LEVEL mFeatureLevel;
",1447719,f026ead5dbfce9d6530429ac568ecc5544cc9b3b,"Bug 1447719 - Set browser.startup.blankWindow to true on Windows and Linux, r=mconley.",1545313,"Bug 1545313 - Don't force present if we haven't resized the swap chain yet. r=jrmuizel

This matches the behaviour of MLGDevice

Depends on D98036

Differential Revision: https://phabricator.services.mozilla.com/D98091",2018-03-21T23:35:00+01:00,Set browser.startup.blankWindow to true on Windows and Linux,"We would like to start gathering nightly feedback on the code that landed in bug 1336227.

UX said we don't want this on Mac where the application windows typically appear all at once and where the bouncing dock icon already provides feedback that something is happening.",browser.startup.blankWindow: Screen flashes when browser starts up (Direct3D 11/Win10+Win7),"Created attachment 9059141
about:support

Screen flashes at browser startup. The screen goes black for a moment.
This is noticeable if browser is maximized.

Reproduced: always

Steps To Reproduce:
1. Maximized
2. Choose ""Blank Page"" for Homepage and new windows in option
3. Restart 


Regression window:
https://hg.mozilla.org/integration/autoland/pushloghtml?fromchange=be0d3112f763654b22e9d5d318b9c398297684b4&tochange=b3cffdee2f6caadc379280a90a8d85ca80870f3e

Regressed by:
b3cffdee2f6c	Ryan Hunt — Bug 1544538 - Pref off advanced layers. r=jrmuizel"
2d7e3754d9660de1fd99ac145fd89318c4d84c6d,2019-04-23T20:45:00+00:00,"diff -r b02881ec59d7 -r b8f49a14c458 taskcluster/ci/config.yml
--- a/taskcluster/ci/config.yml	Mon Apr 15 21:06:21 2019 +0300
+++ b/taskcluster/ci/config.yml	Mon Apr 15 17:30:59 2019 +0000
@@ -293,6 +293,11 @@
             implementation: script-engine-autophone
             os: linux
             worker-type: 'gecko-{alias}'
+        t-bitbar-gw.*:
+            provisioner: proj-autophone
+            implementation: generic-worker
+            os: linux-bitbar
+            worker-type: 'gecko-{alias}'
         t-linux(-large|-xlarge):
             provisioner: aws-provisioner-v1
             implementation: docker-worker
diff -r b02881ec59d7 -r b8f49a14c458 taskcluster/taskgraph/transforms/job/mozharness_test.py
--- a/taskcluster/taskgraph/transforms/job/mozharness_test.py	Mon Apr 15 21:06:21 2019 +0300
+++ b/taskcluster/taskgraph/transforms/job/mozharness_test.py	Mon Apr 15 17:30:59 2019 +0000
@@ -188,9 +188,13 @@
     mozharness = test['mozharness']
     worker = taskdesc['worker']
 
+    bitbar_script = 'test-linux.sh'
+    bitbar_wrapper = '/builds/taskcluster/script.py'
+
     is_macosx = worker['os'] == 'macosx'
     is_windows = worker['os'] == 'windows'
-    is_linux = worker['os'] == 'linux'
+    is_linux = worker['os'] == 'linux' or worker['os'] == 'linux-bitbar'
+    is_bitbar = worker['os'] == 'linux-bitbar'
     assert is_macosx or is_windows or is_linux
 
     artifacts = [
@@ -209,6 +213,25 @@
             'type': 'directory'
         })
 
+    if is_bitbar:
+        artifacts = [
+            {
+                'name': 'public/test/',
+                'path': 'artifacts/public',
+                'type': 'directory'
+            },
+            {
+                'name': 'public/logs/',
+                'path': 'workspace/logs',
+                'type': 'directory'
+            },
+            {
+                'name': 'public/test_info/',
+                'path': 'workspace/build/blobber_upload_dir',
+                'type': 'directory'
+            },
+        ]
+
     if 'installer-url' in mozharness:
         installer_url = mozharness['installer-url']
     else:
@@ -256,6 +279,20 @@
             'XPC_FLAGS': '0x0',
             'XPC_SERVICE_NAME': '0',
         })
+    elif is_bitbar:
+        env.update({
+            'MOZHARNESS_CONFIG': ' '.join(mozharness['config']),
+            'MOZHARNESS_SCRIPT': mozharness['script'],
+            'MOZHARNESS_URL': {'artifact-reference': '<build/public/build/mozharness.zip>'},
+            'MOZILLA_BUILD_URL': {'task-reference': installer_url},
+            ""MOZ_NO_REMOTE"": '1',
+            ""NEED_XVFB"": ""false"",
+            ""XPCOM_DEBUG_BREAK"": 'warn',
+            ""NO_FAIL_ON_TEST_ERRORS"": '1',
+            ""MOZ_HIDE_RESULTS_TABLE"": '1',
+            ""MOZ_NODE_PATH"": ""/usr/local/bin/node"",
+            'TASKCLUSTER_WORKER_TYPE': job['worker-type'],
+        })
 
     extra_config = {
         'installer_url': installer_url,
@@ -269,6 +306,12 @@
             '-u',
             'mozharness\\scripts\\' + normpath(mozharness['script'])
         ]
+    if is_bitbar:
+        mh_command = [
+            bitbar_wrapper,
+            'bash',
+            ""./{}"".format(bitbar_script)
+        ]
     else:
         # is_linux or is_macosx
         mh_command = [
@@ -317,6 +360,16 @@
         },
         'format': 'zip'
     }]
+    if is_bitbar:
+        a_url = '{}/raw-file/{}/taskcluster/scripts/tester/{}'.format(
+            config.params['head_repository'], config.params['head_rev'], bitbar_script
+        )
+        worker['mounts'] = [{
+            'file': bitbar_script,
+            'content': {
+                'url': a_url,
+            },
+        }]
 
     if is_windows:
         worker['command'] = [' '.join(mh_command)]
diff -r b02881ec59d7 -r b8f49a14c458 taskcluster/taskgraph/transforms/task.py
--- a/taskcluster/taskgraph/transforms/task.py	Mon Apr 15 21:06:21 2019 +0300
+++ b/taskcluster/taskgraph/transforms/task.py	Mon Apr 15 17:30:59 2019 +0000
@@ -665,7 +665,7 @@
 
 
 @payload_builder('generic-worker', schema={
-    Required('os'): Any('windows', 'macosx', 'linux'),
+    Required('os'): Any('windows', 'macosx', 'linux', 'linux-bitbar'),
     # see http://schemas.taskcluster.net/generic-worker/v1/payload.json
     # and https://docs.taskcluster.net/reference/workers/generic-worker/payload
 
diff -r b02881ec59d7 -r b8f49a14c458 taskcluster/taskgraph/transforms/tests.py
--- a/taskcluster/taskgraph/transforms/tests.py	Mon Apr 15 21:06:21 2019 +0300
+++ b/taskcluster/taskgraph/transforms/tests.py	Mon Apr 15 17:30:59 2019 +0000
@@ -1197,18 +1197,18 @@
             test['worker-type'] = win_worker_type_platform[test['virtualization']]
         elif test_platform.startswith('android-hw-g5'):
             if test['suite'] != 'raptor':
-                test['worker-type'] = 'proj-autophone/gecko-t-ap-unit-g5'
+                test['worker-type'] = 't-bitbar-gw-unit-g5'
             elif '--power-test' in test['mozharness']['extra-options']:
-                test['worker-type'] = 'proj-autophone/gecko-t-ap-batt-g5'
+                test['worker-type'] = 't-bitbar-gw-batt-g5'
             else:
-                test['worker-type'] = 'proj-autophone/gecko-t-ap-perf-g5'
+                test['worker-type'] = 't-bitbar-gw-perf-g5'
         elif test_platform.startswith('android-hw-p2'):
             if test['suite'] != 'raptor':
-                test['worker-type'] = 'proj-autophone/gecko-t-ap-unit-p2'
+                test['worker-type'] = 't-bitbar-gw-unit-p2'
             elif '--power-test' in test['mozharness']['extra-options']:
-                test['worker-type'] = 'proj-autophone/gecko-t-ap-batt-p2'
+                test['worker-type'] = 't-bitbar-gw-batt-p2'
             else:
-                test['worker-type'] = 'proj-autophone/gecko-t-ap-perf-p2'
+                test['worker-type'] = 't-bitbar-gw-perf-p2'
         elif test_platform.startswith('android-em-7.0-x86'):
             test['worker-type'] = 'terraform-packet/gecko-t-linux'
         elif test_platform.startswith('linux') or test_platform.startswith('android'):
diff -r b02881ec59d7 -r b8f49a14c458 taskcluster/taskgraph/util/workertypes.py
--- a/taskcluster/taskgraph/util/workertypes.py	Mon Apr 15 21:06:21 2019 +0300
+++ b/taskcluster/taskgraph/util/workertypes.py	Mon Apr 15 17:30:59 2019 +0000
@@ -52,12 +52,6 @@
     ""scriptworker-prov-v1/shipit-dev"": ('shipit', None),
     ""scriptworker-prov-v1/treescript-v1"": ('treescript', None),
     'releng-hardware/gecko-t-osx-1010': ('generic-worker', 'macosx'),
-    'proj-autophone/gecko-t-ap-perf-g5': ('script-engine-autophone', 'linux'),
-    'proj-autophone/gecko-t-ap-unit-g5': ('script-engine-autophone', 'linux'),
-    'proj-autophone/gecko-t-ap-batt-g5': ('script-engine-autophone', 'linux'),
-    'proj-autophone/gecko-t-ap-perf-p2': ('script-engine-autophone', 'linux'),
-    'proj-autophone/gecko-t-ap-unit-p2': ('script-engine-autophone', 'linux'),
-    'proj-autophone/gecko-t-ap-batt-p2': ('script-engine-autophone', 'linux'),
     'terraform-packet/gecko-t-linux': ('docker-worker', 'linux'),
 }
 
","diff -r a66f1ffd23ea -r 2d7e3754d966 taskcluster/taskgraph/transforms/job/mozharness_test.py
--- a/taskcluster/taskgraph/transforms/job/mozharness_test.py	Tue Apr 23 22:58:50 2019 +0000
+++ b/taskcluster/taskgraph/transforms/job/mozharness_test.py	Tue Apr 23 20:45:40 2019 +0000
@@ -306,7 +306,7 @@
             '-u',
             'mozharness\\scripts\\' + normpath(mozharness['script'])
         ]
-    if is_bitbar:
+    elif is_bitbar:
         mh_command = [
             bitbar_wrapper,
             'bash',
",1474897,b8f49a14c458f56a6a08e4c177671108e386be3a,"Bug 1474897: switch bitbar workers to g-w r=bc,tomprince

Much of this was already reviewed in D21473 (my test change where I developed the payload modifications and that pointed tests at my test queue).

This change keeps the payload changes from D21473, but points at the new 'real' queues we'll be using.

Differential Revision: https://phabricator.services.mozilla.com/D25009",1545343,"Bug 1545343 - Run mozharness tests with the intended command line on Windows. r=tomprince

Bug 1474897 changed things such that Windows builds ended up in the
linux/macosx branch. That still works somehow, but ends up breaking when
wrapping with run-task. This change restores the originally intended
command line.

Differential Revision: https://phabricator.services.mozilla.com/D28017",2019-04-15T17:30:00+00:00,Change bitbar testing to use generic-worker instead of taskcluster-worker,"per bug 1405767 comment 11, we will need to switch to generic-worker from taskcluster-worker. I believe I can create a development Docker image @ bitbar to test this change. I'll come up with a list of possible changes that are required shortly.

pmoore, wcosta: If you have any suggestions on how to proceed, I would certainly appreciate it.",mozharness tests are not running the expected command line on windows,
bae1f74ffaa3ae350e31c91ceb234a201d681cfe,2019-04-24T12:55:00+00:00,"diff -r b2bc140a4d76 -r cec029155339 browser/components/urlbar/UrlbarView.jsm
--- a/browser/components/urlbar/UrlbarView.jsm	Thu Mar 21 19:37:58 2019 +0000
+++ b/browser/components/urlbar/UrlbarView.jsm	Thu Apr 11 11:47:18 2019 +0000
@@ -346,15 +346,13 @@
       this._getBoundsWithoutFlushing(this.document.documentElement);
     let width = documentRect.right - documentRect.left;
     this.panel.setAttribute(""width"", width);
-
-    // Subtract two pixels for left and right borders on the panel.
-    let contentWidth = width - 2;
-    this._mainContainer.style.maxWidth = contentWidth + ""px"";
+    this._mainContainer.style.maxWidth = width + ""px"";
 
     // Keep the popup items' site icons aligned with the input's identity
     // icon if it's not too far from the edge of the window.  We define
     // ""too far"" as ""more than 30% of the window's width AND more than
     // 250px"".
+    let contentWidth = width;
     let boundToCheck = this.window.RTL_UI ? ""right"" : ""left"";
     let inputRect = this._getBoundsWithoutFlushing(this.input.textbox);
     let startOffset = Math.abs(inputRect[boundToCheck] - documentRect[boundToCheck]);
@@ -388,12 +386,12 @@
     // Align the panel with the input's parent toolbar.
     let toolbarRect =
       this._getBoundsWithoutFlushing(this.input.textbox.closest(""toolbar""));
-    let offsetX = Math.round(this.window.RTL_UI ?
+    this.panel.style.marginInlineStart = Math.round(this.window.RTL_UI ?
       inputRect.right - documentRect.right :
-      documentRect.left - inputRect.left);
-    let offsetY = Math.round(inputRect.top - toolbarRect.top);
+      documentRect.left - inputRect.left) + ""px"";
+    this.panel.style.marginTop = Math.round(inputRect.top - toolbarRect.top) + ""px"";
 
-    this.panel.openPopup(this.input.textbox, ""after_start"", offsetX, offsetY);
+    this.panel.openPopup(this.input.textbox, ""after_start"");
   }
 
   _createRow() {
diff -r b2bc140a4d76 -r cec029155339 browser/modules/ThemeVariableMap.jsm
--- a/browser/modules/ThemeVariableMap.jsm	Thu Mar 21 19:37:58 2019 +0000
+++ b/browser/modules/ThemeVariableMap.jsm	Thu Apr 11 11:47:18 2019 +0000
@@ -70,9 +70,6 @@
   [""--autocomplete-popup-color"", {
     lwtProperty: ""popup_text"",
   }],
-  [""--autocomplete-popup-border-color"", {
-    lwtProperty: ""popup_border"",
-  }],
   [""--autocomplete-popup-highlight-background"", {
     lwtProperty: ""popup_highlight"",
   }],
diff -r b2bc140a4d76 -r cec029155339 browser/themes/osx/browser.css
--- a/browser/themes/osx/browser.css	Thu Mar 21 19:37:58 2019 +0000
+++ b/browser/themes/osx/browser.css	Thu Apr 11 11:47:18 2019 +0000
@@ -339,8 +339,7 @@
  * bottom of the nav bar, OSX calculates the panel position with an missing
  * 1px - https://bugzilla.mozilla.org/show_bug.cgi?id=1406353
  */
-#PopupAutoCompleteRichResult,
-#urlbar-results {
+#PopupAutoCompleteRichResult {
   margin-top: 1px;
 }
 
diff -r b2bc140a4d76 -r cec029155339 browser/themes/shared/urlbar-autocomplete.inc.css
--- a/browser/themes/shared/urlbar-autocomplete.inc.css	Thu Mar 21 19:37:58 2019 +0000
+++ b/browser/themes/shared/urlbar-autocomplete.inc.css	Thu Apr 11 11:47:18 2019 +0000
@@ -10,9 +10,8 @@
 %define urlbarViewFaviconOffset (@urlbarViewPadding@ + 16px /* type icon width */ + @urlbarViewIconMarginEnd@)
 
 :root {
-  --autocomplete-popup-background: -moz-field;
-  --autocomplete-popup-color: -moz-fieldtext;
-  --autocomplete-popup-border-color: ThreeDShadow;
+  --autocomplete-popup-background: var(--arrowpanel-background);
+  --autocomplete-popup-color: var(--arrowpanel-color);
   --autocomplete-popup-highlight-background: Highlight;
   --autocomplete-popup-highlight-color: HighlightText;
 }
@@ -31,7 +30,9 @@
   -moz-appearance: none;
   background: var(--autocomplete-popup-background);
   color: var(--autocomplete-popup-color);
-  border: 1px solid var(--autocomplete-popup-border-color);
+  border: 1px solid var(--chrome-content-separator-color);
+  border-left-style: none;
+  border-right-style: none;
 }
 
 .urlbarView-body-inner {
@@ -192,7 +193,7 @@
 #PopupSearchAutoComplete {
   background: var(--autocomplete-popup-background);
   color: var(--autocomplete-popup-color);
-  border-color: var(--autocomplete-popup-border-color);
+  border-color: var(--arrowpanel-border-color);
 }
 
 #PopupAutoCompleteRichResult .autocomplete-richlistbox {
","diff -r d128c93735ff -r bae1f74ffaa3 toolkit/components/extensions/test/browser/browser_ext_themes_autocomplete_popup.js
--- a/toolkit/components/extensions/test/browser/browser_ext_themes_autocomplete_popup.js	Wed Apr 24 20:05:34 2019 +0000
+++ b/toolkit/components/extensions/test/browser/browser_ext_themes_autocomplete_popup.js	Wed Apr 24 12:55:42 2019 +0000
@@ -4,6 +4,7 @@
 // popup properties are applied correctly to the autocomplete bar.
 const POPUP_COLOR = ""#85A400"";
 const POPUP_BORDER_COLOR = ""#220300"";
+const CHROME_CONTENT_SEPARATOR_COLOR = ""#220301"";
 const POPUP_TEXT_COLOR_DARK = ""#000000"";
 const POPUP_TEXT_COLOR_BRIGHT = ""#ffffff"";
 const POPUP_SELECTED_COLOR = ""#9400ff"";
@@ -56,6 +57,7 @@
           ""tab_background_text"": TEXT_COLOR,
           ""popup"": POPUP_COLOR,
           ""popup_border"": POPUP_BORDER_COLOR,
+          ""toolbar_bottom_separator"": CHROME_CONTENT_SEPARATOR_COLOR,
           ""popup_text"": POPUP_TEXT_COLOR_DARK,
           ""popup_highlight"": POPUP_SELECTED_COLOR,
           ""popup_highlight_text"": POPUP_SELECTED_TEXT_COLOR,
@@ -102,7 +104,13 @@
                `rgb(${hexToRGB(POPUP_COLOR).join("", "")})`,
                `Popup background color should be set to ${POPUP_COLOR}`);
 
-  testBorderColor(popup, POPUP_BORDER_COLOR);
+  if (quantumbar) {
+    Assert.equal(popupCS.borderBottomColor,
+                 `rgb(${hexToRGB(CHROME_CONTENT_SEPARATOR_COLOR).join("", "")})`,
+                 `Popup bottom color should be set to ${CHROME_CONTENT_SEPARATOR_COLOR}`);
+  } else {
+    testBorderColor(popup, POPUP_BORDER_COLOR);
+  }
 
   Assert.equal(popupCS.color,
                `rgb(${hexToRGB(POPUP_TEXT_COLOR_DARK).join("", "")})`,
",1541910,cec02915533974e9ad62aad07838cdbfdb477f15,"Bug 1541910 - Use the chrome/content separator color for the urlbar results popup's top and bottom borders consistently across platforms and remove left and right borders. r=mak

Differential Revision: https://phabricator.services.mozilla.com/D26192",1546423,"Bug 1546423 - Update browser_ext_themes_autocomplete_popup.js for QuantumBar. r=Standard8

Differential Revision: https://phabricator.services.mozilla.com/D28621",2019-04-11T11:47:00+00:00,Quantumbar: popup should not have an inner border,"Created attachment 9055858
actual.png

Firefox Nightly 68.0a1 (2019-04-04) (64-Bit)
MacOS 10.14.4 - but probably OS=ALL_Desktop

STR:

1.) Enable Quantum Bar or be in the Experiment
2.) Type something into the Address Bar
3.) Take at a look at the borders of the Drop Down, especially at the top.

Actual: The Dropdown has an inner border on all sides.

Expected: No inner border.

The Drop Down border is now (after fixing issue 1538367) aligned again with the Toolbar border, but there is an inner border which makes the border look like 2px - which looks too bold. The old Drop Down border was only 1px which looked and matched perfectly aligned with the Toolbar and window border. 

Thanks for listening.",browser_ext_themes_autocomplete_popup.js fails on latest master with QuantumBar enabled,"Probably the recent RTL improvements to QuantumBar caused these failures.

```
TEST-UNEXPECTED-FAIL | toolkit/components/extensions/test/browser/browser_ext_themes_autocomplete_popup.js | Element left border color should be set. - ""rgba(0, 0, 0, 0.3)"" == ""rgb(34, 3, 0)"" - JS frame :: chrome://mochitests/content/browser/toolkit/components/extensions/test/browser/head.js :: testBorderColor :: line 72
TEST-UNEXPECTED-FAIL | toolkit/components/extensions/test/browser/browser_ext_themes_autocomplete_popup.js | Element right border color should be set. - ""rgba(0, 0, 0, 0.3)"" == ""rgb(34, 3, 0)"" - JS frame :: chrome://mochitests/content/browser/toolkit/components/extensions/test/browser/head.js :: testBorderColor :: line 75
TEST-UNEXPECTED-FAIL | toolkit/components/extensions/test/browser/browser_ext_themes_autocomplete_popup.js | Element top border color should be set. - ""rgba(0, 0, 0, 0.3)"" == ""rgb(34, 3, 0)"" - JS frame :: chrome://mochitests/content/browser/toolkit/components/extensions/test/browser/head.js :: testBorderColor :: line 78
TEST-UNEXPECTED-FAIL | toolkit/components/extensions/test/browser/browser_ext_themes_autocomplete_popup.js | Element bottom border color should be set. - ""rgba(0, 0, 0, 0.3)"" == ""rgb(34, 3, 0)"" - JS frame :: chrome://mochitests/content/browser/toolkit/components/extensions/test/browser/head.js :: testBorderColor :: line 81
```"
786c4d929af75d1d6292783a786917d40101e5ea,2022-07-18T12:57:00+00:00,"diff -r 4e38ca9aaa48 -r f365bf91369c dom/base/nsDocument.cpp
--- a/dom/base/nsDocument.cpp	Thu May 10 13:05:22 2018 -0400
+++ b/dom/base/nsDocument.cpp	Tue May 08 18:09:32 2018 +0800
@@ -9967,10 +9967,13 @@
     return nullptr;
   }
 
-  // GetContentOffsetsFromPoint requires frame-relative coordinates, so we need
-  // to adjust to frame-relative coordinates before we can perform this call.
-  // It should also not take into account the padding of the frame.
-  nsPoint adjustedPoint = pt - ptFrame->GetOffsetTo(rootFrame);
+  // We require frame-relative coordinates for GetContentOffsetsFromPoint.
+  nsPoint aOffset;
+  nsCOMPtr<nsIWidget> widget = nsContentUtils::GetWidget(ps, &aOffset);
+  LayoutDeviceIntPoint refPoint =
+    nsContentUtils::ToWidgetPoint(CSSPoint(aX, aY), aOffset, GetPresContext());
+  nsPoint adjustedPoint =
+    nsLayoutUtils::GetEventCoordinatesRelativeTo(widget, refPoint, ptFrame);
 
   nsFrame::ContentOffsets offsets =
     ptFrame->GetContentOffsetsFromPoint(adjustedPoint);
diff -r 4e38ca9aaa48 -r f365bf91369c dom/base/test/test_caretPositionFromPoint.html
--- a/dom/base/test/test_caretPositionFromPoint.html	Thu May 10 13:05:22 2018 -0400
+++ b/dom/base/test/test_caretPositionFromPoint.html	Tue May 08 18:09:32 2018 +0800
@@ -105,6 +105,12 @@
                           Math.round(test6Rect.top + (test6Rect.height / 2)),
                           5, ""test6"");
 
+    // Check the first and last characters of the transformed div.
+    var test7Element = document.getElementById('test7');
+    var test7Rect = test7Element.getBoundingClientRect();
+    checkOffsetsFromPoint(Math.round(test7Rect.left + 1), Math.round(test7Rect.top + 1), 0, 'test7');
+    checkOffsetsFromPoint(Math.round(test7Rect.right - 1), Math.round(test7Rect.top + 1), 13, 'test7');
+
     SimpleTest.finish();
   }
 
@@ -116,6 +122,8 @@
 <span id=""test2"" style=""color: blue;"">abc, abc, abc</span><br>
 <textarea id=""test3"">abc</textarea><input id=""test4"" value=""abcdef""><br><br>
 <marquee>marquee</marquee>
+<!-- Translate test7 while staying within confines of the test viewport -->
+<div id=""test7"" style=""transform: translate(140px, -20px); display: inline-block;"">abc, abc, abc</div>
 </div>
 <input id=""test5"" value=""The rabbit-hole went straight on like a tunnel for some way, and then dipped suddenly down, so suddenly that Alice had not a moment to think about stopping herself before she found herself falling down a very deep well. Either the well was very deep, or she fell very slowly, for she had plenty of time as she went down to look about her and to wonder what was going to happen next. First, she tried to look down and make out what she was coming to, but it was too dark to see anything; then she looked at the sides of the well, and noticed that they were filled with cupboards and book-shelves; here and there she saw maps and pictures hung upon pegs. She took down a jar from one of the shelves as she passed; it was labelled `ORANGE MARMALADE', but to her great disappointment it was empty: she did not like to drop the jar for fear of killing somebody, so managed to put it into one of the cupboards as she fell past it."" type=""text"">
 <input id=""test6"" type=""number"" style=""width:150px; height:57px;"" value=""31415""><br>
","diff -r 22e6fdc55e9e -r 786c4d929af7 dom/base/Document.cpp
--- a/dom/base/Document.cpp	Mon Jul 18 12:37:12 2022 +0000
+++ b/dom/base/Document.cpp	Mon Jul 18 12:57:40 2022 +0000
@@ -13593,12 +13593,12 @@
   }
 
   // We require frame-relative coordinates for GetContentOffsetsFromPoint.
-  nsPoint aOffset;
-  nsCOMPtr<nsIWidget> widget = nsContentUtils::GetWidget(presShell, &aOffset);
-  LayoutDeviceIntPoint refPoint = nsContentUtils::ToWidgetPoint(
-      CSSPoint(aX, aY), aOffset, GetPresContext());
-  nsPoint adjustedPoint = nsLayoutUtils::GetEventCoordinatesRelativeTo(
-      widget, refPoint, RelativeTo{ptFrame});
+  nsPoint adjustedPoint = pt;
+  if (nsLayoutUtils::TransformPoint(RelativeTo{rootFrame}, RelativeTo{ptFrame},
+                                    adjustedPoint) !=
+      nsLayoutUtils::TRANSFORM_SUCCEEDED) {
+    return nullptr;
+  }
 
   nsIFrame::ContentOffsets offsets =
       ptFrame->GetContentOffsetsFromPoint(adjustedPoint);
diff -r 22e6fdc55e9e -r 786c4d929af7 testing/web-platform/tests/css/cssom/caretPositionFromPoint-with-transformation.html
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/testing/web-platform/tests/css/cssom/caretPositionFromPoint-with-transformation.html	Mon Jul 18 12:57:40 2022 +0000
@@ -0,0 +1,46 @@
+<!doctype html>
+<meta charset=""utf-8"">
+<title>getCaretPositionFromPoint should return the correct offset even in iframes with transformation</title>
+<link rel=""help"" href=""https://drafts.csswg.org/cssom-view-1/#dom-document-caretpositionfrompoint"">
+<link rel=""help"" href=""https://bugzilla.mozilla.org/show_bug.cgi?id=1546612"">
+<script src=""/resources/testharness.js""></script>
+<script src=""/resources/testharnessreport.js""></script>
+<style>
+  #actual {
+    transform: translateX(100px);
+  }
+</style>
+<iframe id=""expected""></iframe>
+<br>
+<iframe id=""actual""></iframe>
+<script>
+  const expectedFrame = document.getElementById(""expected"");
+  const actualFrame = document.getElementById(""actual"");
+
+  const getCaretPositionOffset = frame => {
+    const source = `<!doctype html><meta charset=""utf-8""><h1>title</h1><p>paragraph</p>`
+
+    const elementCenter = elem => {
+      const rect = elem.getBoundingClientRect();
+      return [rect.x + rect.width / 2, rect.y + rect.height / 2];
+    };
+
+    return new Promise(resolve => {
+      frame.srcdoc = source;
+      frame.onload = () => {
+        const frameDoc = frame.contentDocument;
+        const {offset} = frameDoc.caretPositionFromPoint(
+          ...elementCenter(frameDoc.querySelector(""h1""))
+        );
+        resolve(offset);
+      };
+    });
+  };
+
+  promise_test(async () => {
+    assert_equals(...await Promise.all([
+      getCaretPositionOffset(expectedFrame),
+      getCaretPositionOffset(actualFrame)
+    ]), ""caret offset"");
+  }, ""iframe's with equal content should report the same caret offset"");
+</script>
",1025815,f365bf91369c4f1327738cd4a4fb27ccdf05f274,"Bug 1025815 - caretPositionFromPoint needs to account for CSS transforms. r=bz

MozReview-Commit-ID: 1cTUyd0x6xy",1546612,"Bug 1546612 - caretPositionFromPoint does not take iframe transformation into account r=emilio

Using nsLayoutUtils::TransformPoint instead of going through the widget takes the iframe's
transformations into account.

Differential Revision: https://phabricator.services.mozilla.com/D151995",2018-05-08T18:09:00+08:00,Incorrect result of document.caretPositionFromPoint after CSS transform,"Created attachment 8440582
test.html based on https://developer.mozilla.org/en-US/docs/Web/API/document.caretPositionFromPoint

User Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:30.0) Gecko/20100101 Firefox/30.0 (Beta/Release)
Build ID: 20140608211622

Steps to reproduce:

Trying to get caret position offset inside element after css transform.scale() was applied.
example is in attachment. In chromium it works fine.


Actual results:

Returning value is incorrect and depends on scaling factor.


Expected results:

Returning value must be the same as without transform.",caretPositionFromPoint does not take iframe transformation into account,"User Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36

Steps to reproduce:

1/ Create an iframe, apply a CSS transformation to it (X translation).
2/ Listen to pointerdown events into this iframe
3/ Execute document.caretPositionFromPoint into the iframe with events client X/Y as input.

=> Please see this jsfiddle, just click into the text and check output offsets (works only in Firefox)
https://jsfiddle.net/morille/4gpqtf7e/19/



Actual results:

The returned CaretPosition references the right node but the wrong offset.
By shifting the event coordinates by the amout of iframe translation, returned offset is correct.


Expected results:

The offset should match the offset of the character behind pointer."
35e5c8c07079320bb5654dd234b83b4bafff9a29,2019-05-01T15:07:00+00:00,"diff -r d15a1a637b66 -r 614d913a1657 taskcluster/ci/test/mochitest.yml
--- a/taskcluster/ci/test/mochitest.yml	Thu Apr 18 16:47:42 2019 +0000
+++ b/taskcluster/ci/test/mochitest.yml	Thu Apr 18 14:40:08 2019 +0000
@@ -3,11 +3,10 @@
         by-test-platform:
             android-em-7.*: geckoview-androidTest.apk
             default: null
-    serviceworker-e10s:
+    variants:
         by-test-platform:
-            linux64/debug: both
-            default: false
-    socketprocess-e10s: false
+            linux64/debug: ['serviceworker']
+            default: []
     run-on-projects:
         by-test-platform:
             android-em-4.3-arm7-api-16/opt: ['try']
@@ -319,10 +318,11 @@
             android-em-4.3-arm7-api-16/opt: ['try']
             windows10-aarch64/opt: ['try', 'mozilla-central']
             default: built-projects
-    socketprocess-e10s:
+    variants:
         by-test-platform:
-            android.*: false
-            default: both
+            android.*: []
+            linux64/debug: ['serviceworker', 'socketprocess']
+            default: ['socketprocess']
     loopback-video: true
     virtualization:
         by-test-platform:
@@ -386,7 +386,7 @@
     # We could re-enable e10s later.
     # There's no intrinsic reason not to use it.
     e10s: false
-    serviceworker-e10s: false
+    variants: []
     allow-software-gl-layers: false
     mozharness:
         mochitest-flavor: plain
diff -r d15a1a637b66 -r 614d913a1657 taskcluster/ci/test/reftest.yml
--- a/taskcluster/ci/test/reftest.yml	Thu Apr 18 16:47:42 2019 +0000
+++ b/taskcluster/ci/test/reftest.yml	Thu Apr 18 14:40:08 2019 +0000
@@ -3,10 +3,10 @@
         by-test-platform:
             android-em-7.*: geckoview-androidTest.apk
             default: null
-    serviceworker-e10s:
+    variants:
         by-test-platform:
-            linux64/debug: both
-            default: false
+            linux64/debug: ['serviceworker']
+            default: []
     run-on-projects:
         by-test-platform:
             android-em-4.3-arm7-api-16/opt: ['try']
diff -r d15a1a637b66 -r 614d913a1657 taskcluster/ci/test/web-platform.yml
--- a/taskcluster/ci/test/web-platform.yml	Thu Apr 18 16:47:42 2019 +0000
+++ b/taskcluster/ci/test/web-platform.yml	Thu Apr 18 14:40:08 2019 +0000
@@ -1,10 +1,10 @@
 job-defaults:
     instance-size: xlarge
     max-run-time: 5400
-    serviceworker-e10s:
+    variants:
         by-test-platform:
-            linux64/debug: both
-            default: false
+            linux64/debug: ['serviceworker']
+            default: []
     virtualization:
         by-test-platform:
             windows10-64(?:-pgo|-shippable)?-qr/.*: virtual-with-gpu
diff -r d15a1a637b66 -r 614d913a1657 taskcluster/ci/test/xpcshell.yml
--- a/taskcluster/ci/test/xpcshell.yml	Thu Apr 18 16:47:42 2019 +0000
+++ b/taskcluster/ci/test/xpcshell.yml	Thu Apr 18 14:40:08 2019 +0000
@@ -1,8 +1,8 @@
 job-defaults:
-    serviceworker-e10s:
+    variants:
         by-test-platform:
-            linux64/debug: both
-            default: false
+            linux64/debug: ['serviceworker']
+            default: []
     mozharness:
         script:
             by-test-platform:
diff -r d15a1a637b66 -r 614d913a1657 taskcluster/docs/attributes.rst
--- a/taskcluster/docs/attributes.rst	Thu Apr 18 16:47:42 2019 +0000
+++ b/taskcluster/docs/attributes.rst	Thu Apr 18 14:40:08 2019 +0000
@@ -108,6 +108,13 @@
 This is the name used to refer to a unit test via try syntax.  It
 may not match either of ``unittest_suite`` or ``unittest_flavor``.
 
+unittest_variant
+================
+
+The configuration variant the test suite is running with. If set, this usually
+means the tests are running with a special pref enabled. These are defined in
+``taskgraph.transforms.tests.TEST_VARIANTS``.
+
 talos_try_name
 ==============
 
@@ -130,18 +137,6 @@
 This is the chunk number of a chunked test suite (talos or unittest).  Note
 that this is a string!
 
-serviceworker_e10s
-==================
-
-For test suites which distinguish whether or not they run with the serviceworker
-e10s redesign enabled.
-
-socketprocess_e10s
-==================
-
-For test suites which distinguish whether or not they run with the socket
-process enabled.
-
 e10s
 ====
 
diff -r d15a1a637b66 -r 614d913a1657 taskcluster/taskgraph/transforms/tests.py
--- a/taskcluster/taskgraph/transforms/tests.py	Thu Apr 18 16:47:42 2019 +0000
+++ b/taskcluster/taskgraph/transforms/tests.py	Thu Apr 18 14:40:08 2019 +0000
@@ -22,6 +22,7 @@
 from taskgraph.transforms.base import TransformSequence
 from taskgraph.util.attributes import match_run_on_projects
 from taskgraph.util.schema import resolve_keyed_by, OptimizationSchema
+from taskgraph.util.templates import merge
 from taskgraph.util.treeherder import split_symbol, join_symbol, add_suffix
 from taskgraph.util.platforms import platform_family
 from taskgraph.util.schema import (
@@ -147,6 +148,39 @@
     'macosx64': 'releng-hardware/gecko-t-osx-1010',
 }
 
+
+def runs_on_central(test):
+    return match_run_on_projects('mozilla-central', test['run-on-projects'])
+
+
+TEST_VARIANTS = {
+    'serviceworker': {
+        'description': ""{description} with serviceworker-e10s redesign enabled"",
+        'filterfn': runs_on_central,
+        'suffix': 'sw',
+        'config': {
+            'run-on-projects': ['mozilla-central'],
+            'tier': 2,
+            'mozharness': {
+                'extra-options': ['--setpref=""dom.serviceWorkers.parent_intercept=true""'],
+            },
+        }
+    },
+    'socketprocess': {
+        'description': ""{description} with socket process enabled"",
+        'suffix': 'spi',
+        'config': {
+            'mozharness': {
+                'extra-options': [
+                    '--setpref=""media.peerconnection.mtransport_process=true""',
+                    '--setpref=""network.process.enabled=true""',
+                ],
+            }
+        }
+    }
+}
+
+
 logger = logging.getLogger(__name__)
 
 transforms = TransformSequence()
@@ -225,13 +259,11 @@
     # the branch (see below)
     Optional('expires-after'): basestring,
 
-    # Whether to run this task with the serviceworker e10s redesign enabled
-    # (desktop-test only).  If 'both', run one task with and one task without.
-    # Tasks with this enabled have have ""-sw"" appended to the test name and
-    # treeherder group.
-    Optional('serviceworker-e10s'): optionally_keyed_by(
+    # The different configurations that should be run against this task, defined
+    # in the TEST_VARIANTS object.
+    Optional('variants'): optionally_keyed_by(
         'test-platform', 'project',
-        Any(bool, 'both')),
+        Any(TEST_VARIANTS.keys())),
 
     # Whether to run this task with e10s.  If false, run
     # without e10s; if true, run with e10s; if 'both', run one task with and
@@ -241,14 +273,6 @@
         'test-platform', 'project',
         Any(bool, 'both')),
 
-    # Whether to run this task with the socket process enabled (desktop-test
-    # only).  If 'both', run one task with and one task without.  Tasks with
-    # this enabled have have ""-spi"" appended to the test name and treeherder
-    # group.
-    Optional('socketprocess-e10s'): optionally_keyed_by(
-        'test-platform', 'project',
-        Any(bool, 'both')),
-
     # Whether the task should run with WebRender enabled or not.
     Optional('webrender'): bool,
 
@@ -508,9 +532,8 @@
         test.setdefault('loopback-video', False)
         test.setdefault('docker-image', {'in-tree': 'desktop1604-test'})
         test.setdefault('checkout', False)
-        test.setdefault('serviceworker-e10s', False)
-        test.setdefault('socketprocess-e10s', False)
         test.setdefault('require-signed-extensions', False)
+        test.setdefault('variants', [])
 
         test['mozharness'].setdefault('extra-options', [])
         test['mozharness'].setdefault('requires-signed-builds', False)
@@ -768,9 +791,8 @@
         'docker-image',
         'max-run-time',
         'chunks',
-        'serviceworker-e10s',
+        'variants',
         'e10s',
-        'socketprocess-e10s',
         'suite',
         'run-on-projects',
         'os-groups',
@@ -938,39 +960,34 @@
 
 
 @transforms.add
-def split_serviceworker_e10s(config, tests):
+def split_variants(config, tests):
     for test in tests:
-        if test['attributes'].get('socketprocess_e10s'):
-            yield test
-            continue
+        variants = test.pop('variants')
 
-        sw = test.pop('serviceworker-e10s')
+        yield copy.deepcopy(test)
 
-        test['serviceworker-e10s'] = False
-        test['attributes']['serviceworker_e10s'] = False
+        for name in variants:
+            testv = copy.deepcopy(test)
+            variant = TEST_VARIANTS[name]
 
-        if sw == 'both':
-            yield copy.deepcopy(test)
-            sw = True
-        if sw:
-            if not match_run_on_projects('mozilla-central', test['run-on-projects']):
+            if 'filterfn' in variant and not variant['filterfn'](testv):
                 continue
 
-            test['description'] += "" with serviceworker-e10s redesign enabled""
-            test['run-on-projects'] = ['mozilla-central']
-            test['test-name'] += '-sw'
-            test['try-name'] += '-sw'
-            test['attributes']['serviceworker_e10s'] = True
-            group, symbol = split_symbol(test['treeherder-symbol'])
+            testv['attributes']['unittest_variant'] = name
+            testv['description'] = variant['description'].format(**testv)
+
+            suffix = '-' + variant['suffix']
+            testv['test-name'] += suffix
+            testv['try-name'] += suffix
+
+            group, symbol = split_symbol(testv['treeherder-symbol'])
             if group != '?':
-                group += '-sw'
+                group += suffix
             else:
-                symbol += '-sw'
-            test['treeherder-symbol'] = join_symbol(group, symbol)
-            test['mozharness']['extra-options'].append(
-                '--setpref=""dom.serviceWorkers.parent_intercept=true""')
-            test['tier'] = 2
-        yield test
+                symbol += suffix
+            testv['treeherder-symbol'] = join_symbol(group, symbol)
+
+            yield merge(testv, variant['config'])
 
 
 @transforms.add
@@ -999,39 +1016,6 @@
 
 
 @transforms.add
-def split_socketprocess_e10s(config, tests):
-    for test in tests:
-        if test['attributes'].get('serviceworker_e10s'):
-            yield test
-            continue
-
-        sw = test.pop('socketprocess-e10s')
-
-        test['socketprocess-e10s'] = False
-        test['attributes']['socketprocess_e10s'] = False
-
-        if sw == 'both':
-            yield copy.deepcopy(test)
-            sw = True
-        if sw:
-            test['description'] += "" with socket process enabled""
-            test['test-name'] += '-spi'
-            test['try-name'] += '-spi'
-            test['attributes']['socketprocess_e10s'] = True
-            group, symbol = split_symbol(test['treeherder-symbol'])
-            if group != '?':
-                group += '-spi'
-            else:
-                symbol += '-spi'
-            test['treeherder-symbol'] = join_symbol(group, symbol)
-            test['mozharness']['extra-options'].append(
-                '--setpref=""media.peerconnection.mtransport_process=true""')
-            test['mozharness']['extra-options'].append(
-                '--setpref=""network.process.enabled=true""')
-        yield test
-
-
-@transforms.add
 def split_chunks(config, tests):
     """"""Based on the 'chunks' key, split tests up into chunks by duplicating
     them and assigning 'this-chunk' appropriately and updating the treeherder
","diff -r c0343b881420 -r 35e5c8c07079 taskcluster/taskgraph/transforms/tests.py
--- a/taskcluster/taskgraph/transforms/tests.py	Wed May 01 12:27:25 2019 +0000
+++ b/taskcluster/taskgraph/transforms/tests.py	Wed May 01 15:07:44 2019 +0000
@@ -158,18 +158,20 @@
         'description': ""{description} with serviceworker-e10s redesign enabled"",
         'filterfn': runs_on_central,
         'suffix': 'sw',
-        'config': {
+        'replace': {
             'run-on-projects': ['mozilla-central'],
+        },
+        'merge': {
             'tier': 2,
             'mozharness': {
                 'extra-options': ['--setpref=""dom.serviceWorkers.parent_intercept=true""'],
             },
-        }
+        },
     },
     'socketprocess': {
         'description': ""{description} with socket process enabled"",
         'suffix': 'spi',
-        'config': {
+        'merge': {
             'mozharness': {
                 'extra-options': [
                     '--setpref=""media.peerconnection.mtransport_process=true""',
@@ -995,7 +997,8 @@
                 symbol += suffix
             testv['treeherder-symbol'] = join_symbol(group, symbol)
 
-            yield merge(testv, variant['config'])
+            testv.update(variant.get('replace', {}))
+            yield merge(testv, variant.get('merge', {}))
 
 
 @transforms.add
",1539932,614d913a1657053202edc38da726f75459e333ea,"Bug 1539932 - [ci] Handle serviceworker/socketprocess test variants more generically, r=jmaher

We are starting to spin off more and more ""variants"" of test suites. These are
usually just duplicates of our pre-existing tasks, except with an additional
pref set.

Currently there are two variants (serviceworker-e10s and socketprocess-e10s),
but a third will be added soon (fission). This change ensures we handle these
types of requests in a consistent and well defined manner. It also splits tasks
in a loop, so we don't accidentally risk combinatorial explosion.

Variants should typically be reserved for very large changes that will impact
the entire codebase (think e10s).

Differential Revision: https://phabricator.services.mozilla.com/D28061",1546979,"Bug 1546979 - [ci] Allow TEST_VARIANTS to replace keys in addition to merging them, r=tomprince

This allows us to fix a regression where -sw tasks were scheduled on autoland/inbound.

Differential Revision: https://phabricator.services.mozilla.com/D29259",2019-04-18T14:40:00+00:00,Add ability to easily define variants to the 'test' kind,"Sometimes we want to duplicate all of the tasks we have and run them with a modified 'pref'. Normally we add a [key](https://searchfox.org/mozilla-central/rev/ddd1679c0534f7ddf36cafddd17b710c4fefe3c4/taskcluster/ci/test/mochitest.yml#297) to all of the tasks and use a [transform](https://searchfox.org/mozilla-central/source/taskcluster/taskgraph/transforms/tests.py#960) to duplicate them.

This is clunky to add new variants, because you have to create a transform for each new variant, and in that transform you need to be careful not to accidentally dupe your variant with combinations of other variants. Ideally, we could define a datastructure to store all variant infomation and allow tasks to define a list of variants. We could then use a single transform to do all the splitting and adding new variants in the future becomes much much easier.",Turn off serviceworker tasks on autoland/inbound,"This is a regression from bug 1539932. Before that the -sw tasks only ran on mozilla-central. The reason for the failure is that the `run-on-projects` key here:
https://searchfox.org/mozilla-central/rev/d143f8ce30d1bcfee7a1227c27bf876a85f8cede/taskcluster/taskgraph/transforms/tests.py#162

Get's merged with the `run-on-projects` value in the .yml files rather than overriding it. This is a bit tricky because we *do* want to merge the other values in that config."
25ba16a5d7f8805c0058ea55e75040d6c927867a,2019-05-24T06:06:00+00:00,"diff -r 6fa8c4b075bc -r 659c30eda4f1 gfx/webrender_bindings/RenderCompositorEGL.cpp
--- a/gfx/webrender_bindings/RenderCompositorEGL.cpp	Thu Apr 11 16:23:47 2019 +0000
+++ b/gfx/webrender_bindings/RenderCompositorEGL.cpp	Fri Apr 12 08:08:03 2019 +0000
@@ -29,44 +29,18 @@
 /* static */
 UniquePtr<RenderCompositor> RenderCompositorEGL::Create(
     RefPtr<widget::CompositorWidget> aWidget) {
-#ifdef MOZ_WIDGET_ANDROID
+#ifdef MOZ_WAYLAND
+  if (GDK_IS_X11_DISPLAY(gdk_display_get_default())) {
+    return nullptr;
+  }
+#endif
   if (!RenderThread::Get()->SharedGL()) {
     gfxCriticalNote << ""Failed to get shared GL context"";
     return nullptr;
   }
   return MakeUnique<RenderCompositorEGL>(aWidget);
-#elif defined(MOZ_WAYLAND)
-  // Disabled SharedGL() usage on wayland. Its usage caused flicker when
-  // multiple windows were opened. See Bug 1535893.
-  if (GDK_IS_X11_DISPLAY(gdk_display_get_default())) {
-    return nullptr;
-  }
-  RefPtr<gl::GLContext> gl;
-  gl = CreateGLContext();
-  if (!gl) {
-    return nullptr;
-  }
-  return MakeUnique<RenderCompositorEGL>(gl, aWidget);
-#endif
 }
 
-#ifdef MOZ_WAYLAND
-/* static */ already_AddRefed<gl::GLContext>
-RenderCompositorEGL::CreateGLContext() {
-  // Create GLContext with dummy EGLSurface.
-  RefPtr<gl::GLContext> gl =
-      gl::GLContextProviderEGL::CreateForCompositorWidget(
-          nullptr, /* aWebRender */ true, /* aForceAccelerated */ true);
-  if (!gl || !gl->MakeCurrent()) {
-    gfxCriticalNote << ""Failed GL context creation for WebRender: ""
-                    << gfx::hexa(gl.get());
-    return nullptr;
-  }
-
-  return gl.forget();
-}
-#endif
-
 EGLSurface RenderCompositorEGL::CreateEGLSurface() {
   EGLSurface surface = EGL_NO_SURFACE;
   surface = gl::GLContextEGL::CreateEGLSurfaceForCompositorWidget(
@@ -77,19 +51,9 @@
   return surface;
 }
 
-#ifdef MOZ_WIDGET_ANDROID
 RenderCompositorEGL::RenderCompositorEGL(
     RefPtr<widget::CompositorWidget> aWidget)
     : RenderCompositor(std::move(aWidget)), mEGLSurface(EGL_NO_SURFACE) {}
-#elif defined(MOZ_WAYLAND)
-RenderCompositorEGL::RenderCompositorEGL(
-    RefPtr<gl::GLContext> aGL, RefPtr<widget::CompositorWidget> aWidget)
-    : RenderCompositor(std::move(aWidget)),
-      mGL(aGL),
-      mEGLSurface(EGL_NO_SURFACE) {
-  MOZ_ASSERT(mGL);
-}
-#endif
 
 RenderCompositorEGL::~RenderCompositorEGL() { DestroyEGLSurface(); }
 
@@ -100,7 +64,6 @@
     // Destroy EGLSurface if it exists.
     DestroyEGLSurface();
     mEGLSurface = CreateEGLSurface();
-    gl::GLContextEGL::Cast(gl())->SetEGLSurfaceOverride(mEGLSurface);
     if (mEGLSurface) {
       const auto* egl = gl::GLLibraryEGL::Get();
       // Make eglSwapBuffers() non-blocking on wayland
@@ -108,7 +71,7 @@
     }
   }
 #endif
-  if (!gl()->MakeCurrent()) {
+  if (!MakeCurrent()) {
     gfxCriticalNote << ""Failed to make render context current, can't draw."";
     return false;
   }
@@ -147,12 +110,7 @@
 }
 
 gl::GLContext* RenderCompositorEGL::gl() const {
-#ifdef MOZ_WIDGET_ANDROID
   return RenderThread::Get()->SharedGL();
-#elif defined(MOZ_WAYLAND)
-  MOZ_ASSERT(mGL);
-  return mGL;
-#endif
 }
 
 bool RenderCompositorEGL::MakeCurrent() {
diff -r 6fa8c4b075bc -r 659c30eda4f1 gfx/webrender_bindings/RenderCompositorEGL.h
--- a/gfx/webrender_bindings/RenderCompositorEGL.h	Thu Apr 11 16:23:47 2019 +0000
+++ b/gfx/webrender_bindings/RenderCompositorEGL.h	Fri Apr 12 08:08:03 2019 +0000
@@ -19,12 +19,7 @@
   static UniquePtr<RenderCompositor> Create(
       RefPtr<widget::CompositorWidget> aWidget);
 
-#ifdef MOZ_WIDGET_ANDROID
   explicit RenderCompositorEGL(RefPtr<widget::CompositorWidget> aWidget);
-#elif defined(MOZ_WAYLAND)
-  RenderCompositorEGL(RefPtr<gl::GLContext> aGL,
-                      RefPtr<widget::CompositorWidget> aWidget);
-#endif
   virtual ~RenderCompositorEGL();
 
   bool BeginFrame() override;
@@ -42,16 +37,10 @@
   LayoutDeviceIntSize GetBufferSize() override;
 
  protected:
-#ifdef MOZ_WAYLAND
-  static already_AddRefed<gl::GLContext> CreateGLContext();
-#endif
   EGLSurface CreateEGLSurface();
 
   void DestroyEGLSurface();
 
-#ifdef MOZ_WAYLAND
-  const RefPtr<gl::GLContext> mGL;
-#endif
   EGLSurface mEGLSurface;
 };
 
diff -r 6fa8c4b075bc -r 659c30eda4f1 gfx/webrender_bindings/RenderThread.cpp
--- a/gfx/webrender_bindings/RenderThread.cpp	Thu Apr 11 16:23:47 2019 +0000
+++ b/gfx/webrender_bindings/RenderThread.cpp	Fri Apr 12 08:08:03 2019 +0000
@@ -869,7 +869,7 @@
 }
 #endif
 
-#ifdef MOZ_WIDGET_ANDROID
+#if defined(MOZ_WIDGET_ANDROID) || defined(MOZ_WAYLAND)
 static already_AddRefed<gl::GLContext> CreateGLContextEGL() {
   nsCString discardFailureId;
   if (!gl::GLLibraryEGL::EnsureInitialized(/* forceAccel */ true,
@@ -897,8 +897,12 @@
   }
 #endif
 
-#ifdef MOZ_WIDGET_ANDROID
-  return CreateGLContextEGL();
+#if defined(MOZ_WIDGET_ANDROID)
+    return CreateGLContextEGL();
+#elif defined(MOZ_WAYLAND)
+  if (!GDK_IS_X11_DISPLAY(gdk_display_get_default())) {
+    return CreateGLContextEGL();
+  }
 #endif
   // We currently only support a shared GLContext
   // with ANGLE.
","diff -r d0646b8b69e7 -r 25ba16a5d7f8 gfx/webrender_bindings/RenderCompositorEGL.cpp
--- a/gfx/webrender_bindings/RenderCompositorEGL.cpp	Sat May 25 11:17:49 2019 +0000
+++ b/gfx/webrender_bindings/RenderCompositorEGL.cpp	Fri May 24 06:06:12 2019 +0000
@@ -59,16 +59,13 @@
 
 bool RenderCompositorEGL::BeginFrame() {
 #ifdef MOZ_WAYLAND
-  if (mWidget->AsX11() &&
-      mWidget->AsX11()->WaylandRequestsUpdatingEGLSurface()) {
-    // Destroy EGLSurface if it exists.
+  bool newSurface =
+      mWidget->AsX11() && mWidget->AsX11()->WaylandRequestsUpdatingEGLSurface();
+  if (newSurface) {
+    // Destroy EGLSurface if it exists and create a new one. We will set the
+    // swap interval after MakeCurrent() has been called.
     DestroyEGLSurface();
     mEGLSurface = CreateEGLSurface();
-    if (mEGLSurface) {
-      const auto* egl = gl::GLLibraryEGL::Get();
-      // Make eglSwapBuffers() non-blocking on wayland
-      egl->fSwapInterval(gl::EGL_DISPLAY(), 0);
-    }
   }
 #endif
   if (!MakeCurrent()) {
@@ -76,6 +73,18 @@
     return false;
   }
 
+#ifdef MOZ_WAYLAND
+  if (newSurface) {
+    // We have a new EGL surface, which on wayland needs to be configured for
+    // non-blocking buffer swaps. We need MakeCurrent() to set our current EGL
+    // context before we call eglSwapInterval, which is why we do it here rather
+    // than where the surface was created.
+    const auto* egl = gl::GLLibraryEGL::Get();
+    // Make eglSwapBuffers() non-blocking on wayland.
+    egl->fSwapInterval(gl::EGL_DISPLAY(), 0);
+  }
+#endif
+
 #ifdef MOZ_WIDGET_ANDROID
   java::GeckoSurfaceTexture::DestroyUnused((int64_t)gl());
 #endif
",1535893,659c30eda4f10747540e72a9d41ed459b9234db3,"Bug 1535893 - Use SharedGL in RenderCompositorEGL on wayland, r=sotaro

Differential Revision: https://phabricator.services.mozilla.com/D26800",1548499,"Bug 1548499 - Set EGL context before call to eglSwapInterval. r=sotaro

The EGL context must be set before the call to eglSwapInterval to ensure that it will operate on the correct context.

Differential Revision: https://phabricator.services.mozilla.com/D30282",2019-04-12T08:08:00+00:00,Use SharedGL in RenderCompositorEGL on wayland,"By Bug 1532929 Comment 7, SharedGL usage in RenderCompositorEGL on wayland caused flicker when multiple windows were opened. Bug 1532929 does not enable SharedGL on wayland for now.",[wayland] Browser blocks when not all windows are visible after SharedGL was enabled.,"SharedGL was enabled by bug 1535893 for wayland.

This has resulted in Firefox once again freezing when not all windows are visible, as described in bug 1515448.

A trace shows that we are blocked in eglSwapBuffers, suggesting that the gl context from SharedGL does not end up being configured for 0 swap interval.

On a seperate note, I can't help but notice that we are configuring the swap interval at every context consumption site, rather than doing it once and for all where we create the contexts, which should be easier to deal with."
7cdc782094723465d05bd429da2d5eee4822b126,2022-09-22T08:37:00+00:00,"diff -r e5cd93207b3a -r 634d9ca93c94 netwerk/base/nsProtocolProxyService.cpp
--- a/netwerk/base/nsProtocolProxyService.cpp	Mon Nov 05 16:00:08 2018 +0000
+++ b/netwerk/base/nsProtocolProxyService.cpp	Mon Nov 05 07:12:54 2018 +0000
@@ -2490,21 +2490,21 @@
         }
     }
 
-    // Now, scan to see if all remaining proxies are disabled.  If so, then
+    // Scan to see if all remaining non-direct proxies are disabled. If so, then
     // we'll just bail and return them all.  Otherwise, we'll go and prune the
     // disabled ones.
 
-    bool allDisabled = true;
+    bool allNonDirectProxiesDisabled = true;
 
     nsProxyInfo *iter;
     for (iter = head; iter; iter = iter->mNext) {
-        if (!IsProxyDisabled(iter)) {
-            allDisabled = false;
+        if (!IsProxyDisabled(iter) && iter->mType != kProxyType_DIRECT) {
+            allNonDirectProxiesDisabled = false;
             break;
         }
     }
 
-    if (allDisabled) {
+    if (allNonDirectProxiesDisabled) {
         LOG((""All proxies are disabled, so trying all again""));
     } else {
         // remove any disabled proxies.
","diff -r 9d9c65dbaf00 -r 7cdc78209472 modules/libpref/init/StaticPrefList.yaml
--- a/modules/libpref/init/StaticPrefList.yaml	Thu Sep 22 08:03:02 2022 +0000
+++ b/modules/libpref/init/StaticPrefList.yaml	Thu Sep 22 08:37:37 2022 +0000
@@ -10926,6 +10926,13 @@
   value: false
   mirror: always
 
+# If all non-direct proxies have failed, we retry all of them in case they
+# are online now.
+- name: network.proxy.retry_failed_proxies
+  type: RelaxedAtomicBool
+  value: true
+  mirror: always
+
 # Some requests during a page load are marked as ""tail"", mainly trackers, but not only.
 # This pref controls whether such requests are put to the tail, behind other requests
 # emerging during page loading process.
diff -r 9d9c65dbaf00 -r 7cdc78209472 netwerk/base/nsProtocolProxyService.cpp
--- a/netwerk/base/nsProtocolProxyService.cpp	Thu Sep 22 08:03:02 2022 +0000
+++ b/netwerk/base/nsProtocolProxyService.cpp	Thu Sep 22 08:37:37 2022 +0000
@@ -2375,7 +2375,8 @@
     }
   }
 
-  if (allNonDirectProxiesDisabled) {
+  if (allNonDirectProxiesDisabled &&
+      StaticPrefs::network_proxy_retry_failed_proxies()) {
     LOG((""All proxies are disabled, so trying all again""));
   } else {
     // remove any disabled proxies.
",1494364,634d9ca93c9491c01d901c53418288bc284567d2,"Bug 1494364 - don't prune proxy if all non-direct proxies are disabled r=bagder

Differential Revision: https://phabricator.services.mozilla.com/D10625",1549678,"Bug 1549678 - Add pref whether to retry failed proxies r=necko-reviewers,kershaw

This is a regression from:
Bug 1494364 - don't prune proxy if all non-direct proxies are disabled

This pref preserves existing behaviour (and regression) but allows users to opt out of this behaviour which might cause slow browsing when the proxies are not responsive.

We might implement a proper fix for this problem in Bug 1791655.

Differential Revision: https://phabricator.services.mozilla.com/D157825",2018-11-05T07:12:00+00:00,"Frequent ""Unable to connect"" when using automatic proxy configuration URL","User Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:62.0) Gecko/20100101 Firefox/62.0
Build ID: 20180906134058

Steps to reproduce:

At work, we have a very large automatic proxy configuration script. It used to work fine in Firefox until several months ago. Now, I may be using Firefox for some time for accessing internal and external web pages and it would suddenly stop loading external (to our network) pages with message ""Unable to connect. Firefox can’t establish a connection to the server at <some external URL>"".

Note 1: All internal web sites still work fine.
Note 2: After I go to Preferences -> Network Proxy -> Settings and change from using ""Automatic proxy configuration URL"" to ""Use system proxy settings"" (which uses the exact same automatic proxy connection URL) or vice versa, it starts working again (for some time). Also, restarting Firefox resolves the issue for a short period too.
Note 3: Same issue with Firefox on Ububtu Linux and Windows.



Actual results:

Firefox was unable to connect to external (to our network) web pages.


Expected results:

External pages should be loaded.",Proxy failover (from .pac) results in slow web browsing experience,"User Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0

Steps to reproduce:

We use a ""proxy.pac"" file which sets a specific proxy ""localhost:3128"" (which is a port forwarded by putty) for specific webpages. 

This proxy is only needed, if user is outside of LAN and only in that case putty is running and the ""localhost:3128"" port is available.

Up to Firefox version 64.0.2 this worked fine: In LAN Proxy ""localhost:3128"" failed, so after first try Firefox switched to DIRECT and worked with very good speed.

But starting with 65.0.0 in that case a delay is added with every network connection. Browsing is very slow now, when the first proxy is not available.

Up to now we did not roll out versions higher than 64.0.2 because of this. But now we have to because of the AddOn issue fixed in version 66.0.4... :(

The proxy.pac looks like this:

function FindProxyForURL(url, host)
{
  var proxy = ""PROXY localhost:3128; DIRECT"";
  var no_proxy = ""DIRECT"";

  if (dnsDomainIs(host, "".xycorp"")
      || shExpMatch(host,""confluence.xycorp.com"")
      || shExpMatch(host,""jira.xycorp.com"")
  {
    return proxy;
  }

  return no_proxy;
}


Actual results:

A delay of ~1..2 seconds is added on every connection. Web browsing feels very slow, if the first proxy configured is not available.


Expected results:

If the first proxy is not available Firefox should use the second proxy (in out case DIRECT) and work fast as usual."
e3640e306c198fecaeb1725ad9810d0d062c82e1,2019-05-14T19:53:00+00:00,"diff -r f37d7d177f79 -r 4de00f3a05ad taskcluster/ci/test/web-platform.yml
--- a/taskcluster/ci/test/web-platform.yml	Fri Apr 05 14:01:53 2019 +0000
+++ b/taskcluster/ci/test/web-platform.yml	Fri Apr 05 13:38:13 2019 +0000
@@ -107,13 +107,11 @@
         by-test-platform:
             android.*: ['mozilla-central', 'try']
             windows10-aarch64/opt: ['try', 'mozilla-central']
-            linux64(?:-pgo|-shippable)?-qr/.*: ['release', 'try']  # skip on integration branches due to high load
             default: built-projects
     tier:
         by-test-platform:
             android.*: 2
             linux64-asan/opt: 2
-            linux64(?:-pgo|-shippable)?-qr/.*: 2  # can't be tier-1 if it's not running on integration branches
             default: default
     mozharness:
         extra-options:
diff -r f37d7d177f79 -r 4de00f3a05ad taskcluster/taskgraph/try_option_syntax.py
--- a/taskcluster/taskgraph/try_option_syntax.py	Fri Apr 05 14:01:53 2019 +0000
+++ b/taskcluster/taskgraph/try_option_syntax.py	Fri Apr 05 13:38:13 2019 +0000
@@ -9,6 +9,7 @@
 import logging
 import re
 import shlex
+from collections import defaultdict
 
 logger = logging.getLogger(__name__)
 
@@ -302,6 +303,21 @@
         self.artifact = options['artifact']
         self.include_nightly = options['include_nightly']
 
+        self.test_tiers = self.generate_test_tiers(full_task_graph)
+
+    def generate_test_tiers(self, full_task_graph):
+        retval = defaultdict(set)
+        for t in full_task_graph.tasks.itervalues():
+            if t.attributes.get('kind') == 'test':
+                try:
+                    tier = t.task['extra']['treeherder']['tier']
+                    name = t.attributes.get('unittest_try_name')
+                    retval[name].add(tier)
+                except KeyError:
+                    pass
+
+        return retval
+
     def parse_jobs(self, jobs_arg):
         if not jobs_arg or jobs_arg == ['none']:
             return []  # default is `-j none`
@@ -582,10 +598,27 @@
                 return False
             if 'only_chunks' in test and attr('test_chunk') not in test['only_chunks']:
                 return False
+            tier = task.task['extra']['treeherder']['tier']
             if 'platforms' in test:
                 platform = attr('test_platform', '').split('/')[0]
                 # Platforms can be forced by syntax like ""-u xpcshell[Windows 8]""
                 return platform in test['platforms']
+            elif tier != 1:
+                # Require tier 2/3 tests to be specifically enabled if there
+                # are other platforms that run this test suite as tier 1
+                name = attr('unittest_try_name')
+                test_tiers = self.test_tiers.get(name)
+                if 1 not in test_tiers:
+                    logger.debug(""not skipping tier {} test without explicit inclusion: {}; ""
+                                 ""it is configured to run on tiers {}""
+                                 .format(tier, task.label, test_tiers))
+                    return True
+                else:
+                    logger.debug(
+                        ""skipping mixed tier {} (of {}) test without explicit inclusion: {}""
+                        .format(tier, test_tiers, task.label))
+                    return False
+
             elif run_by_default:
                 return check_run_on_projects()
             else:
","diff -r 0d0a4250902b -r e3640e306c19 taskcluster/taskgraph/try_option_syntax.py
--- a/taskcluster/taskgraph/try_option_syntax.py	Tue May 14 19:32:27 2019 +0000
+++ b/taskcluster/taskgraph/try_option_syntax.py	Tue May 14 19:53:44 2019 +0000
@@ -602,6 +602,8 @@
                 return False
             tier = task.task['extra']['treeherder']['tier']
             if 'platforms' in test:
+                if 'all' in test['platforms']:
+                    return True
                 platform = attr('test_platform', '').split('/')[0]
                 # Platforms can be forced by syntax like ""-u xpcshell[Windows 8]""
                 return platform in test['platforms']
",1531032,4de00f3a05ad77e7f9c30a49988a7ee088d6e2ff,"Bug 1531032: disable tier2 jobs from running with try syntax unless specifically enabled. r=tomprince

Enable WPT-reftests as tier1

Differential Revision: https://phabricator.services.mozilla.com/D21786",1550866,"Bug 1550866 - Support try syntax '-p foo,bar,bob -u all[all]' to run Tier 2 tests on all platforms specified r=catlee

Differential Revision: https://phabricator.services.mozilla.com/D30720",2019-04-05T13:38:00+00:00,try syntax shouldn't trigger tier 2 jobs by default,"On try when someone pushes with '-p linux64', we end up scheduling all the linux64-qr tests, even though those aren't run on autoland/inbound by default.

I'd like to change the try syntax scheduling so that tier 2 jobs aren't scheduled unless specifically requested. For example, for linux64-qr tests, this would look something like:

`try: -b o -p linux64 -u web-platform-tests[linux64-qr]`",Make it more pleasant to override the Tier 2 doesn't get tests run behavior,"Before Bug 1531032 if you had the try syntax ""-p foo,bar,baz,jim -u all"" and some of foo and bar were Tier 2 tests, they would be run.  We changed that in Bug 1531032 to make it so you need to specify the platform manually: ""-p foo,bar,baz,jim -u all[foo.bar]""

Fair enough.

But it's kind of annoying to repeat all the platform names, especially when they're long like win32-mingwclang,win64-mingwclang.

Can we have a shortcut?  Like -u ""all[all]""?"
9e5d3e59a35e2e50bf3b684368c636d2d833c920,2019-05-17T19:38:00+00:00,"diff -r 13d43fe66cae -r 2e773f4f69c4 taskcluster/ci/config.yml
--- a/taskcluster/ci/config.yml	Wed May 01 18:16:55 2019 +0000
+++ b/taskcluster/ci/config.yml	Tue May 14 18:33:12 2019 +0000
@@ -328,6 +328,11 @@
             implementation: generic-worker
             os: macosx
             worker-type: 'gecko-{alias}'
+        t-osx-1014:
+            provisioner: releng-hardware
+            implementation: generic-worker
+            os: macosx
+            worker-type: 'gecko-{alias}'
         t-linux-xlarge-pgo:
             provisioner: aws-provisioner-v1
             implementation: docker-worker
@@ -344,6 +349,14 @@
                 by-level:
                     '3': 'gecko-{level}-t-osx-1010'
                     default: 'gecko-t-osx-1010'
+        t-osx-1014-pgo:
+            provisioner: releng-hardware
+            implementation: generic-worker
+            os: macosx
+            worker-type:
+                by-level:
+                    '3': 'gecko-{level}-t-osx-1014'
+                    default: 'gecko-t-osx-1014'
         t-win10-64(|-gpu):
             provisioner: aws-provisioner-v1
             implementation: generic-worker
diff -r 13d43fe66cae -r 2e773f4f69c4 taskcluster/ci/source-test/python.yml
--- a/taskcluster/ci/source-test/python.yml	Wed May 01 18:16:55 2019 +0000
+++ b/taskcluster/ci/source-test/python.yml	Tue May 14 18:33:12 2019 +0000
@@ -8,7 +8,7 @@
     worker-type:
         by-platform:
             linux64.*: t-linux-xlarge
-            macosx64.*: t-osx-1010
+            macosx1010-64.*: t-osx-1010
             windows10-64.*: t-win10-64
     worker:
         by-platform:
@@ -102,7 +102,7 @@
     description: testing/mozbase unit tests
     platform:
         - linux64/opt
-        - macosx64/opt
+        - macosx1010-64/opt
         - windows10-64/opt
     python-version: [2, 3]
     treeherder:
@@ -132,7 +132,7 @@
     description: python/mozlint unit tests
     platform:
         - linux64/opt
-        - macosx64/opt
+        - macosx1010-64/opt
         - windows10-64/opt
     python-version: [2]
     treeherder:
diff -r 13d43fe66cae -r 2e773f4f69c4 taskcluster/ci/test/compiled.yml
--- a/taskcluster/ci/test/compiled.yml	Wed May 01 18:16:55 2019 +0000
+++ b/taskcluster/ci/test/compiled.yml	Tue May 14 18:33:12 2019 +0000
@@ -104,17 +104,15 @@
     chunks:
         by-test-platform:
             windows.*: 1
-            windows10-64-ccov/debug: 6
-            macosx.*: 1
-            macosx64/debug: 3
-            macosx64-ccov/debug: 4
+            macosx.*/opt: 1
+            macosx.*/debug: 3
             android-em-4.3-arm7-api-15/debug: 20
             android.*: 10
             default: 6
     max-run-time:
         by-test-platform:
             windows10-64-ccov/debug: 7200
-            macosx64-ccov/debug: 7200
+            macosx.*-ccov/debug: 7200
             default: 3600
     mozharness:
         chunked:
diff -r 13d43fe66cae -r 2e773f4f69c4 taskcluster/ci/test/misc.yml
--- a/taskcluster/ci/test/misc.yml	Wed May 01 18:16:55 2019 +0000
+++ b/taskcluster/ci/test/misc.yml	Tue May 14 18:33:12 2019 +0000
@@ -97,7 +97,7 @@
             .*-ccov/.*: []
             .*-asan/.*: []
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
-            macosx64(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-qr)?/opt: ['mozilla-central', 'try']
             # do not run on beta or release: usually just confirms earlier results
             default: ['trunk', 'try']
     tier: 2
@@ -145,7 +145,7 @@
             .*-ccov/.*: []
             .*-asan/.*: []
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
-            macosx64(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-qr)?/opt: ['mozilla-central', 'try']
             # do not run on beta or release: usually just confirms earlier results
             default: ['trunk', 'try']
     tier: 2
diff -r 13d43fe66cae -r 2e773f4f69c4 taskcluster/ci/test/mochitest.yml
--- a/taskcluster/ci/test/mochitest.yml	Wed May 01 18:16:55 2019 +0000
+++ b/taskcluster/ci/test/mochitest.yml	Tue May 14 18:33:12 2019 +0000
@@ -71,7 +71,7 @@
             linux64-asan/opt: 10
             linux64-.*cov/opt: 10
             windows10-64-ccov/debug: 10
-            macosx64-ccov/debug: 10
+            macosx.*64-ccov/debug: 10
             default: 5
     e10s:
         by-test-platform:
@@ -121,14 +121,14 @@
         by-test-platform:
             linux.*/debug: 16
             linux64-asan/opt: 16
-            macosx64/debug: 12
+            macosx.*64/debug: 12
             default: 7
     max-run-time:
         by-test-platform:
             linux64-.*cov/opt: 7200
             windows10-64-ccov/debug: 7200
             windows10-aarch64/*: 7200
-            macosx64-ccov/debug: 10800
+            macosx.*64-ccov/debug: 10800
             linux.*/debug: 5400
             default: 3600
     mozharness:
@@ -166,7 +166,7 @@
             windows10-64(?:-pgo|-shippable)(?:-qr)?/opt: ['mozilla-central', 'integration']
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central']
             linux64-(?:pgo|shippable)(?:-qr)?/opt: ['mozilla-central', 'integration']
-            macosx64-shippable/opt: ['mozilla-central', 'integration']
+            macosx.*64-shippable/opt: ['mozilla-central', 'integration']
             default: []
     max-run-time: 3600
     mozharness:
@@ -221,14 +221,14 @@
     max-run-time:
         by-test-platform:
             windows10-64-ccov/debug: 7200
-            macosx64-ccov/debug: 9000
+            macosx.*64-ccov/debug: 9000
             linux64-ccov/debug: 7200
             default: 5400
     chunks:
         by-test-platform:
             .*-ccov/debug: 16
             linux64/debug: 12
-            macosx64/debug: 8
+            macosx.*64/debug: 8
             .*-asan/opt: 8
             default: 5
     mozharness:
@@ -252,8 +252,8 @@
     allow-software-gl-layers: false
     run-on-projects:
         by-test-platform:
-            macosx64/opt: ['mozilla-central', 'try']
-            macosx64.*/opt: ['trunk', 'try']
+            macosx.*64/opt: ['mozilla-central', 'try']
+            macosx.*64.*/opt: ['trunk', 'try']
             default: []
 
 mochitest-gpu:
@@ -291,7 +291,7 @@
     max-run-time:
         by-test-platform:
             windows10-64-ccov/debug: 7200
-            macosx64-ccov/debug: 7200
+            macosx.*64-ccov/debug: 7200
             default: 5400
     run-on-projects:
         by-test-platform:
@@ -317,8 +317,8 @@
         by-test-platform:
             android-em-7.*: 1
             windows10-64.*: 1
-            macosx64.*/opt: 2
-            macosx64.*/debug: 4
+            macosx.*64.*/opt: 2
+            macosx.*64.*/debug: 4
             windows10-aarch64/.*: 2
             windows7-32-shippable/.*: 2
             linux64(-shippable|-devedition|-.*qr)/opt: 2
@@ -328,7 +328,7 @@
         chunked:
             by-test-platform:
                 android.*: false
-                macosx64.*: false
+                macosx.*64.*: false
                 windows10-64.*: false
                 default: true
     tier:
@@ -397,7 +397,7 @@
     max-run-time:
         by-test-platform:
             windows.*: 5400
-            macosx64-ccov/debug: 7200
+            macosx.*64-ccov/debug: 7200
             default: 3600
     # Bug 1296733: llvmpipe with mesa 9.2.1 lacks thread safety
     allow-software-gl-layers: false
diff -r 13d43fe66cae -r 2e773f4f69c4 taskcluster/ci/test/raptor.yml
--- a/taskcluster/ci/test/raptor.yml	Wed May 01 18:16:55 2019 +0000
+++ b/taskcluster/ci/test/raptor.yml	Tue May 14 18:33:12 2019 +0000
@@ -20,7 +20,7 @@
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
             android-hw-.*-api-16/opt: ['try']
             android-hw-.*-aarch64/opt: ['try']
-            macosx64(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-qr)?/opt: ['mozilla-central', 'try']
             default: ['try', 'trunk', 'mozilla-beta']
     tier:
         by-test-platform:
diff -r 13d43fe66cae -r 2e773f4f69c4 taskcluster/ci/test/reftest.yml
--- a/taskcluster/ci/test/reftest.yml	Wed May 01 18:16:55 2019 +0000
+++ b/taskcluster/ci/test/reftest.yml	Tue May 14 18:33:12 2019 +0000
@@ -91,13 +91,13 @@
             linux64-qr/debug: 5
             linux32/debug: 5
             linux64/debug: 5
-            macosx64-ccov/debug: 5
+            macosx.*64-ccov/debug: 5
             default: 3
     max-run-time:
         by-test-platform:
             android-em.*: 7200
             windows10-64-ccov/debug: 7200
-            macosx64-ccov/debug: 7200
+            macosx.*64-ccov/debug: 7200
             default: 3600
     tier:
         by-test-platform:
@@ -118,9 +118,9 @@
             android-em-4.*: 28
             android-em-7.*: 5
             linux64(-shippable|-devedition|-qr)?/opt: 5
-            macosx64.*/opt: 2
-            macosx64.*/debug: 3
-            macosx64-ccov/debug: 6
+            macosx101.*-64/opt: 2
+            macosx101.*-64/debug: 3
+            macosx.*64-ccov/debug: 6
             windows.*/opt: 2
             windows.*/debug: 4
             windows10-64-ccov/debug: 6
@@ -134,13 +134,13 @@
             android-em.*: 7200
             windows10-64-ccov/debug: 5400
             windows10-64-asan/opt: 5400
-            macosx64-ccov/debug: 5400
+            macosx.*64-ccov/debug: 5400
             default: 3600
     mozharness:
         chunked:
             by-test-platform:
                 android-em.*: false
-                macosx64/opt: false
+                macosx.*64/opt: false
                 windows10-64.*/opt: false
                 default: true
     tier:
diff -r 13d43fe66cae -r 2e773f4f69c4 taskcluster/ci/test/talos.yml
--- a/taskcluster/ci/test/talos.yml	Wed May 01 18:16:55 2019 +0000
+++ b/taskcluster/ci/test/talos.yml	Tue May 14 18:33:12 2019 +0000
@@ -41,7 +41,7 @@
             .*-qr/.*: []  # this test is not useful with webrender
             (?:windows10-64|windows7-32|linux64)/opt: ['mozilla-central', 'try']
             windows10-aarch64/opt: ['mozilla-central', 'try']
-            macosx64(?:-shippable)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-shippable)?/opt: ['mozilla-central', 'try']
             default: ['mozilla-beta', 'trunk', 'try']
     tier:
         by-test-platform:
@@ -63,7 +63,7 @@
             windows10-64-ccov/.*: ['try']
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
             windows10-aarch64/opt: ['mozilla-central', 'try']
-            macosx64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
             default: ['mozilla-beta', 'trunk', 'try']
     max-run-time: 1200
     mozharness:
@@ -81,7 +81,7 @@
             windows10-64-ccov/.*: ['try']
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
             windows10-aarch64/opt: ['try']  # Bug 1544360
-            macosx64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
             default: ['mozilla-beta', 'trunk', 'try']
     mozharness:
         extra-options:
@@ -97,7 +97,7 @@
             windows10-64-ccov/.*: ['try']
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
             windows10-aarch64/opt: ['mozilla-central', 'try']
-            macosx64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
             default: ['mozilla-beta', 'trunk', 'try']
     max-run-time: 2100
     mozharness:
@@ -113,7 +113,7 @@
         by-test-platform:
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
             windows10-aarch64/opt: ['mozilla-central', 'try']
-            macosx64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
             default: ['mozilla-central', 'try']
     max-run-time: 1800
     mozharness:
@@ -130,7 +130,7 @@
             windows10-64-ccov/.*: ['try']
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
             windows10-aarch64/opt: ['mozilla-central', 'try']
-            macosx64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
             default: ['mozilla-beta', 'trunk', 'try']
     max-run-time:
         by-test-platform:
@@ -150,7 +150,7 @@
             windows10-64-ccov/.*: ['try']
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
             windows10-aarch64/opt: ['mozilla-central', 'try']
-            macosx64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
             default: ['mozilla-beta', 'trunk', 'try']
     max-run-time: 900
     mozharness:
@@ -168,7 +168,7 @@
             windows10-64-ux/opt: ['try', 'mozilla-central']
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
             windows10-aarch64/opt: ['mozilla-central', 'try']
-            macosx64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
             default: ['mozilla-beta', 'trunk', 'try']
     max-run-time:
         by-test-platform:
@@ -188,7 +188,7 @@
             windows10-64-ccov/.*: ['try']
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
             windows10-aarch64/opt: ['mozilla-central', 'try']
-            macosx64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
             default: ['mozilla-beta', 'trunk', 'try']
     mozharness:
         extra-options:
@@ -206,7 +206,7 @@
         by-test-platform:
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
             windows10-aarch64/opt: ['mozilla-central', 'try']
-            macosx64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
             default: ['mozilla-beta', 'trunk', 'try']
     mozharness:
         extra-options:
@@ -224,7 +224,7 @@
         by-test-platform:
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
             windows10-aarch64/opt: ['mozilla-central', 'try']
-            macosx64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
             default: ['mozilla-beta', 'trunk', 'try']
     max-run-time:
         by-test-platform:
@@ -242,7 +242,7 @@
         by-test-platform:
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
             windows10-aarch64/opt: ['mozilla-central', 'try']
-            macosx64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
             default: ['mozilla-central', 'try']
     max-run-time: 3600
     tier:
@@ -265,7 +265,7 @@
             windows10-64-ccov/.*: ['try']
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
             windows10-aarch64/opt: ['mozilla-central', 'try']
-            macosx64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
             default: ['mozilla-beta', 'trunk', 'try']
     max-run-time: 1500
     mozharness:
@@ -282,7 +282,7 @@
             windows10-64-ccov/.*: ['try']
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
             windows10-aarch64/opt: ['mozilla-central', 'try']
-            macosx64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
             default: ['mozilla-central', 'try']
     max-run-time: 1500
     mozharness:
@@ -299,7 +299,7 @@
             windows10-64-ccov/.*: ['try']
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
             windows10-aarch64/opt: ['try']
-            macosx64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
             default: ['trunk', 'try']
     max-run-time: 1200
     mozharness:
@@ -316,7 +316,7 @@
             windows10-64-ccov/.*: ['try']
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
             windows10-aarch64/opt: ['mozilla-central', 'try']
-            macosx64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
             default: ['trunk', 'try']
     max-run-time: 1200
     mozharness:
@@ -331,7 +331,7 @@
         by-test-platform:
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
             windows10-aarch64/opt: ['mozilla-central', 'try']
-            macosx64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
             default: ['mozilla-beta', 'trunk', 'try']
     max-run-time: 1500
     mozharness:
@@ -348,7 +348,7 @@
             windows10-64-ccov/.*: ['try']
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
             windows10-aarch64/opt: ['mozilla-central', 'try']
-            macosx64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
             default: ['mozilla-beta', 'trunk', 'try']
     max-run-time: 1800
     mozharness:
@@ -365,7 +365,7 @@
             windows10-64-ccov/.*: ['try']
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
             windows10-aarch64/opt: ['mozilla-central', 'try']
-            macosx64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
             default: ['mozilla-beta', 'trunk', 'try']
     max-run-time: 1800
     mozharness:
@@ -382,7 +382,7 @@
             windows10-64-ccov/.*: ['try']
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
             windows10-aarch64/opt: ['mozilla-central', 'try']
-            macosx64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
             default: ['trunk', 'try']
     max-run-time: 1200
     mozharness:
@@ -400,7 +400,7 @@
             windows10-64-ccov/.*: ['try']
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
             windows10-aarch64/opt: ['mozilla-central', 'try']
-            macosx64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
             default: ['mozilla-beta', 'trunk', 'try']
     mozharness:
         extra-options:
@@ -417,7 +417,7 @@
             linux64-ccov/.*: ['try']  # Bug 1407593
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
             windows10-aarch64/opt: ['mozilla-central', 'try']
-            macosx64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-shippable)?(?:-qr)?/opt: ['mozilla-central', 'try']
             default: ['mozilla-beta', 'trunk', 'try']
     mozharness:
         extra-options:
diff -r 13d43fe66cae -r 2e773f4f69c4 taskcluster/ci/test/test-platforms.yml
--- a/taskcluster/ci/test/test-platforms.yml	Wed May 01 18:16:55 2019 +0000
+++ b/taskcluster/ci/test/test-platforms.yml	Tue May 14 18:33:12 2019 +0000
@@ -276,13 +276,51 @@
 ##
 # MacOS X platforms (matching /macosx.*/)
 
-macosx64/debug:
+# macosx1014-64-shippable/opt:
+#    build-platform: macosx64-shippable/opt
+#    test-sets:
+#        - macosx1014-64-tests
+#        - macosx64-talos
+#        - desktop-screenshot-capture
+#        - awsy
+#        - raptor-chromium
+#        - raptor-firefox
+#        - raptor-profiling
+#        - marionette-media-tests
+
+# macosx1014-64/debug:
+#    build-platform: macosx64-shippable/opt
+#    test-sets:
+#        - macosx1014-64-tests
+#        - marionette-media-tests
+
+# macosx1014-64-devedition/opt:
+#    build-platform: macosx64-devedition-nightly/opt
+#    test-sets:
+#        - macosx1014-64-tests
+
+# macosx1014-64-shippable-qr/opt:
+#    build-platform: macosx64-shippable/opt
+#    test-sets:
+#        - macosx1014-64-qr-tests
+
+# macosx1014-64-qr/debug:
+#    build-platform: macosx64/debug
+#    test-sets:
+#        - macosx1014-64-qr-tests
+
+# macosx1014-64-ccov/debug:
+#    build-platform: macosx64-ccov/debug
+#    test-sets:
+#        - macosx1014-64-tests
+
+macosx1010-64/debug:
     build-platform: macosx64/debug
     test-sets:
         - macosx64-tests
         - marionette-media-tests
 
-macosx64-shippable/opt:
+macosx1010-64-shippable/opt:
     build-platform: macosx64-shippable/opt
     test-sets:
         - macosx64-talos
@@ -293,22 +331,23 @@
         - raptor-firefox
         - raptor-profiling
         - marionette-media-tests
-macosx64-devedition/opt:
+
+macosx1010-64-devedition/opt:
     build-platform: macosx64-devedition-nightly/opt
     test-sets:
         - macosx64-tests
 
-macosx64-shippable-qr/opt:
+macosx1010-64-shippable-qr/opt:
     build-platform: macosx64-shippable/opt
     test-sets:
         - macosx64-qr-tests
 
-macosx64-qr/debug:
+macosx1010-64-qr/debug:
     build-platform: macosx64/debug
     test-sets:
         - macosx64-qr-tests
 
-macosx64-ccov/debug:
+macosx1010-64-ccov/debug:
     build-platform: macosx64-ccov/debug
     test-sets:
         - macosx64-tests
diff -r 13d43fe66cae -r 2e773f4f69c4 taskcluster/ci/test/test-sets.yml
--- a/taskcluster/ci/test/test-sets.yml	Wed May 01 18:16:55 2019 +0000
+++ b/taskcluster/ci/test/test-sets.yml	Tue May 14 18:33:12 2019 +0000
@@ -308,6 +308,41 @@
 marionette-media-tests:
     - marionette-media
 
+# macosx1014-64-tests:
+#    - cppunit
+#    - crashtest
+#    - firefox-ui-functional-local
+#    - firefox-ui-functional-remote
+#    - gtest
+#    - jittest
+#    - jsreftest
+#    - marionette
+#    - mochitest
+#    - mochitest-a11y
+#    - mochitest-browser-chrome
+#    - mochitest-chrome
+#    - mochitest-devtools-chrome
+#    - mochitest-devtools-webreplay
+#    - mochitest-gpu
+#    - mochitest-media
+#    - mochitest-webgl1-core
+#    - mochitest-webgl1-ext
+#    - mochitest-webgl2-core
+#     - mochitest-webgl2-ext test  # timeouts
+#    - reftest
+#    - telemetry-tests-client
+#    - test-verify
+#    - test-verify-gpu
+#    - test-verify-wpt
+#    - web-platform-tests
+#    - web-platform-tests-reftests
+#    - web-platform-tests-wdspec
+#    - xpcshell
+
+# macosx1014-64-qr-tests:
+#    - crashtest
+#    - reftest
+
 macosx64-tests:
     - cppunit
     - crashtest
diff -r 13d43fe66cae -r 2e773f4f69c4 taskcluster/ci/test/web-platform.yml
--- a/taskcluster/ci/test/web-platform.yml	Wed May 01 18:16:55 2019 +0000
+++ b/taskcluster/ci/test/web-platform.yml	Tue May 14 18:33:12 2019 +0000
@@ -42,16 +42,14 @@
         by-test-platform:
             android.*: 18
             linux.*/debug: 18
-            macosx64.*/opt: 8
-            macosx64/debug: 16
+            macosx*/opt: 8
+            macosx.*/debug: 16
             windows10.*/debug: 18
             windows10-aarch64/opt: 12
-            macosx64-ccov/debug: 24
             default: 12
     max-run-time:
         by-test-platform:
-            linux64-ccov/debug: 10800
-            windows10-64-ccov/debug: 10800
+            .*-ccov/debug: 10800
             default: 7200
     e10s:
         by-test-platform:
@@ -82,8 +80,8 @@
     treeherder-symbol: W(wptH)
     chunks:
         by-test-platform:
-            macosx64.*/opt: 8
-            macosx64/debug: 16
+            macosx.*/opt: 8
+            macosx.*/debug: 16
     e10s:
         by-test-platform:
             macosx.*: true
@@ -114,7 +112,7 @@
             .*-ccov/debug: 8
             linux64(-qr|-asan)/.*: 6
             linux64(-shippable|-devedition)?/opt: 3
-            macosx64/debug: 6
+            macosx10(10|14)-64/debug: 6
             windows.*-(32|64)(-qr)?/debug: 5
             android.*: 6
             default: 4
@@ -169,8 +167,7 @@
     treeherder-symbol: W(Wd)
     chunks:
         by-test-platform:
-            linux64-ccov/debug: 4
-            windows10-64-ccov/debug: 4
+            .*-ccov/debug: 4
             default: 2
     mozharness:
         extra-options:
@@ -221,7 +218,7 @@
             .*-ccov/.*: []
             .*-asan/.*: []
             (?:windows10-64|windows7-32|linux64)(?:-qr)?/opt: ['mozilla-central', 'try']
-            macosx64(?:-qr)?/opt: ['mozilla-central', 'try']
+            macosx.*64(?:-qr)?/opt: ['mozilla-central', 'try']
             # do not run on beta or release: usually just confirms earlier results
             default: ['trunk', 'try']
     tier: 2
diff -r 13d43fe66cae -r 2e773f4f69c4 taskcluster/ci/test/xpcshell.yml
--- a/taskcluster/ci/test/xpcshell.yml	Wed May 01 18:16:55 2019 +0000
+++ b/taskcluster/ci/test/xpcshell.yml	Tue May 14 18:33:12 2019 +0000
@@ -47,10 +47,9 @@
         by-test-platform:
             android-em-4.3-arm7-api-16/.*: 8
             android-em-7.*: 3
-            macosx64-ccov/debug: 8
-            macosx.*/.*: 2
+            macosx10(10|14)-64/.*: 2
             linux64(-qr)?/debug: 6
-            (linux.*|windows.*)-ccov/debug: 6
+            .*-ccov/debug: 6
             windows(7-32|10-64)(-shippable|-devedition|-asan|.*-qr)?/.*: 2
             windows10-aarch64/opt: 3
             default: 5
diff -r 13d43fe66cae -r 2e773f4f69c4 taskcluster/taskgraph/transforms/job/mozharness_test.py
--- a/taskcluster/taskgraph/transforms/job/mozharness_test.py	Wed May 01 18:16:55 2019 +0000
+++ b/taskcluster/taskgraph/transforms/job/mozharness_test.py	Tue May 14 18:33:12 2019 +0000
@@ -312,6 +312,12 @@
             'bash',
             ""./{}"".format(bitbar_script)
         ]
+    elif is_macosx and 'macosx1014-64' in test['test-platform']:
+        mh_command = [
+            '/usr/local/bin/python2',
+            '-u',
+            'mozharness/scripts/' + mozharness['script']
+        ]
     else:
         # is_linux or is_macosx
         mh_command = [
diff -r 13d43fe66cae -r 2e773f4f69c4 taskcluster/taskgraph/transforms/tests.py
--- a/taskcluster/taskgraph/transforms/tests.py	Wed May 01 18:16:55 2019 +0000
+++ b/taskcluster/taskgraph/transforms/tests.py	Tue May 14 18:33:12 2019 +0000
@@ -145,7 +145,8 @@
 
 # os x worker types keyed by test-platform
 MACOSX_WORKER_TYPES = {
-    'macosx64': 't-osx-1010',
+    'macosx1010-64': 't-osx-1010',
+    'macosx1014-64': 'releng-hardware/gecko-t-osx-1014',
 }
 
 
@@ -691,9 +692,12 @@
         # treeherder.
         'linux64-asan/opt': 'linux64/asan',
         'linux64-pgo/opt': 'linux64/pgo',
-        'macosx64/debug': 'osx-10-10/debug',
-        'macosx64/opt': 'osx-10-10/opt',
-        'macosx64-shippable/opt': 'osx-10-10-shippable/opt',
+        'macosx1010-64/debug': 'osx-10-10/debug',
+        'macosx1010-64/opt': 'osx-10-10/opt',
+        'macosx1010-64-shippable/opt': 'osx-10-10-shippable/opt',
+        'macosx1014-64/debug': 'osx-10-14/debug',
+        'macosx1014-64/opt': 'osx-10-14/opt',
+        'macosx1014-64-shippable/opt': 'osx-10-14-shippable/opt',
         'win64-asan/opt': 'windows10-64/asan',
         'win64-aarch64/opt': 'windows10-aarch64/opt',
         'win32-pgo/opt': 'windows7-32/pgo',
@@ -778,14 +782,22 @@
                                          'windows10-64-qr/debug',
                                          'windows10-64-pgo-qr/opt',
                                          'windows10-64-shippable-qr/opt',
-                                         'macosx64/opt',
-                                         'macosx64/debug',
-                                         'macosx64-nightly/opt',
-                                         'macosx64-shippable/opt',
-                                         'macosx64-devedition/opt',
-                                         'macosx64-qr/opt',
-                                         'macosx64-shippable-qr/opt',
-                                         'macosx64-qr/debug',
+                                         'macosx1010-64/opt',
+                                         'macosx1010-64/debug',
+                                         'macosx1010-64-nightly/opt',
+                                         'macosx1010-64-shippable/opt',
+                                         'macosx1010-64-devedition/opt',
+                                         'macosx1010-64-qr/opt',
+                                         'macosx1010-64-shippable-qr/opt',
+                                         'macosx1010-64-qr/debug',
+                                         'macosx1014-64/opt',
+                                         'macosx1014-64/debug',
+                                         'macosx1014-64-nightly/opt',
+                                         'macosx1014-64-shippable/opt',
+                                         'macosx1014-64-devedition/opt',
+                                         'macosx1014-64-qr/opt',
+                                         'macosx1014-64-shippable-qr/opt',
+                                         'macosx1014-64-qr/debug',
                                          'android-em-4.3-arm7-api-16/opt',
                                          'android-em-4.3-arm7-api-16/debug',
                                          'android-em-4.3-arm7-api-16/pgo',
@@ -1168,8 +1180,10 @@
         if test.get('worker-type'):
             # This test already has its worker type defined, so just use that (yields below)
             pass
-        elif test_platform.startswith('macosx'):
-            test['worker-type'] = MACOSX_WORKER_TYPES['macosx64']
+        elif test_platform.startswith('macosx1010-64'):
+            test['worker-type'] = MACOSX_WORKER_TYPES['macosx1010-64']
+        elif test_platform.startswith('macosx1014-64'):
+            test['worker-type'] = MACOSX_WORKER_TYPES['macosx1014-64']
         elif test_platform.startswith('win'):
             # figure out what platform the job needs to run on
             if test['virtualization'] == 'hardware':
diff -r 13d43fe66cae -r 2e773f4f69c4 taskcluster/taskgraph/try_option_syntax.py
--- a/taskcluster/taskgraph/try_option_syntax.py	Wed May 01 18:16:55 2019 +0000
+++ b/taskcluster/taskgraph/try_option_syntax.py	Tue May 14 18:33:12 2019 +0000
@@ -133,7 +133,8 @@
     'Android 7.0 Moto G5 32bit': ['android-hw-g5-7.0-arm7-api-16'],
     'Android 8.0 Google Pixel 2 32bit': ['android-hw-p2-8.0-arm7-api-16'],
     'Android 8.0 Google Pixel 2 64bit': ['android-hw-p2-8.0-android-aarch64'],
-    '10.10': ['macosx64'],
+    '10.10': ['macosx1010-64'],
+    '10.14': ['macosx1014-64'],
     # other commonly-used substrings for platforms not yet supported with
     # in-tree taskgraphs:
     # '10.10.5': [..TODO..],
diff -r 13d43fe66cae -r 2e773f4f69c4 taskcluster/taskgraph/util/seta.py
--- a/taskcluster/taskgraph/util/seta.py	Wed May 01 18:16:55 2019 +0000
+++ b/taskcluster/taskgraph/util/seta.py	Tue May 14 18:33:12 2019 +0000
@@ -101,8 +101,8 @@
                 'test-linux64-pgo/opt': 'test-linux64-shippable/opt',
                 'test-linux64-pgo-qr/opt': 'test-linux64-shippable-qr/opt',
                 'test-linux64-qr/opt': 'test-linux64-shippable-qr/opt',
-                'test-macosx64/opt': 'test-macosx64-shippable/opt',
-                'test-macosx64-qr/opt': 'test-macosx64-shippable-qr',
+                'test-macosx64/opt': 'test-macosx1010-64-shippable/opt',
+                'test-macosx64-qr/opt': 'test-macosx1010-64-shippable-qr',
                 'test-windows7-32/opt': 'test-windows7-32-shippable/opt',
                 'test-windows7-32-pgo/opt': 'test-windows7-32-shippable/opt',
                 'test-windows10-64/opt': 'test-windows10-64-shippable/opt',
diff -r 13d43fe66cae -r 2e773f4f69c4 taskcluster/taskgraph/util/workertypes.py
--- a/taskcluster/taskgraph/util/workertypes.py	Wed May 01 18:16:55 2019 +0000
+++ b/taskcluster/taskgraph/util/workertypes.py	Tue May 14 18:33:12 2019 +0000
@@ -26,6 +26,7 @@
     ""scriptworker-prov-v1/shipit-dev"": ('shipit', None),
     ""scriptworker-prov-v1/treescript-v1"": ('treescript', None),
     'terraform-packet/gecko-t-linux': ('docker-worker', 'linux'),
+    'releng-hardware/gecko-t-osx-1014': ('generic-worker', 'macosx'),
 }
 
 
","diff -r 67b8391890d0 -r 9e5d3e59a35e taskcluster/ci/test/compiled.yml
--- a/taskcluster/ci/test/compiled.yml	Fri May 17 19:07:56 2019 +0000
+++ b/taskcluster/ci/test/compiled.yml	Fri May 17 19:38:05 2019 +0000
@@ -103,6 +103,7 @@
     chunks:
         by-test-platform:
             windows.*: 1
+            windows10-64-ccov/debug: 6
             macosx.*/opt: 1
             macosx.*/debug: 3
             android-em-4.3-arm7-api-15/debug: 20
",1550826,2e773f4f69c468c09e84f87c12a093c6da9d0dfd,"Bug 1550826 - add initial support for osx mojave 10.14 to our CI. r=ahal

add initial support for osx mojave 10.14 to our CI.

Differential Revision: https://phabricator.services.mozilla.com/D30795",1552047,"Bug 1552047 - Perma Windows 10 x64 CCov debug jittest Max run time exceeded. r=gbrown

Perma Windows 10 x64 CCov debug jittest Max run time exceeded

Differential Revision: https://phabricator.services.mozilla.com/D31673",2019-05-14T18:33:00+00:00,add initial support for osx mojave 10.14 to our CI,this bug is to get initial support for the ability to run our tests on osx 10.14,Perma Windows 10 x64 CCov debug jittest Max run time exceeded,"Bug 1550826 changed the test chunks for Windows 10 x64 CCov debug jittest from 6 to 1. Now it is perma-fail.

https://treeherder.mozilla.org/logviewer.html#?job_id=246562851&repo=mozilla-central"
0d5852b71d695551e90747e4efa096632fd24212,2019-05-22T15:59:00+00:00,"diff -r a25b553e6824 -r c6ab5b9a7c07 js/public/TraceLoggerAPI.h
--- a/js/public/TraceLoggerAPI.h	Tue May 21 16:31:51 2019 +0000
+++ b/js/public/TraceLoggerAPI.h	Tue May 21 15:25:32 2019 +0000
@@ -148,6 +148,12 @@
 // Clear and free any event data that was recorded by the trace logger.
 extern JS_PUBLIC_API void ResetTraceLogger(void);
 
+// Spew trace logger statistics.
+extern JS_PUBLIC_API void SpewTraceLoggerThread(JSContext* cx);
+
+// Spew trace logger statistics.
+extern JS_PUBLIC_API void SpewTraceLoggerForCurrentProcess();
+
 #else
 // Define empty inline functions for when trace logging compilation is not
 // enabled.  TraceLogging.cpp will not be built in that case so we need to
diff -r a25b553e6824 -r c6ab5b9a7c07 js/src/jit/JitSpewer.cpp
--- a/js/src/jit/JitSpewer.cpp	Tue May 21 16:31:51 2019 +0000
+++ b/js/src/jit/JitSpewer.cpp	Tue May 21 15:25:32 2019 +0000
@@ -382,6 +382,7 @@
       ""  trackopts-ext Encoding information about optimization tracking\n""
       ""  dump-mir-expr Dump the MIR expressions\n""
       ""  cfg           Control flow graph generation\n""
+      ""  scriptstats   Tracelogger summary stats\n""
       ""  all           Everything\n""
       ""\n""
       ""  bl-aborts     Baseline compiler abort messages\n""
@@ -485,6 +486,8 @@
       EnableChannel(JitSpew_MIRExpressions);
     } else if (IsFlag(found, ""cfg"")) {
       EnableChannel(JitSpew_CFG);
+    } else if (IsFlag(found, ""scriptstats"")) {
+      EnableChannel(JitSpew_ScriptStats);
     } else if (IsFlag(found, ""all"")) {
       LoggingBits = uint64_t(-1);
     } else if (IsFlag(found, ""bl-aborts"")) {
diff -r a25b553e6824 -r c6ab5b9a7c07 js/src/jit/JitSpewer.h
--- a/js/src/jit/JitSpewer.h	Tue May 21 16:31:51 2019 +0000
+++ b/js/src/jit/JitSpewer.h	Tue May 21 15:25:32 2019 +0000
@@ -66,6 +66,8 @@
   _(MIRExpressions)                        \
   /* Print control flow graph */           \
   _(CFG)                                   \
+  /* Spew Tracelogger summary stats */     \
+  _(ScriptStats)                           \
                                            \
   /* BASELINE COMPILER SPEW */             \
                                            \
diff -r a25b553e6824 -r c6ab5b9a7c07 js/src/shell/js.cpp
--- a/js/src/shell/js.cpp	Tue May 21 16:31:51 2019 +0000
+++ b/js/src/shell/js.cpp	Tue May 21 15:25:32 2019 +0000
@@ -10714,6 +10714,16 @@
 }
 
 static int Shell(JSContext* cx, OptionParser* op, char** envp) {
+  if (JS::TraceLoggerSupported()) {
+    JS::StartTraceLogger(cx);
+  }
+  auto stopTraceLogger = MakeScopeExit([&] {
+    if (JS::TraceLoggerSupported()) {
+      JS::SpewTraceLoggerForCurrentProcess();
+      JS::StopTraceLogger(cx);
+    }
+  });
+
   if (op->getBoolOption(""wasm-compile-and-serialize"")) {
     if (!WasmCompileAndSerialize(cx)) {
       // Errors have been printed directly to stderr.
diff -r a25b553e6824 -r c6ab5b9a7c07 js/src/util/StructuredSpewer.h
--- a/js/src/util/StructuredSpewer.h	Tue May 21 16:31:51 2019 +0000
+++ b/js/src/util/StructuredSpewer.h	Tue May 21 15:25:32 2019 +0000
@@ -66,7 +66,9 @@
 
 namespace js {
 
-#  define STRUCTURED_CHANNEL_LIST(_) _(BaselineICStats)
+#  define STRUCTURED_CHANNEL_LIST(_) \
+    _(BaselineICStats)               \
+    _(ScriptStats)
 
 // Structured spew channels
 enum class SpewChannel {
diff -r a25b553e6824 -r c6ab5b9a7c07 js/src/vm/Interpreter.cpp
--- a/js/src/vm/Interpreter.cpp	Tue May 21 16:31:51 2019 +0000
+++ b/js/src/vm/Interpreter.cpp	Tue May 21 15:25:32 2019 +0000
@@ -429,6 +429,9 @@
 STATIC_PRECONDITION_ASSUME(ubound(args.argv_) >= argc)
 MOZ_ALWAYS_INLINE bool CallJSNative(JSContext* cx, Native native,
                                     const CallArgs& args) {
+  TraceLoggerThread* logger = TraceLoggerForCurrentThread(cx);
+  AutoTraceLog traceLog(logger, TraceLogger_Call);
+
   if (!CheckRecursionLimit(cx)) {
     return false;
   }
diff -r a25b553e6824 -r c6ab5b9a7c07 js/src/vm/JSContext.h
--- a/js/src/vm/JSContext.h	Tue May 21 16:31:51 2019 +0000
+++ b/js/src/vm/JSContext.h	Tue May 21 15:25:32 2019 +0000
@@ -998,7 +998,7 @@
 #ifdef JS_STRUCTURED_SPEW
  private:
   // Spewer for this thread
-  js::ThreadData<js::StructuredSpewer> structuredSpewer_;
+  js::UnprotectedData<js::StructuredSpewer> structuredSpewer_;
 
  public:
   js::StructuredSpewer& spewer() { return structuredSpewer_.ref(); }
diff -r a25b553e6824 -r c6ab5b9a7c07 js/src/vm/TraceLogging.cpp
--- a/js/src/vm/TraceLogging.cpp	Tue May 21 16:31:51 2019 +0000
+++ b/js/src/vm/TraceLogging.cpp	Tue May 21 15:25:32 2019 +0000
@@ -10,11 +10,13 @@
 #include ""mozilla/MemoryReporting.h""
 #include ""mozilla/ScopeExit.h""
 
+#include <algorithm>
 #include <string.h>
 #include <utility>
 
 #include ""jit/BaselineJIT.h""
 #include ""jit/CompileWrappers.h""
+#include ""jit/JitSpewer.h""
 #include ""js/Printf.h""
 #include ""js/TraceLoggerAPI.h""
 #include ""threading/LockGuard.h""
@@ -85,17 +87,21 @@
 }
 
 bool TraceLoggerThread::init() {
-  if (!events.init()) {
+  if (!events_.init()) {
     return false;
   }
 
   // Minimum amount of capacity needed for operation to allow flushing.
   // Flushing requires space for the actual event and two spaces to log the
   // start and stop of flushing.
-  if (!events.ensureSpaceBeforeAdd(3)) {
+  if (!events_.ensureSpaceBeforeAdd(3)) {
     return false;
   }
 
+  char* buffer = js_pod_malloc<char>(32);
+  js::ThisThread::GetName(buffer, 32);
+  threadName_.reset(buffer);
+
   return true;
 }
 
@@ -103,8 +109,8 @@
   // Create a graph. I don't like this is called reset, but it locks the
   // graph into the UniquePtr. So it gets deleted when TraceLoggerThread
   // is destructed.
-  graph.reset(js_new<TraceLoggerGraph>());
-  if (!graph.get()) {
+  graph_.reset(js_new<TraceLoggerGraph>());
+  if (!graph_.get()) {
     return;
   }
 
@@ -113,8 +119,8 @@
   double delta =
       traceLoggerState->getTimeStampOffset(mozilla::TimeStamp::Now());
   uint64_t start = static_cast<uint64_t>(delta);
-  if (!graph->init(start, graphFile)) {
-    graph = nullptr;
+  if (!graph_->init(start, graphFile)) {
+    graph_ = nullptr;
     return;
   }
 
@@ -122,12 +128,12 @@
     // Report the textIds to the graph.
     for (uint32_t i = 0; i < TraceLogger_TreeItemEnd; i++) {
       TraceLoggerTextId id = TraceLoggerTextId(i);
-      graph->addTextId(i, TLTextIdString(id));
+      graph_->addTextId(i, TLTextIdString(id));
     }
-    graph->addTextId(TraceLogger_TreeItemEnd, ""TraceLogger internal"");
+    graph_->addTextId(TraceLogger_TreeItemEnd, ""TraceLogger internal"");
     for (uint32_t i = TraceLogger_TreeItemEnd + 1; i < TraceLogger_Last; i++) {
       TraceLoggerTextId id = TraceLoggerTextId(i);
-      graph->addTextId(i, TLTextIdString(id));
+      graph_->addTextId(i, TLTextIdString(id));
     }
   }
 }
@@ -179,9 +185,7 @@
   enabledTextIds[TraceLogger_Scripts] = true;
   enabledTextIds[TraceLogger_Engine] = true;
   enabledTextIds[TraceLogger_WasmCompilation] = true;
-  enabledTextIds[TraceLogger_Interpreter] = true;
-  enabledTextIds[TraceLogger_Baseline] = true;
-  enabledTextIds[TraceLogger_IonMonkey] = true;
+  enabledTextIds[TraceLogger_Invalidation] = true;
 }
 
 void TraceLoggerThreadState::enableIonLogging() {
@@ -228,11 +232,11 @@
 }
 
 TraceLoggerThread::~TraceLoggerThread() {
-  if (graph.get()) {
-    if (!failed) {
-      graph->log(events, traceLoggerState->startTime);
+  if (graph_.get()) {
+    if (!failed_) {
+      graph_->log(events_, traceLoggerState->startTime);
     }
-    graph = nullptr;
+    graph_ = nullptr;
   }
 }
 
@@ -242,7 +246,7 @@
     return true;
   }
 
-  if (failed) {
+  if (failed_) {
     return false;
   }
 
@@ -255,7 +259,7 @@
 bool TraceLoggerThread::fail(JSContext* cx, const char* error) {
   JS_ReportErrorNumberASCII(cx, GetErrorMessage, nullptr,
                             JSMSG_TRACELOGGER_ENABLE_FAIL, error);
-  failed = true;
+  failed_ = true;
   enabled_ = 0;
 
   return false;
@@ -263,7 +267,7 @@
 
 void TraceLoggerThread::silentFail(const char* error) {
   traceLoggerState->maybeSpewError(error);
-  failed = true;
+  failed_ = true;
   enabled_ = 0;
 }
 
@@ -271,11 +275,11 @@
     mozilla::MallocSizeOf mallocSizeOf) const {
   size_t size = 0;
 #ifdef DEBUG
-  size += graphStack.sizeOfExcludingThis(mallocSizeOf);
+  size += graphStack_.sizeOfExcludingThis(mallocSizeOf);
 #endif
-  size += events.sizeOfExcludingThis(mallocSizeOf);
-  if (graph.get()) {
-    size += graph->sizeOfIncludingThis(mallocSizeOf);
+  size += events_.sizeOfExcludingThis(mallocSizeOf);
+  if (graph_.get()) {
+    size += graph_->sizeOfIncludingThis(mallocSizeOf);
   }
   return size;
 }
@@ -349,7 +353,7 @@
 }
 
 bool TraceLoggerThread::disable(bool force, const char* error) {
-  if (failed) {
+  if (failed_) {
     MOZ_ASSERT(enabled_ == 0);
     return false;
   }
@@ -374,14 +378,14 @@
 }
 
 const char* TraceLoggerThread::maybeEventText(uint32_t id) {
-  if (id < TraceLogger_Last) {
+  if (TLTextIdIsEnumEvent(id)) {
     return TLTextIdString(static_cast<TraceLoggerTextId>(id));
   }
   return traceLoggerState->maybeEventText(id);
 }
 
 TraceLoggerEventPayload* TraceLoggerThreadState::getPayload(uint32_t id) {
-  if (id < TraceLogger_Last) {
+  if (TLTextIdIsEnumEvent(id)) {
     return nullptr;
   }
 
@@ -559,30 +563,30 @@
 #ifdef DEBUG
   if (enabled_ > 0) {
     AutoEnterOOMUnsafeRegion oomUnsafe;
-    if (!graphStack.append(id)) {
+    if (!graphStack_.append(id)) {
       oomUnsafe.crash(""Could not add item to debug stack."");
     }
   }
 #endif
 
-  if (graph.get() && traceLoggerState->isGraphFileEnabled()) {
+  if (graph_.get() && traceLoggerState->isGraphFileEnabled()) {
     // Flush each textId to disk.  textId values up to TraceLogger_Last are
     // statically defined and each one has an associated constant event string
     // defined by TLTextIdString().  For any events with textId >=
     // TraceLogger_Last the payload associated with that textId must first be
     // found and then maybeEventText() will find the event string form the
     // dictionary.
-    for (uint32_t otherId = graph->nextTextId(); otherId <= id; otherId++) {
-      if (id < TraceLogger_Last) {
+    for (uint32_t otherId = graph_->nextTextId(); otherId <= id; otherId++) {
+      if (TLTextIdIsEnumEvent(id)) {
         const char* text = TLTextIdString(static_cast<TraceLoggerTextId>(id));
-        graph->addTextId(otherId, text);
+        graph_->addTextId(otherId, text);
       } else {
         TraceLoggerEventPayload* p = traceLoggerState->getPayload(id);
         if (p) {
           const char* filename = traceLoggerState->maybeEventText(p);
           mozilla::Maybe<uint32_t> line = p->line();
           mozilla::Maybe<uint32_t> column = p->column();
-          graph->addTextId(otherId, filename, line, column);
+          graph_->addTextId(otherId, filename, line, column);
           p->release();
         }
       }
@@ -616,8 +620,8 @@
   }
 
 #ifdef DEBUG
-  if (!graphStack.empty()) {
-    uint32_t prev = graphStack.popCopy();
+  if (!graphStack_.empty()) {
+    uint32_t prev = graphStack_.popCopy();
     if (id == TraceLogger_Error || prev == TraceLogger_Error) {
       // When encountering an Error id the stack will most likely not be correct
       // anymore. Ignore this.
@@ -626,9 +630,9 @@
                  prev == TraceLogger_Baseline ||
                  prev == TraceLogger_Interpreter);
     } else if (id == TraceLogger_Scripts) {
-      MOZ_ASSERT(prev >= TraceLogger_Last);
-    } else if (id >= TraceLogger_Last) {
-      MOZ_ASSERT(prev >= TraceLogger_Last);
+      MOZ_ASSERT(TLTextIdIsScriptEvent(prev));
+    } else if (TLTextIdIsScriptEvent(id)) {
+      MOZ_ASSERT(TLTextIdIsScriptEvent(prev));
       if (prev != id) {
         // Ignore if the text has been flushed already.
         MOZ_ASSERT_IF(maybeEventText(prev),
@@ -664,7 +668,7 @@
   size_t bufferIndex = 0;
 
   const char* eventString = nullptr;
-  if (*dataIndex < TraceLogger_Last) {
+  if (TLTextIdIsEnumEvent(*dataIndex)) {
     eventString = TLTextIdString(static_cast<TraceLoggerTextId>(*dataIndex));
   } else {
     uint32_t dictId = *dataIndex - TraceLogger_Last;
@@ -703,17 +707,20 @@
   }
 
   size_t bufferIndex = 0;
-  ContinuousSpace<EventEntry>& events = cx->traceLogger->events;
+  ContinuousSpace<EventEntry>& events = cx->traceLogger->events_;
 
   for (; *dataIndex < events.size(); (*dataIndex)++) {
     if (TLTextIdIsInternalEvent(events[*dataIndex].textId)) {
       continue;
     }
 
-    if (events[*dataIndex].textId >= TraceLogger_Last) {
+    if (TLTextIdIsScriptEvent(events[*dataIndex].textId)) {
       TraceLoggerEventPayload* payload =
           traceLoggerState->getPayload(events[*dataIndex].textId);
       MOZ_ASSERT(payload);
+      if (!payload) {
+        return 0;
+      }
       // Write the index of this event into the jsTracerDictionary array
       // property
       uint32_t dictId = TraceLogger_Last + payload->dictionaryId();
@@ -721,7 +728,6 @@
       payload->release();
     } else {
       buffer[bufferIndex++] = events[*dataIndex].textId;
-      ;
     }
 
     if (bufferIndex == bufferSize) {
@@ -745,17 +751,20 @@
   }
 
   size_t bufferIndex = 0;
-  ContinuousSpace<EventEntry>& events = cx->traceLogger->events;
+  ContinuousSpace<EventEntry>& events = cx->traceLogger->events_;
 
   for (; *dataIndex < events.size(); (*dataIndex)++) {
     if (TLTextIdIsInternalEvent(events[*dataIndex].textId)) {
       continue;
     }
 
-    if (events[*dataIndex].textId >= TraceLogger_Last) {
+    if (TLTextIdIsScriptEvent(events[*dataIndex].textId)) {
       TraceLoggerEventPayload* payload =
           traceLoggerState->getPayload(events[*dataIndex].textId);
       MOZ_ASSERT(payload);
+      if (!payload) {
+        return 0;
+      }
       mozilla::Maybe<uint32_t> line = payload->line();
       payload->release();
       if (line) {
@@ -787,17 +796,20 @@
   }
 
   size_t bufferIndex = 0;
-  ContinuousSpace<EventEntry>& events = cx->traceLogger->events;
+  ContinuousSpace<EventEntry>& events = cx->traceLogger->events_;
 
   for (; *dataIndex < events.size(); (*dataIndex)++) {
     if (TLTextIdIsInternalEvent(events[*dataIndex].textId)) {
       continue;
     }
 
-    if (events[*dataIndex].textId >= TraceLogger_Last) {
+    if (TLTextIdIsScriptEvent(events[*dataIndex].textId)) {
       TraceLoggerEventPayload* payload =
           traceLoggerState->getPayload(events[*dataIndex].textId);
       MOZ_ASSERT(payload);
+      if (!payload) {
+        return 0;
+      }
       mozilla::Maybe<uint32_t> column = payload->column();
       payload->release();
       if (column) {
@@ -829,7 +841,7 @@
   }
 
   size_t bufferIndex = 0;
-  ContinuousSpace<EventEntry>& events = cx->traceLogger->events;
+  ContinuousSpace<EventEntry>& events = cx->traceLogger->events_;
 
   for (; *dataIndex < events.size(); (*dataIndex)++) {
     if (TLTextIdIsInternalEvent(events[*dataIndex].textId)) {
@@ -856,7 +868,7 @@
     return 0;
   }
 
-  ContinuousSpace<EventEntry>& events = cx->traceLogger->events;
+  ContinuousSpace<EventEntry>& events = cx->traceLogger->events_;
   Vector<size_t, 0, js::SystemAllocPolicy> eventStack;
   using EventDurationMap =
       HashMap<size_t, double, DefaultHasher<size_t>, SystemAllocPolicy>;
@@ -949,7 +961,7 @@
 
 #ifdef DEBUG
   if (id == TraceLogger_Disable) {
-    graphStack.clear();
+    graphStack_.clear();
   }
 #endif
 
@@ -958,12 +970,12 @@
   // We request for 3 items to add, since if we don't have enough room
   // we record the time it took to make more space. To log this information
   // we need 2 extra free entries.
-  if (!events.hasSpaceForAdd(3)) {
+  if (!events_.hasSpaceForAdd(3)) {
     mozilla::TimeStamp start = mozilla::TimeStamp::Now();
 
-    if (!events.ensureSpaceBeforeAdd(3)) {
-      if (graph.get()) {
-        graph->log(events, traceLoggerState->startTime);
+    if (!events_.ensureSpaceBeforeAdd(3)) {
+      if (graph_.get()) {
+        graph_->log(events_, traceLoggerState->startTime);
       }
 
       // The data structures are full, and the graph file is not enabled
@@ -974,21 +986,21 @@
       }
 
       iteration_++;
-      events.clear();
+      events_.clear();
 
       // Periodically remove unused payloads from the global logger state.
       traceLoggerState->purgeUnusedPayloads();
     }
 
-    // Log the time it took to flush the events as being from the
+    // Log the time it took to flush the events_ as being from the
     // Tracelogger.
-    if (graph.get()) {
-      MOZ_ASSERT(events.hasSpaceForAdd(2));
-      EventEntry& entryStart = events.pushUninitialized();
+    if (graph_.get()) {
+      MOZ_ASSERT(events_.hasSpaceForAdd(2));
+      EventEntry& entryStart = events_.pushUninitialized();
       entryStart.time = start;
       entryStart.textId = TraceLogger_Internal;
 
-      EventEntry& entryStop = events.pushUninitialized();
+      EventEntry& entryStop = events_.pushUninitialized();
       entryStop.time = mozilla::TimeStamp::Now();
       entryStop.textId = TraceLogger_Stop;
     }
@@ -996,7 +1008,7 @@
 
   mozilla::TimeStamp time = mozilla::TimeStamp::Now();
 
-  EventEntry& entry = events.pushUninitialized();
+  EventEntry& entry = events_.pushUninitialized();
   entry.time = time;
   entry.textId = id;
 }
@@ -1070,17 +1082,17 @@
 }
 
 void TraceLoggerThread::clear() {
-  if (graph.get()) {
-    graph.reset();
+  if (graph_.get()) {
+    graph_.reset();
   }
 
-  graph = nullptr;
+  graph_ = nullptr;
 
 #ifdef DEBUG
-  graphStack.clear();
+  graphStack_.clear();
 #endif
 
-  if (!events.reset()) {
+  if (!events_.reset()) {
     silentFail(""Cannot reset event buffer."");
   }
 }
@@ -1324,7 +1336,7 @@
   if (!cx->traceLogger) {
     LockGuard<Mutex> guard(lock);
 
-    TraceLoggerThread* logger = js_new<TraceLoggerThread>();
+    TraceLoggerThread* logger = js_new<TraceLoggerThread>(cx);
     if (!logger) {
       return nullptr;
     }
@@ -1465,8 +1477,335 @@
 
 JS_PUBLIC_API bool JS::TraceLoggerSupported() { return traceLoggerState; }
 
+// Perform a process wide synchronous spew of every thread that tracelogger has
+// captured.
+void TraceLoggerThreadState::spewTraceLoggerStats() {
+  for (TraceLoggerThread* logger : threadLoggers) {
+    logger->spewTraceLoggerStats();
+  }
+}
+
+// Usage here is JS_TRACELOGGER_SPEW=<event1>,<event2>,etc for custom spewing.
+// If the environment variable is not found, we use a default set of events.
+static bool getSpewIds(EventVector& spewIds) {
+  const char* env = getenv(""JS_TRACELOGGER_SPEW"");
+  if (env) {
+    for (uint32_t i = 1; i < TraceLogger_Last; i++) {
+      TraceLoggerTextId id = TraceLoggerTextId(i);
+      if (ContainsFlag(env, TLTextIdString(id))) {
+        if (!spewIds.append(id)) {
+          return false;
+        }
+      }
+    }
+  } else {
+    const uint32_t defaultSpewEvents[] = {
+        TraceLogger_ParsingFull, TraceLogger_Interpreter,
+        TraceLogger_Baseline,    TraceLogger_BaselineCompilation,
+        TraceLogger_IonMonkey,   TraceLogger_IonCompilation,
+        TraceLogger_Bailout};
+
+    for (uint32_t id : defaultSpewEvents) {
+      if (!spewIds.append(id)) {
+        return false;
+      }
+    }
+  }
+
+  return true;
+}
+
+static void spewHeaderRow(UniqueChars& threadName, EventVector& spewIds) {
+  if (threadName) {
+    JitSpew(jit::JitSpew_ScriptStats, ""Thread: %s (pid=%d)"", threadName.get(),
+            getpid());
+  } else {
+    JitSpew(jit::JitSpew_ScriptStats, ""Unknown Thread (pid=%d)"", getpid());
+  }
+
+  UniqueChars header = JS_smprintf(""%10s "", ""totalTime"");
+  for (uint32_t i : spewIds) {
+    TraceLoggerTextId id = TraceLoggerTextId(i);
+    if (TLTextIdIsLogEvent(id)) {
+      header =
+          JS_sprintf_append(std::move(header), ""%12s "", TLTextIdString(id));
+    } else {
+      header =
+          JS_sprintf_append(std::move(header), ""%25s "", TLTextIdString(id));
+    }
+  }
+
+  JitSpew(jit::JitSpew_ScriptStats, ""%s Script"", header.get());
+}
+
+void TraceLoggerThread::spewTraceLoggerStats() {
+  if (!jit::JitOptions.enableTraceLogger) {
+    return;
+  }
+
+  ScriptMap map;
+  if (!collectTraceLoggerStats(map)) {
+    return;
+  }
+  if (map.empty()) {
+    return;
+  }
+
+  SortedStatsVector sorted_map;
+  if (!sortTraceLoggerStats(map, sorted_map)) {
+    return;
+  }
+  map.clearAndCompact();
+
+  EventVector spewIds;
+  if (!getSpewIds(spewIds)) {
+    return;
+  }
+
+  // Dynamically generate the header row in JitSpew.
+  spewHeaderRow(threadName_, spewIds);
+
+  for (UniquePtr<ScriptStats>& datap : sorted_map) {
+    auto& tlevents = datap->events_;
+    uint32_t selfTime = datap->selfTime;
+
+    if (selfTime == 0) {
+      continue;
+    }
+
+    UniqueChars row = JS_smprintf(""%10u "", selfTime);
+    for (uint32_t i : spewIds) {
+      TraceLoggerTextId id = TraceLoggerTextId(i);
+      uint32_t time = tlevents[id].time;
+      uint32_t freq = tlevents[id].count;
+      uint32_t percent = (time * 100) / selfTime;
+      if (TLTextIdIsLogEvent(id)) {
+        row = JS_sprintf_append(std::move(row), ""%12u "", freq);
+      } else {
+        row = JS_sprintf_append(std::move(row), ""%8u (%3u%%,f=%-7u) "", time,
+                                percent, freq);
+      }
+    }
+    JitSpew(jit::JitSpew_ScriptStats, ""%s %s"", row.get(), datap->scriptName);
+
+    // If structured spewer is enabled, we might as well spew everything.
+    AutoStructuredSpewer spew(cx_, SpewChannel::ScriptStats, nullptr);
+    if (spew) {
+      spew->property(""script"", datap->scriptName);
+      spew->property(""totalTime"", selfTime);
+      spew->beginListProperty(""events"");
+      for (uint32_t i = 1; i < TraceLogger_Last; i++) {
+        TraceLoggerTextId id = TraceLoggerTextId(i);
+        if (TLTextIdIsInternalEvent(id) || tlevents[id].count == 0) {
+          continue;
+        }
+
+        spew->beginObject();
+        spew->property(""id"", TLTextIdString(id));
+        if (TLTextIdIsTreeEvent(id)) {
+          spew->property(""time"", tlevents[id].time);
+          spew->property(""frequency"", tlevents[id].count);
+        } else if (TLTextIdIsLogEvent(id)) {
+          spew->property(""frequency"", tlevents[id].count);
+        }
+        spew->endObject();
+      }
+      spew->endList();
+    }
+  }
+}
+
+static bool updateScriptMap(ScriptMap& map, char* key, uint32_t eventId,
+                            uint32_t value) {
+  if (!key) {
+    return false;
+  }
+
+  if (!map.has(key)) {
+    UniquePtr<ScriptStats> datap;
+    datap.reset(js_new<ScriptStats>(key));
+    if (!map.putNew(key, std::move(datap))) {
+      return false;
+    }
+  }
+  ScriptMap::Ptr p = map.lookup(key);
+  p->value()->events_[eventId].time += value;
+  p->value()->events_[eventId].count++;
+
+  if (TLTextIdIsTreeEvent(eventId)) {
+    p->value()->selfTime += value;
+  }
+  return true;
+}
+
+UniqueChars TraceLoggerThreadState::getFullScriptName(uint32_t textId) {
+  TraceLoggerEventPayload* payload = getPayload(textId);
+  MOZ_ASSERT(payload);
+  if (!payload) {
+    return nullptr;
+  }
+  char* filename = dictionaryData[payload->dictionaryId()].get();
+  uint32_t lineno = payload->line() ? *(payload->line()) : 0;
+  uint32_t colno = payload->column() ? *(payload->column()) : 0;
+  UniqueChars scriptName = JS_smprintf(""%s:%u:%u"", filename, lineno, colno);
+  payload->release();
+  return scriptName;
+}
+
+static bool sortBySelfTime(const UniquePtr<ScriptStats>& lhs,
+                           const UniquePtr<ScriptStats>& rhs) {
+  return lhs.get()->selfTime > rhs.get()->selfTime;
+}
+
+bool TraceLoggerThread::sortTraceLoggerStats(ScriptMap& map,
+                                             SortedStatsVector& sorted_map) {
+  for (auto range = map.all(); !range.empty(); range.popFront()) {
+    if (!sorted_map.append(std::move(range.front().value()))) {
+      return false;
+    }
+  }
+
+  std::sort(sorted_map.begin(), sorted_map.end(), sortBySelfTime);
+
+  return true;
+}
+
+// Traverse each event and calculate the self-time, along with the script that
+// each event belongs to. We do this quickly by maintaining two stacks:
+//  (i) eventStack - Each new event encountered is pushed onto the stack. Events
+//                   are popped off whenever a TraceLogger_Stop is encountered
+//                   and sent to updateScriptMap.
+// (ii) funcStack - Each new script encountered is pushed onto this stack.
+//                  Elements are popped off whenever a TraceLogger_Stop is
+//                  encountered that matches a script event on the top of
+//                  eventStack.
+bool TraceLoggerThread::collectTraceLoggerStats(ScriptMap& map) {
+  uint32_t totalJSTime = 0;
+
+  struct eventInfo {
+    uint32_t textId;
+    uint32_t time;
+    mozilla::TimeStamp start;
+
+    explicit eventInfo(uint32_t textId_) : textId(textId_), time(0) {}
+  };
+
+  Vector<eventInfo*, 0, js::SystemAllocPolicy> eventStack;
+  Vector<uint32_t, 0, js::SystemAllocPolicy> funcStack;
+
+  mozilla::TimeStamp startTime, stopTime;
+  uint32_t size = events_.size();
+  for (size_t i = 0; i < size; i++) {
+    uint32_t textId = events_[i].textId;
+
+    // Record any log events that have no durations such as Bailouts with a
+    // value of 1.  Make sure the funcStack actually has something in it or
+    // else the Bailout event will not be associated with any script.  This
+    // can commonly occur when profiling & tracing starts since we may have
+    // already past the point where the script event is created.
+    if (TLTextIdIsLogEvent(textId) && !funcStack.empty()) {
+      UniqueChars script =
+          traceLoggerState->getFullScriptName(funcStack.back());
+      if (!updateScriptMap(map, script.release(), textId, 1)) {
+        return false;
+      }
+    }
+
+    // Hit a new tree event or a stop event, so add (new event timestamp - old
+    // event timestamp) to the old event's self-time.
+    if (TLTextIdIsTreeEvent(textId)) {
+      if (!eventStack.empty()) {
+        stopTime = events_[i].time;
+
+        uint32_t deltaTime =
+            static_cast<uint32_t>((stopTime - startTime).ToMicroseconds());
+        eventStack.back()->time += deltaTime;
+
+        if (TLTextIdIsEnumEvent(eventStack.back()->textId)) {
+          if (!funcStack.empty() && !eventStack.empty()) {
+            UniqueChars script =
+                traceLoggerState->getFullScriptName(funcStack.back());
+            if (!updateScriptMap(map, script.release(),
+                                 eventStack.back()->textId, deltaTime)) {
+              return false;
+            }
+          }
+        }
+        totalJSTime += deltaTime;
+      }
+
+      if (TLTextIdIsScriptEvent(textId)) {
+        if (!funcStack.append(textId)) {
+          return false;
+        }
+      }
+
+      eventInfo* entry = js_new<eventInfo>(textId);
+      entry->start = events_[i].time;
+      if (!eventStack.append(entry)) {
+        return false;
+      }
+
+      startTime = events_[i].time;
+
+    } else if (textId == TraceLogger_Stop) {
+      if (!eventStack.empty()) {
+        stopTime = events_[i].time;
+
+        uint32_t deltaTime =
+            static_cast<uint32_t>((stopTime - startTime).ToMicroseconds());
+        eventInfo* entry = eventStack.popCopy();
+
+        uint32_t topId = entry->textId;
+        entry->time += deltaTime;
+
+        if (TLTextIdIsEnumEvent(topId)) {
+          // funcStack will usually be empty near the beginning of a profiling
+          // session since we may have skipped the point where the script event
+          // is created.  If that's the case, then skip this event since we
+          // cannot associate it with any script.
+          if (!funcStack.empty()) {
+            UniqueChars script =
+                traceLoggerState->getFullScriptName(funcStack.back());
+            if (!updateScriptMap(map, script.release(), topId, deltaTime)) {
+              return false;
+            }
+          }
+        }
+        js_delete(entry);
+
+        if (TLTextIdIsScriptEvent(topId) && !funcStack.empty()) {
+          funcStack.popBack();
+        }
+
+        totalJSTime += deltaTime;
+        startTime = events_[i].time;
+      }
+    }
+  }
+
+  return true;
+}
+
 JS_PUBLIC_API void JS::ResetTraceLogger(void) { js::ResetTraceLogger(); }
 
+JS_PUBLIC_API void JS::SpewTraceLoggerThread(JSContext* cx) {
+  if (!traceLoggerState) {
+    return;
+  }
+
+  if (cx && cx->traceLogger) {
+    cx->traceLogger->spewTraceLoggerStats();
+  }
+}
+
+JS_PUBLIC_API void JS::SpewTraceLoggerForCurrentProcess() {
+  if (!traceLoggerState) {
+    return;
+  }
+  traceLoggerState->spewTraceLoggerStats();
+}
+
 JS_PUBLIC_API void JS::StartTraceLogger(JSContext* cx) {
   if (!traceLoggerState) {
     return;
@@ -1476,6 +1815,7 @@
     LockGuard<Mutex> guard(traceLoggerState->lock);
     traceLoggerState->enableTextIdsForProfiler();
     jit::JitOptions.enableTraceLogger = true;
+    traceLoggerState->startTime = mozilla::TimeStamp::Now();
   }
 
   TraceLoggerThread* logger = traceLoggerState->forCurrentThread(cx);
diff -r a25b553e6824 -r c6ab5b9a7c07 js/src/vm/TraceLogging.h
--- a/js/src/vm/TraceLogging.h	Tue May 21 16:31:51 2019 +0000
+++ b/js/src/vm/TraceLogging.h	Tue May 21 15:25:32 2019 +0000
@@ -217,6 +217,39 @@
   }
 };
 
+// Data structures used to collect per function statistics for spewing
+struct ScriptStats {
+  struct EventData {
+    uint32_t time;
+    uint32_t count;
+  };
+
+  EventData events_[TraceLogger_Last];
+
+  char* scriptName;
+  uint32_t selfTime;
+
+  explicit ScriptStats(char* scriptName_)
+      : scriptName(scriptName_), selfTime(0) {
+    for (EventData& entry : events_) {
+      entry.time = 0;
+      entry.count = 0;
+    }
+  }
+
+  ~ScriptStats() {
+    JS::FreePolicy freePolicy;
+    freePolicy(scriptName);
+  }
+};
+
+typedef HashMap<char*, UniquePtr<ScriptStats>, mozilla::CStringHasher,
+                SystemAllocPolicy>
+    ScriptMap;
+
+typedef Vector<UniquePtr<ScriptStats>, 0, SystemAllocPolicy> SortedStatsVector;
+typedef Vector<uint32_t, 0, js::SystemAllocPolicy> EventVector;
+
 // Per thread trace logger state.
 class TraceLoggerThread : public mozilla::LinkedListElement<TraceLoggerThread> {
 #ifdef JS_TRACE_LOGGING
@@ -227,28 +260,28 @@
   friend JS::TraceLoggerColNoImpl;
 
  private:
-  uint32_t enabled_;
-  bool failed;
+  JSContext* cx_;
+  uint32_t enabled_ = 0;
+  bool failed_ = false;
 
-  UniquePtr<TraceLoggerGraph> graph;
-
-  ContinuousSpace<EventEntry> events;
+  UniquePtr<TraceLoggerGraph> graph_;
+  ContinuousSpace<EventEntry> events_;
 
   // Every time the events get flushed, this count is increased by one.
   // Together with events.lastEntryId(), this gives an unique id for every
   // event.
-  uint32_t iteration_;
+  uint32_t iteration_ = 0;
 
 #  ifdef DEBUG
-  typedef Vector<uint32_t, 1, js::SystemAllocPolicy> GraphStack;
-  GraphStack graphStack;
+  EventVector graphStack_;
 #  endif
 
+  UniqueChars threadName_ = nullptr;
+
  public:
-  AutoTraceLog* top;
+  AutoTraceLog* top_ = nullptr;
 
-  TraceLoggerThread()
-      : enabled_(0), failed(false), graph(), iteration_(0), top(nullptr) {}
+  explicit TraceLoggerThread(JSContext* cx) : cx_(cx) {}
 
   bool init();
   ~TraceLoggerThread();
@@ -279,12 +312,12 @@
                                   size_t* num) {
     EventEntry* start;
     if (iteration_ == *lastIteration) {
-      MOZ_ASSERT(*lastSize <= events.size());
-      *num = events.size() - *lastSize;
-      start = events.data() + *lastSize;
+      MOZ_ASSERT(*lastSize <= events_.size());
+      *num = events_.size() - *lastSize;
+      start = events_.data() + *lastSize;
     } else {
-      *num = events.size();
-      start = events.data();
+      *num = events_.size();
+      start = events_.data();
     }
 
     getIterationAndSize(lastIteration, lastSize);
@@ -293,26 +326,30 @@
 
   void getIterationAndSize(uint32_t* iteration, uint32_t* size) const {
     *iteration = iteration_;
-    *size = events.size();
+    *size = events_.size();
   }
 
   bool lostEvents(uint32_t lastIteration, uint32_t lastSize) {
     // If still logging in the same iteration, there are no lost events.
     if (lastIteration == iteration_) {
-      MOZ_ASSERT(lastSize <= events.size());
+      MOZ_ASSERT(lastSize <= events_.size());
       return false;
     }
 
     // If we are in the next consecutive iteration we are only sure we
     // didn't lose any events when the lastSize equals the maximum size
     // 'events' can get.
-    if (lastIteration == iteration_ - 1 && lastSize == events.maxSize()) {
+    if (lastIteration == iteration_ - 1 && lastSize == events_.maxSize()) {
       return false;
     }
 
     return true;
   }
 
+  bool collectTraceLoggerStats(ScriptMap& map);
+  bool sortTraceLoggerStats(ScriptMap& map, SortedStatsVector& sorted_map);
+  void spewTraceLoggerStats();
+
  private:
   const char* maybeEventText(uint32_t id);
 
@@ -355,15 +392,15 @@
 #ifdef JS_TRACE_LOGGING
   friend JS::TraceLoggerDictionaryImpl;
 #  ifdef DEBUG
-  bool initialized;
+  bool initialized = false;
 #  endif
 
   bool enabledTextIds[TraceLogger_Last];
-  bool mainThreadEnabled;
-  bool helperThreadEnabled;
-  bool graphEnabled;
-  bool graphFileEnabled;
-  bool spewErrors;
+  bool mainThreadEnabled = false;
+  bool helperThreadEnabled = false;
+  bool graphEnabled = false;
+  bool graphFileEnabled = false;
+  bool spewErrors = false;
   mozilla::LinkedList<TraceLoggerThread> threadLoggers;
 
   // Any events that carry a payload are saved in this hash map.
@@ -389,8 +426,8 @@
   StringHashToDictionaryMap payloadDictionary;
   DictionaryVector dictionaryData;
 
-  uint32_t nextTextId;
-  uint32_t nextDictionaryId;
+  uint32_t nextTextId = TraceLogger_Last;
+  uint32_t nextDictionaryId = 0;
 
  public:
   mozilla::TimeStamp startTime;
@@ -400,24 +437,13 @@
     return delta.ToMicroseconds();
   }
 
+  UniqueChars getFullScriptName(uint32_t textId);
+
   // Mutex to guard the data structures used to hold the payload data:
   // textIdPayloads, payloadDictionary & dictionaryData.
   Mutex lock;
 
-  TraceLoggerThreadState()
-      :
-#  ifdef DEBUG
-        initialized(false),
-#  endif
-        mainThreadEnabled(false),
-        helperThreadEnabled(false),
-        graphEnabled(false),
-        graphFileEnabled(false),
-        spewErrors(false),
-        nextTextId(TraceLogger_Last),
-        nextDictionaryId(0),
-        lock(js::mutexid::TraceLoggerThreadState) {
-  }
+  TraceLoggerThreadState() : lock(js::mutexid::TraceLoggerThreadState) {}
 
   bool init();
   ~TraceLoggerThreadState();
@@ -426,6 +452,8 @@
   void enableIonLogging();
   void enableFrontendLogging();
 
+  void spewTraceLoggerStats();
+
   void clear();
   bool remapDictionaryEntries(
       mozilla::Vector<UniqueChars, 0, SystemAllocPolicy>* newDictionary,
@@ -621,8 +649,8 @@
     if (logger) {
       logger->startEvent(event);
 
-      prev = logger->top;
-      logger->top = this;
+      prev = logger->top_;
+      logger->top_ = this;
     }
   }
 
@@ -634,15 +662,15 @@
     if (logger) {
       logger->startEvent(id);
 
-      prev = logger->top;
-      logger->top = this;
+      prev = logger->top_;
+      logger->top_ = this;
     }
   }
 
   ~AutoTraceLog() {
     if (logger) {
-      while (this != logger->top) {
-        logger->top->stop();
+      while (this != logger->top_) {
+        logger->top_->stop();
       }
       stop();
     }
@@ -659,8 +687,8 @@
       }
     }
 
-    if (logger->top == this) {
-      logger->top = prev;
+    if (logger->top_ == this) {
+      logger->top_ = prev;
     }
   }
 #else
diff -r a25b553e6824 -r c6ab5b9a7c07 js/src/vm/TraceLoggingTypes.h
--- a/js/src/vm/TraceLoggingTypes.h	Tue May 21 16:31:51 2019 +0000
+++ b/js/src/vm/TraceLoggingTypes.h	Tue May 21 15:25:32 2019 +0000
@@ -147,6 +147,12 @@
   return true;
 }
 
+inline bool TLTextIdIsEnumEvent(uint32_t id) { return id < TraceLogger_Last; }
+
+inline bool TLTextIdIsScriptEvent(uint32_t id) {
+  return !TLTextIdIsEnumEvent(id);
+}
+
 inline bool TLTextIdIsTreeEvent(uint32_t id) {
   // Everything between TraceLogger_Error and TraceLogger_TreeItemEnd are tree
   // events and atm also every custom event.
diff -r a25b553e6824 -r c6ab5b9a7c07 tools/profiler/core/ProfiledThreadData.cpp
--- a/tools/profiler/core/ProfiledThreadData.cpp	Tue May 21 16:31:51 2019 +0000
+++ b/tools/profiler/core/ProfiledThreadData.cpp	Tue May 21 15:25:32 2019 +0000
@@ -113,6 +113,8 @@
   aWriter.StartObjectProperty(""jsTracerEvents"");
   {
     JS::AutoTraceLoggerLockGuard lockGuard;
+    JS::SpewTraceLoggerThread(aCx);
+
     uint32_t length = 0;
 
     // Collect Event Ids
","diff -r 88cd601e92b7 -r 0d5852b71d69 js/public/TraceLoggerAPI.h
--- a/js/public/TraceLoggerAPI.h	Wed May 22 15:08:07 2019 +0000
+++ b/js/public/TraceLoggerAPI.h	Wed May 22 15:59:05 2019 +0000
@@ -163,6 +163,8 @@
 inline void StartTraceLogger(JSContext* cx) {}
 inline void StopTraceLogger(JSContext* cx) {}
 inline void ResetTraceLogger(void) {}
+inline void SpewTraceLoggerThread(JSContext* cx) {}
+inline void SpewTraceLoggerForCurrentProcess() {}
 inline size_t TraceLoggerDictionaryImpl::NextChunk(JSContext* cx,
                                                    size_t* dataIndex,
                                                    ImplType buffer[],
",1545091,c6ab5b9a7c0743eafc9573871f60f7299d6832d5,"Bug 1545091 - Spew tracelogger statistics with IONFLAGS=tracelogger r=iain,mstange

Add Jitspewing control for tracelogger data.  This can be enabled from the profiler or from the JS shell.  Usage is as follows:

From browser (ION_SPEW_FILENAME is recommended here so stdout doesn't get clobbered by each process):
  1.  JS_TRACE_LOGGING=1 IONFLAGS=tracelogger ION_SPEW_FILENAME=tracelogger ./mach run
  2.  Enable JSTracer feature in profiler addon
  3.  Start profiling and ctrl+shift+2 to view profile, and the data will be automatically spewed during profile collection.

From shell:
  1.  JS_TRACE_LOGGING=1 IONFLAGS=tracelogger dist/bin/js test.js
  2.  Data is automatically spewed to stdout when the shell exits, or use ION_SPEW_FILENAME.

There is an optional environment variable JS_TRACELOGGER_SPEW that can be used to emit specific events, for example JS_TRACELOGGER_SPEW=""Interpreter,Baseline,GC"" will emit only those specific events along with the script and self time of each script.

The structured spewer is also supported with SPEW=tracelogger, and this will emit the tracelogger data for every recorded event.

Differential Revision: https://phabricator.services.mozilla.com/D30033",1553362,"Bug 1553362 - Add empty spew inline functions for when tracelogger is disabled r=iain

The new trace logger spew routines do not have a corresponding empty inline version for when --disable-trace-logging is used.

Differential Revision: https://phabricator.services.mozilla.com/D32156",2019-05-21T15:25:00+00:00,Spew tracelogger summary statistics,The idea here is to spew per script statistics about each event the tracelogger has recorded.  We can control this with the existing spewing env variables and spew after profiling from the browser or whenever the JS shell exits.,"Perma ""error: no type named 'SpewTraceLoggerThread' in namespace 'JS'"" when compiling without JS_TRACE_LOGGING and when Gecko 69 merges to beta on 2019-07-01","I get this failure when building mozilla-central@257f2c96cef502a1d674df56c8e39d76d8ed4d89 + unrelated changes  as it would be on mozilla-beta:

[task 2019-05-22T00:29:53.322Z] 00:29:53     INFO -  In file included from /builds/worker/workspace/build/src/obj-firefox/tools/profiler/Unified_cpp_tools_profiler0.cpp:38:
[task 2019-05-22T00:29:53.322Z] 00:29:53    ERROR -  /builds/worker/workspace/build/src/tools/profiler/core/ProfiledThreadData.cpp:116:9: error: no type named 'SpewTraceLoggerThread' in namespace 'JS'
[task 2019-05-22T00:29:53.322Z] 00:29:53     INFO -      JS::SpewTraceLoggerThread(aCx);
[task 2019-05-22T00:29:53.322Z] 00:29:53     INFO -      ~~~~^
[task 2019-05-22T00:29:53.323Z] 00:29:53     INFO -  1 error generated.
[task 2019-05-22T00:29:53.323Z] 00:29:53     INFO -  /builds/worker/workspace/build/src/config/rules.mk:835: recipe for target 'Unified_cpp_tools_profiler0.i_o' failed
[task 2019-05-22T00:29:53.323Z] 00:29:53    ERROR -  make[5]: *** [Unified_cpp_tools_profiler0.i_o] Error 1

See https://treeherder.mozilla.org/#/jobs?repo=try&revision=e9a3da7c02249d0dd113f05eb632c0ad11ebfe99&selectedJob=247658137 for the full log.

I think the problem stems from https://hg.mozilla.org/mozilla-central/rev/c6ab5b9a7c0743eafc9573871f60f7299d6832d5#l1.12 adding new functions but doesn't add the empty inlines in the #else for JS_TRACE_LOGGING not defined.

This would cause us issues when we merge 69 to beta, and in sheriff's simulations of that prior to merge."
1d376f00f17ee90f1bea9076781120c38c6b652f,2019-05-28T14:38:00+00:00,"diff -r 2b107d251cf5 -r 9a8e4a445e0c browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js	Tue Feb 19 15:13:20 2019 +0000
+++ b/browser/app/profile/firefox.js	Tue Feb 19 15:02:16 2019 +0000
@@ -483,6 +483,9 @@
 pref(""browser.tabs.remote.separatePrivilegedContentProcess"", true);
 #endif
 
+// Turn on HTTP response process selection.
+pref(""browser.tabs.remote.useHTTPResponseProcessSelection"", true);
+
 pref(""browser.ctrlTab.recentlyUsedOrder"", true);
 
 // By default, do not export HTML at shutdown.
","diff -r 5d11d295d7d4 -r 1d376f00f17e browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js	Mon May 27 17:31:24 2019 +0000
+++ b/browser/app/profile/firefox.js	Tue May 28 14:38:14 2019 +0000
@@ -510,8 +510,13 @@
 pref(""browser.tabs.remote.separatePrivilegedMozillaWebContentProcess"", true);
 #endif
 
-// Turn on HTTP response process selection.
+#ifdef NIGHTLY_BUILD
 pref(""browser.tabs.remote.useHTTPResponseProcessSelection"", true);
+#else
+// Disabled outside of nightly due to bug 1554217
+pref(""browser.tabs.remote.useHTTPResponseProcessSelection"", false);
+#endif
+
 
 // Unload tabs when available memory is running low
 pref(""browser.tabs.unloadOnLowMemory"", true);
",1528360,9a8e4a445e0c8eee6b052576f911aa1c4d06cb02,"Bug 1528360 - Enable httpResponseProcessSelection by default r=qdot,valentin

Differential Revision: https://phabricator.services.mozilla.com/D18607",1554217,"Bug 1554217 - Disable HTTPResponseProcessSelection on Beta, r=farre

Differential Revision: https://phabricator.services.mozilla.com/D32489",2019-02-19T15:02:00+00:00,Enable httpResponseProcessSelection by default,This is split off from 1522637 so I can land the improvements from that patch without having to fix the failure found in bug 1528188.,Disable HTTPResponseProcessSelection on Beta,
4ea4bed3417df7f9865cc5662e8688f75eb52663,2019-05-31T16:30:00+00:00,"diff -r c6cf628d6045 -r 4ee40acc8b60 js/src/frontend/BytecodeEmitter.cpp
--- a/js/src/frontend/BytecodeEmitter.cpp	Tue May 28 15:32:29 2019 +0000
+++ b/js/src/frontend/BytecodeEmitter.cpp	Tue May 28 16:59:14 2019 +0000
@@ -8768,17 +8768,20 @@
     // in, hence this extra scope.
     Maybe<LexicalScopeEmitter> lse;
     if (constructor->is<LexicalScopeNode>()) {
-      lse.emplace(this);
-      if (!lse->emitScope(
-              ScopeKind::Lexical,
-              constructor->as<LexicalScopeNode>().scopeBindings())) {
-        return false;
-      }
-
-      // Any class with field initializers will have a constructor
-      if (!emitCreateFieldInitializers(classMembers)) {
-        return false;
-      }
+      if (!constructor->as<LexicalScopeNode>().isEmptyScope()) {
+        lse.emplace(this);
+        if (!lse->emitScope(
+                ScopeKind::Lexical,
+                constructor->as<LexicalScopeNode>().scopeBindings())) {
+          return false;
+        }
+
+        // Any class with field initializers will have a constructor
+        if (!emitCreateFieldInitializers(classMembers)) {
+          return false;
+        }
+      }
+
       ctor = &constructor->as<LexicalScopeNode>()
                   .scopeBody()
                   ->as<ClassMethod>()
diff -r c6cf628d6045 -r 4ee40acc8b60 js/src/frontend/FullParseHandler.h
--- a/js/src/frontend/FullParseHandler.h	Tue May 28 15:32:29 2019 +0000
+++ b/js/src/frontend/FullParseHandler.h	Tue May 28 16:59:14 2019 +0000
@@ -472,6 +472,24 @@
     return true;
   }
 
+  void deleteConstructorScope(JSContext* cx, ListNodeType memberList) {
+    for (ParseNode* member : memberList->contents()) {
+      if (member->is<LexicalScopeNode>()) {
+        LexicalScopeNode* node = &member->as<LexicalScopeNode>();
+        MOZ_ASSERT(node->scopeBody()->isKind(ParseNodeKind::ClassMethod));
+        MOZ_ASSERT(node->scopeBody()->as<ClassMethod>().method().syntaxKind() ==
+                       FunctionSyntaxKind::ClassConstructor ||
+                   node->scopeBody()->as<ClassMethod>().method().syntaxKind() ==
+                       FunctionSyntaxKind::DerivedClassConstructor);
+        MOZ_ASSERT(!node->isEmptyScope());
+        MOZ_ASSERT(node->scopeBindings()->length == 1);
+        MOZ_ASSERT(node->scopeBindings()->trailingNames[0].name() ==
+                   cx->names().dotInitializers);
+        node->clearScopeBindings();
+      }
+    }
+  }
+
   UnaryNodeType newInitialYieldExpression(uint32_t begin, Node gen) {
     TokenPos pos(begin, begin + 1);
     return new_<UnaryNode>(ParseNodeKind::InitialYield, pos, gen);
diff -r c6cf628d6045 -r 4ee40acc8b60 js/src/frontend/ParseNode.h
--- a/js/src/frontend/ParseNode.h	Tue May 28 15:32:29 2019 +0000
+++ b/js/src/frontend/ParseNode.h	Tue May 28 16:59:14 2019 +0000
@@ -1542,6 +1542,8 @@
     return Handle<LexicalScope::Data*>::fromMarkedLocation(&bindings);
   }
 
+  void clearScopeBindings() { this->bindings = nullptr; }
+
   ParseNode* scopeBody() const { return body; }
 
   void setScopeBody(ParseNode* body) { this->body = body; }
diff -r c6cf628d6045 -r 4ee40acc8b60 js/src/frontend/Parser.cpp
--- a/js/src/frontend/Parser.cpp	Tue May 28 15:32:29 2019 +0000
+++ b/js/src/frontend/Parser.cpp	Tue May 28 16:59:14 2019 +0000
@@ -6992,6 +6992,10 @@
         ctorbox->function()->lazyScript()->setHasThisBinding();
       }
     }
+
+    if (numFields == 0) {
+      handler_.deleteConstructorScope(cx_, classMembers);
+    }
   }
 
   return true;
diff -r c6cf628d6045 -r 4ee40acc8b60 js/src/frontend/SyntaxParseHandler.h
--- a/js/src/frontend/SyntaxParseHandler.h	Tue May 28 15:32:29 2019 +0000
+++ b/js/src/frontend/SyntaxParseHandler.h	Tue May 28 16:59:14 2019 +0000
@@ -361,6 +361,7 @@
                                              Node member) {
     return true;
   }
+  void deleteConstructorScope(JSContext* cx, ListNodeType memberList) {}
   UnaryNodeType newYieldExpression(uint32_t begin, Node value) {
     return NodeGeneric;
   }
","diff -r b59f0892fbd0 -r 4ea4bed3417d js/src/frontend/FullParseHandler.h
--- a/js/src/frontend/FullParseHandler.h	Fri May 31 16:19:41 2019 +0000
+++ b/js/src/frontend/FullParseHandler.h	Fri May 31 16:30:06 2019 +0000
@@ -481,11 +481,16 @@
                        FunctionSyntaxKind::ClassConstructor ||
                    node->scopeBody()->as<ClassMethod>().method().syntaxKind() ==
                        FunctionSyntaxKind::DerivedClassConstructor);
-        MOZ_ASSERT(!node->isEmptyScope());
-        MOZ_ASSERT(node->scopeBindings()->length == 1);
-        MOZ_ASSERT(node->scopeBindings()->trailingNames[0].name() ==
-                   cx->names().dotInitializers);
-        node->clearScopeBindings();
+        // Check isEmptyScope instead of asserting, because this function must
+        // be idempotent: when parsing via asm.js, this function is called, then
+        // later, after asm.js parsing fails, this function is called again on
+        // the same scope. (See bug 1555979)
+        if (!node->isEmptyScope()) {
+          MOZ_ASSERT(node->scopeBindings()->length == 1);
+          MOZ_ASSERT(node->scopeBindings()->trailingNames[0].name() ==
+                     cx->names().dotInitializers);
+          node->clearScopeBindings();
+        }
       }
     }
   }
diff -r b59f0892fbd0 -r 4ea4bed3417d js/src/jit-test/tests/fields/bug1555979.js
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/js/src/jit-test/tests/fields/bug1555979.js	Fri May 31 16:30:06 2019 +0000
@@ -0,0 +1,8 @@
+(function() {
+    ""use asm"";
+    function f() {
+        class X {
+            constructor() {};
+        }
+    }
+})();
",1553744,4ee40acc8b6015a163dd09a9ced0af243d93b9cf,"Bug 1553744 - Delete .initalizers scope for constructors in classes without fields. r=jorendorff

Differential Revision: https://phabricator.services.mozilla.com/D32368",1555979,"Bug 1555979 - Don't assume the constructor scope has .initializers in it. r=jorendorff

Differential Revision: https://phabricator.services.mozilla.com/D33300",2019-05-28T16:59:00+00:00,"0.3 - 0.39% Base Content JS (linux64-shippable, linux64-shippable-qr, macosx1010-64-shippable, windows10-64-shippable, windows10-64-shippable-qr, windows7-32-shippable) regression on push a8f5dec91d72d4032ced008f847ead37f350193f","We have detected an awsy regression from push:

https://hg.mozilla.org/integration/autoland/pushloghtml?fromchange=350f7249407d5156f831562b38807111790e8e74&tochange=9953e8853243fe62ad2d74d30df1231cf5c5898f

As author of one of the patches included in that push, we need your help to address this regression.

Regressions:

  0.4%  Base Content JS windows7-32-shippable opt          3,233,253.33 -> 3,245,760.00
  0.3%  Base Content JS macosx1010-64-shippable opt        4,084,846.67 -> 4,097,484.00
  0.3%  Base Content JS linux64-shippable opt              4,083,844.00 -> 4,096,522.67
  0.3%  Base Content JS windows10-64-shippable-qr opt      4,140,018.67 -> 4,152,893.33
  0.3%  Base Content JS windows10-64-shippable opt         4,140,072.00 -> 4,153,030.67
  0.3%  Base Content JS linux64-shippable-qr opt           4,084,141.33 -> 4,096,592.00


You can find links to graphs and comparison views for each of the above tests at: https://treeherder.mozilla.org/perf.html#/alerts?id=21034

On the page above you can see an alert for each affected platform as well as a link to a graph showing the history of scores for this test. There is also a link to a treeherder page showing the jobs in a pushlog format.

To learn more about the regressing test(s), please see: https://wiki.mozilla.org/AWSY/Tests","Assertion failure: !node->isEmptyScope(), at js/src/frontend/FullParseHandler.h:484 with class","The following testcase crashes on mozilla-central revision 909f78f4ebae (build with --enable-debug --enable-more-deterministic, run with --fuzzing-safe --no-threads --no-baseline --no-ion):

    // Adapted from randomly chosen test: js/src/jit-test/tests/class/classconstructor.js
    (function() {
        ""use asm"";
        function f() {
            class X {
                constructor() {};
            }
        }
    })();

Backtrace:

#0  js::frontend::FullParseHandler::deleteConstructorScope (this=<optimized out>, cx=<optimized out>, memberList=<optimized out>) at js/src/frontend/FullParseHandler.h:484
#1  0x000056493d79cbe8 in js::frontend::GeneralParser<js::frontend::FullParseHandler, char16_t>::finishClassConstructor (this=<optimized out>, classStmt=..., className=..., hasHeritage=<optimized out>, classStartOffset=0, classEndOffset=0, numFields=0, classMembers=@0x7ffc5ccae4c0: 0x7fc2b8202388) at js/src/frontend/Parser.cpp:6997
#2  0x000056493d78a061 in js::frontend::GeneralParser<js::frontend::FullParseHandler, char16_t>::classDefinition (this=<optimized out>, yieldHandling=<optimized out>, classContext=js::frontend::GeneralParser<js::frontend::FullParseHandler, char16_t>::ClassStatement, defaultHandling=js::frontend::NameRequired) at js/src/frontend/Parser.cpp:7109
#3  0x000056493d784ae3 in js::frontend::GeneralParser<js::frontend::FullParseHandler, char16_t>::statementListItem (this=<optimized out>, yieldHandling=<optimized out>, canHaveDirectives=<optimized out>) at js/src/frontend/Parser.cpp:7969
#4  0x000056493d782df5 in js::frontend::GeneralParser<js::frontend::FullParseHandler, char16_t>::statementList (this=<optimized out>, yieldHandling=js::frontend::YieldIsName) at js/src/frontend/Parser.cpp:3447
/snip

For detailed crash information, see attachment."
bfee60ff0a54cadfdedd541a8607a56fd1959df2,2019-06-21T19:35:00+00:00,"diff -r c354cbd93b6d -r 8647cc887f1f browser/base/content/browser-siteIdentity.js
--- a/browser/base/content/browser-siteIdentity.js	Mon Jun 03 17:32:48 2019 +0000
+++ b/browser/base/content/browser-siteIdentity.js	Fri May 31 18:24:08 2019 +0000
@@ -868,10 +868,8 @@
    * Click handler for the identity-box element in primary chrome.
    */
   handleIdentityButtonEvent(event) {
-    // For Nightly users, show the WIP protections panel if the tracking
-    // protection icon was clicked.
-    if (this._protectionsPanelEnabled &&
-        event.originalTarget.id == ""tracking-protection-icon-animatable-image"") {
+    // For Nightly users, show the WIP protections panel if the meta key was held.
+    if (this._protectionsPanelEnabled && event.metaKey) {
       gProtectionsHandler.handleProtectionsButtonEvent(event);
       return;
     }
diff -r c354cbd93b6d -r 8647cc887f1f browser/base/content/browser-siteProtections.js
--- a/browser/base/content/browser-siteProtections.js	Mon Jun 03 17:32:48 2019 +0000
+++ b/browser/base/content/browser-siteProtections.js	Fri May 31 18:24:08 2019 +0000
@@ -39,7 +39,7 @@
     this.refreshProtectionsPopup();
 
     // Now open the popup, anchored off the primary chrome element
-    PanelMultiView.openPopup(this._protectionsPopup, this._protectionsIconBox, {
+    PanelMultiView.openPopup(this._protectionsPopup, gIdentityHandler._identityIcon, {
       position: ""bottomcenter topleft"",
       triggerEvent: event,
     }).catch(Cu.reportError);
","diff -r ecbdb92e03bd -r bfee60ff0a54 browser/base/content/browser-siteIdentity.js
--- a/browser/base/content/browser-siteIdentity.js	Fri Jun 21 19:36:27 2019 +0000
+++ b/browser/base/content/browser-siteIdentity.js	Fri Jun 21 19:35:51 2019 +0000
@@ -869,7 +869,7 @@
    */
   handleIdentityButtonEvent(event) {
     // For Nightly users, show the WIP protections panel if the meta key was held.
-    if (this._protectionsPanelEnabled && event.metaKey) {
+    if (this._protectionsPanelEnabled && event.altKey) {
       gProtectionsHandler.handleProtectionsButtonEvent(event);
       return;
     }
diff -r ecbdb92e03bd -r bfee60ff0a54 browser/base/content/test/siteProtections/head.js
--- a/browser/base/content/test/siteProtections/head.js	Fri Jun 21 19:36:27 2019 +0000
+++ b/browser/base/content/test/siteProtections/head.js	Fri Jun 21 19:35:51 2019 +0000
@@ -6,6 +6,6 @@
 async function openProtectionsPanel() {
   let popupShownPromise = BrowserTestUtils.waitForEvent(protectionsPopup, ""popupshown"");
   let identityBox = document.getElementById(""identity-box"");
-  EventUtils.synthesizeMouseAtCenter(identityBox, { metaKey: true });
+  EventUtils.synthesizeMouseAtCenter(identityBox, { altKey: true });
   await popupShownPromise;
 }
",1555222,8647cc887f1fedc0226a354ad77bfcec634fbe29,"Bug 1555222 - Show the protections panel when meta+clicking the identity box. r=johannh

Differential Revision: https://phabricator.services.mozilla.com/D32951",1557093,"Bug 1557093 - Use altKey+click to trigger the protections panel. r=ewright

Differential Revision: https://phabricator.services.mozilla.com/D35438",2019-05-31T18:24:00+00:00,Change the protections panel trigger mechanism for dogfooding,"Currently we show the protections panel when the shield icon is click. This prevents access when the shield icon isn't shown.

We should change the trigger and also anchor the panel on the identity icon since the shield may not exist. This is of course temporary until the new buttons are implemented.","Protections panel does not open with Windows key+Click on identity icon (before Bug 1555222, it works with click on shield icon)","Steps To Reproduce:
1. Open youtube
2. Windows key+click on identity icon

Actual Results:
Protections panel does not open.

Expected Results:
Protections panel should open.

Regression window:
https://hg.mozilla.org/integration/autoland/pushloghtml?fromchange=c354cbd93b6de88e8c31120040c81d32c554b484&tochange=8647cc887f1fedc0226a354ad77bfcec634fbe29

Regressed by: Bug 1555222"
41b11698353cb072b710fbc4bfea2cf8400fce6d,2019-06-10T21:15:00+00:00,"diff -r 1dbf929c30ae -r a29be90ae608 accessible/tests/mochitest/name/test_general.xul
--- a/accessible/tests/mochitest/name/test_general.xul	Sat Jun 08 08:26:37 2019 +0000
+++ b/accessible/tests/mochitest/name/test_general.xul	Sat Jun 08 08:16:18 2019 +0000
@@ -144,13 +144,7 @@
       // Name from the @title attribute of <toolbaritem/> (original bug 237249).
 
       // Direct child of toolbaritem.
-      var textboxAcc = testName(""toolbaritem_textbox"", ""ooospspss"");
-
-      // Element from anonymous content of direct child of toolbaritem.
-      var entryAcc = textboxAcc.firstChild;
-      testRole(entryAcc, ROLE_ENTRY);
-      is(entryAcc.name, ""ooospspss"",
-         ""Wrong name for text entry of autocomplete textbox 'toolbaritem_textbox'."");
+      var toolbarItemChildAcc = testName(""toolbaritem_child"", ""ooospspss"");
 
       // Child from subtree of toolbaritem.
       testName(""toolbaritem_hboxbutton"", ""ooospspss"");
@@ -330,14 +324,13 @@
   <!-- and the name from label of a toolbarbutton -->
   <toolbar>
     <toolbaritem title=""ooospspss"">
-      <textbox id=""toolbaritem_textbox""
-               flex=""1""
-               type=""autocomplete""
-               enablehistory=""true"">
+      <box id=""toolbaritem_child""
+           role=""group""
+           flex=""1"">
         <hbox role=""button"" id=""toolbaritem_hboxbutton"">
-           <description value=""button""/>
+          <description value=""button""/>
         </hbox>
-      </textbox>
+      </box>
     </toolbaritem>
     <toolbarbutton id=""toolbarbuttonwithlabel"">
       <label flex=""1"">I am the button</label>
diff -r 1dbf929c30ae -r a29be90ae608 accessible/tests/mochitest/tree/test_combobox.xul
--- a/accessible/tests/mochitest/tree/test_combobox.xul	Sat Jun 08 08:26:37 2019 +0000
+++ b/accessible/tests/mochitest/tree/test_combobox.xul	Sat Jun 08 08:16:18 2019 +0000
@@ -82,41 +82,6 @@
 
       testAccessibleTree(""autocomplete"", accTree);
 
-      //////////////////////////////////////////////////////////////////////////
-      // textbox@type=autocomplete #2 (child menupoup)
-
-      accTree = {
-        // textbox
-        role: ROLE_AUTOCOMPLETE,
-        children: [
-          {
-            // menupopup
-            role: ROLE_COMBOBOX_LIST, // autocomplete menu popup
-            children: [
-              {
-                // menuitem
-                role: ROLE_COMBOBOX_OPTION,
-                children: []
-              }
-            ]
-          },
-          {
-            // html:input
-            role: ROLE_ENTRY,
-            children: [
-              // no text leaf accessible for text node
-            ]
-          },
-          {
-            // xul:menupopup
-            role: ROLE_COMBOBOX_LIST, // context menu popup
-            children: []
-          }
-        ]
-      };
-
-      testAccessibleTree(""autocomplete2"", accTree);
-
       SimpleTest.finish()
     }
 
@@ -155,12 +120,6 @@
       <textbox id=""autocomplete"" type=""autocomplete""
                autocompletesearch=""unifiedcomplete""
                value=""http://mochi.test:8888/redirect-a11y.html""/>
-
-      <textbox id=""autocomplete2"" type=""autocomplete"">
-        <menupopup>
-          <menuitem label=""item1""/>
-        </menupopup>
-      </textbox>
     </vbox>
   </hbox>
 
diff -r 1dbf929c30ae -r a29be90ae608 browser/components/search/content/autocomplete-popup.js
--- a/browser/components/search/content/autocomplete-popup.js	Sat Jun 08 08:26:37 2019 +0000
+++ b/browser/components/search/content/autocomplete-popup.js	Sat Jun 08 08:16:18 2019 +0000
@@ -56,13 +56,6 @@
       this.updateHeader();
     });
 
-    this.addEventListener(""popuphiding"", (event) => {
-      this._isHiding = true;
-      Services.tm.dispatchToMainThread(() => {
-        this._isHiding = false;
-      });
-    });
-
     /**
      * This handles clicks on the topmost ""Foo Search"" header in the
      * popup (hbox.search-panel-header]).
@@ -80,14 +73,6 @@
       this.oneOffButtons.handleSearchCommand(event, engine);
     });
 
-    /**
-     * Popup rollup is triggered by native events before the mousedown event
-     * reaches the DOM. The will be set to true by the popuphiding event and
-     * false after the mousedown event has been triggered to detect what
-     * caused rollup.
-     */
-    this._isHiding = false;
-
     this._bundle = null;
   }
 
diff -r 1dbf929c30ae -r a29be90ae608 browser/components/search/content/searchbar.js
--- a/browser/components/search/content/searchbar.js	Sat Jun 08 08:26:37 2019 +0000
+++ b/browser/components/search/content/searchbar.js	Sat Jun 08 08:16:18 2019 +0000
@@ -43,17 +43,14 @@
 
     this.content = MozXULElement.parseXULToFragment(`
       <stringbundle src=""chrome://browser/locale/search.properties""></stringbundle>
-      <textbox class=""searchbar-textbox"" type=""autocomplete"" inputtype=""search"" placeholder=""&searchInput.placeholder;"" flex=""1"" autocompletepopup=""PopupSearchAutoComplete"" autocompletesearch=""search-autocomplete"" autocompletesearchparam=""searchbar-history"" maxrows=""10"" completeselectedindex=""true"" minresultsforpopup=""0"">
-        <box>
-          <hbox class=""searchbar-search-button"" tooltiptext=""&searchIcon.tooltip;"">
-            <image class=""searchbar-search-icon""></image>
-            <image class=""searchbar-search-icon-overlay""></image>
-          </hbox>
-        </box>
-        <hbox class=""search-go-container"">
-          <image class=""search-go-button urlbar-icon"" hidden=""true"" onclick=""handleSearchCommand(event);"" tooltiptext=""&contentSearchSubmit.tooltip;""></image>
-        </hbox>
-      </textbox>
+      <hbox class=""searchbar-search-button"" tooltiptext=""&searchIcon.tooltip;"">
+        <image class=""searchbar-search-icon""></image>
+        <image class=""searchbar-search-icon-overlay""></image>
+      </hbox>
+      <textbox class=""searchbar-textbox"" type=""autocomplete"" inputtype=""search"" placeholder=""&searchInput.placeholder;"" flex=""1"" autocompletepopup=""PopupSearchAutoComplete"" autocompletesearch=""search-autocomplete"" autocompletesearchparam=""searchbar-history"" maxrows=""10"" completeselectedindex=""true"" minresultsforpopup=""0""/>
+      <hbox class=""search-go-container"">
+        <image class=""search-go-button urlbar-icon"" hidden=""true"" onclick=""handleSearchCommand(event);"" tooltiptext=""&contentSearchSubmit.tooltip;""></image>
+      </hbox>
     `, [""chrome://browser/locale/browser.dtd""]);
   }
 
@@ -75,7 +72,6 @@
     window.addEventListener(""unload"", this.destroy);
     this._ignoreFocus = false;
 
-    this._clickClosedPopup = false;
     this._engines = null;
 
     this.FormHistory = (ChromeUtils.import(""resource://gre/modules/FormHistory.jsm"", {})).FormHistory;
@@ -434,12 +430,6 @@
     }, true);
 
     this.addEventListener(""mousedown"", (event) => {
-      if (event.originalTarget.classList.contains(""searchbar-search-button"")) {
-        this._clickClosedPopup = this._textbox.popup._isHiding;
-      }
-    }, true);
-
-    this.addEventListener(""mousedown"", (event) => {
       // Ignore right clicks
       if (event.button != 0) {
         return;
@@ -457,14 +447,12 @@
 
       let isIconClick = event.originalTarget.classList.contains(""searchbar-search-button"");
 
-      // Ignore clicks on the icon if they were made to close the popup
-      if (isIconClick && this._clickClosedPopup) {
-        return;
-      }
-
-      // Open the suggestions whenever clicking on the search icon or if there
-      // is text in the textbox.
-      if (isIconClick || this._textbox.value) {
+      // Hide popup when icon is clicked while popup is open
+      if (isIconClick && this.textbox.popup.popupOpen) {
+        this.textbox.popup.closePopup();
+      } else if (isIconClick || this._textbox.value) {
+        // Open the suggestions whenever clicking on the search icon or if there
+        // is text in the textbox.
         this.openSuggestionsPanel(true);
       }
     });
@@ -647,19 +635,14 @@
 
         document.popupNode = null;
 
-        let outerRect = this.textbox.getBoundingClientRect();
-        let innerRect = this.textbox.inputField.getBoundingClientRect();
-        let width = RTL_UI ?
-          innerRect.right - outerRect.left :
-          outerRect.right - innerRect.left;
+        let anchor = this.closest(""searchbar"");
+        let { width } = anchor.getBoundingClientRect();
         popup.setAttribute(""width"", width > 100 ? width : 100);
 
         // invalidate() depends on the width attribute
         popup._invalidate();
 
-        let yOffset = outerRect.bottom - innerRect.bottom;
-        popup.openPopup(this.textbox.inputField, ""after_start"",
-                        0, yOffset, false, false);
+        popup.openPopup(anchor, ""after_start"");
       }
     };
 
diff -r 1dbf929c30ae -r a29be90ae608 browser/themes/linux/browser.css
--- a/browser/themes/linux/browser.css	Sat Jun 08 08:26:37 2019 +0000
+++ b/browser/themes/linux/browser.css	Sat Jun 08 08:16:18 2019 +0000
@@ -197,7 +197,7 @@
 
 #urlbar:not(:-moz-lwtheme):not([focused=""true""]),
 #urlbar:not(:-moz-lwtheme).hidden-focus,
-.searchbar-textbox:not(:-moz-lwtheme):not([focused=""true""]) {
+#searchbar:not(:-moz-lwtheme):not(:focus-within) {
   border-color: ThreeDShadow;
 }
 
diff -r 1dbf929c30ae -r a29be90ae608 browser/themes/osx/browser.css
--- a/browser/themes/osx/browser.css	Sat Jun 08 08:26:37 2019 +0000
+++ b/browser/themes/osx/browser.css	Sat Jun 08 08:16:18 2019 +0000
@@ -249,7 +249,7 @@
 }
 
 #urlbar,
-.searchbar-textbox {
+#searchbar {
   font-size: 1.25em;
 }
 
@@ -260,7 +260,7 @@
 }
 
 #urlbar:not(.hidden-focus)[focused=""true""],
-.searchbar-textbox[focused=""true""] {
+#searchbar:focus-within {
   box-shadow: 0 0 0 1px var(--toolbar-field-focus-border-color) inset,
               0 0 0 1px var(--toolbar-field-focus-border-color);
 }
diff -r 1dbf929c30ae -r a29be90ae608 browser/themes/shared/urlbar-searchbar.inc.css
--- a/browser/themes/shared/urlbar-searchbar.inc.css	Sat Jun 08 08:26:37 2019 +0000
+++ b/browser/themes/shared/urlbar-searchbar.inc.css	Sat Jun 08 08:16:18 2019 +0000
@@ -25,7 +25,7 @@
 }
 
 #urlbar,
-.searchbar-textbox {
+#searchbar {
   -moz-appearance: none;
   background-clip: content-box;
   border: 1px solid @fieldBorderColor@;
@@ -38,42 +38,49 @@
   overflow: -moz-hidden-unscrollable;
 }
 
+.searchbar-textbox {
+  -moz-appearance: none;
+  background: none;
+  color: inherit;
+  margin: 0;
+}
+
 #urlbar:hover,
-.searchbar-textbox:hover {
+#searchbar:hover {
   border-color: @fieldHoverBorderColor@;
   box-shadow: 0 1px 6px rgba(0,0,0,.1);
 }
 
 #urlbar:-moz-lwtheme,
-#navigator-toolbox .searchbar-textbox:-moz-lwtheme {
+#navigator-toolbox #searchbar:-moz-lwtheme {
   background-color: var(--lwt-toolbar-field-background-color, hsla(0,0%,100%,.8));
   color: var(--lwt-toolbar-field-color, black);
 }
 
 #urlbar:not([focused=""true""]):-moz-lwtheme,
 #urlbar.hidden-focus:-moz-lwtheme,
-#navigator-toolbox .searchbar-textbox:not([focused=""true""]):-moz-lwtheme {
+#navigator-toolbox #searchbar:not(:focus-within):-moz-lwtheme {
   border-color: var(--lwt-toolbar-field-border-color, @fieldBorderColor@);
 }
 
 #urlbar:not([focused=""true""]):-moz-lwtheme:hover,
 #urlbar.hidden-focus:-moz-lwtheme:hover,
-#navigator-toolbox .searchbar-textbox:not([focused=""true""]):-moz-lwtheme:hover {
+#navigator-toolbox #searchbar:not(:focus-within):-moz-lwtheme:hover {
   border-color: var(--lwt-toolbar-field-border-color, @fieldHoverBorderColor@);
 }
 
 #urlbar:-moz-lwtheme:hover,
-#navigator-toolbox .searchbar-textbox:-moz-lwtheme:hover {
+#navigator-toolbox #searchbar:-moz-lwtheme:hover {
   background-color: var(--lwt-toolbar-field-background-color, white);
 }
 
 #urlbar:not(.hidden-focus)[focused=""true""],
-.searchbar-textbox[focused=""true""] {
+#searchbar:focus-within {
   border-color: var(--toolbar-field-focus-border-color);
 }
 
 #urlbar:not(.hidden-focus):-moz-lwtheme[focused=""true""],
-#navigator-toolbox .searchbar-textbox:-moz-lwtheme[focused=""true""] {
+#navigator-toolbox #searchbar:focus-within:-moz-lwtheme {
   background-color: var(--lwt-toolbar-field-focus, var(--lwt-toolbar-field-background-color, white));
   color: var(--lwt-toolbar-field-focus-color, var(--lwt-toolbar-field-color, black));
 }
@@ -85,14 +92,14 @@
 }
 
 :root[uidensity=compact] #urlbar,
-:root[uidensity=compact] .searchbar-textbox {
+:root[uidensity=compact] #searchbar {
   min-height: 26px;
   margin-top: 3px;
   margin-bottom: 3px;
 }
 
 :root[uidensity=touch] #urlbar,
-:root[uidensity=touch] .searchbar-textbox {
+:root[uidensity=touch] #searchbar {
   min-height: 32px;
 }
 
diff -r 1dbf929c30ae -r a29be90ae608 browser/themes/windows/browser.css
--- a/browser/themes/windows/browser.css	Sat Jun 08 08:26:37 2019 +0000
+++ b/browser/themes/windows/browser.css	Sat Jun 08 08:16:18 2019 +0000
@@ -548,14 +548,14 @@
 %include ../shared/urlbar-searchbar.inc.css
 
 #urlbar,
-.searchbar-textbox {
+#searchbar {
   font-size: 1.15em;
 }
 
 @media (-moz-windows-default-theme: 0) {
   #urlbar:not(:-moz-lwtheme):not([focused=""true""]),
   #urlbar:not(:-moz-lwtheme).hidden-focus,
-  .searchbar-textbox:not(:-moz-lwtheme):not([focused=""true""]) {
+  #searchbar:not(:-moz-lwtheme):not(:focus-within) {
     border-color: ThreeDShadow;
   }
 }
diff -r 1dbf929c30ae -r a29be90ae608 toolkit/components/extensions/test/browser/browser_ext_themes_toolbar_fields.js
--- a/toolkit/components/extensions/test/browser/browser_ext_themes_toolbar_fields.js	Sat Jun 08 08:26:37 2019 +0000
+++ b/toolkit/components/extensions/test/browser/browser_ext_themes_toolbar_fields.js	Sat Jun 08 08:16:18 2019 +0000
@@ -14,8 +14,6 @@
 });
 
 add_task(async function test_support_toolbar_field_properties() {
-  let searchbar = BrowserSearch.searchBar;
-
   const TOOLBAR_FIELD_BACKGROUND = ""#ff00ff"";
   const TOOLBAR_FIELD_COLOR = ""#00ff00"";
   const TOOLBAR_FIELD_BORDER = ""#aaaaff"";
@@ -51,7 +49,7 @@
   let toolbox = document.querySelector(""#navigator-toolbox"");
   let fields = [
     toolbox.querySelector(""#urlbar""),
-    searchbar.querySelector("".searchbar-textbox""),
+    BrowserSearch.searchBar,
   ].filter(field => {
     let bounds = field.getBoundingClientRect();
     return bounds.width > 0 && bounds.height > 0;
diff -r 1dbf929c30ae -r a29be90ae608 toolkit/content/widgets/autocomplete.xml
--- a/toolkit/content/widgets/autocomplete.xml	Sat Jun 08 08:26:37 2019 +0000
+++ b/toolkit/content/widgets/autocomplete.xml	Sat Jun 08 08:16:18 2019 +0000
@@ -12,17 +12,12 @@
   <binding id=""autocomplete""
            extends=""chrome://global/content/bindings/textbox.xml#textbox"">
     <content sizetopopup=""pref"">
-      <children includes=""image|box""/>
-
       <xul:moz-input-box anonid=""moz-input-box"" flex=""1"">
-        <children/>
         <html:input anonid=""input"" class=""textbox-input""
                     allowevents=""true""
                     autocomplete=""off""
                     xbl:inherits=""value,type=inputtype,maxlength,disabled,size,readonly,placeholder,tabindex,accesskey,mozactionhint""/>
       </xul:moz-input-box>
-      <children includes=""hbox""/>
-
       <xul:popupset anonid=""popupset"" class=""autocomplete-result-popupset""/>
     </content>
 
","diff -r e6faa87de16c -r 41b11698353c browser/components/search/content/searchbar.js
--- a/browser/components/search/content/searchbar.js	Mon Jun 10 15:02:02 2019 +0000
+++ b/browser/components/search/content/searchbar.js	Mon Jun 10 21:15:13 2019 +0000
@@ -635,14 +635,13 @@
 
         document.popupNode = null;
 
-        let anchor = this.closest(""searchbar"");
-        let { width } = anchor.getBoundingClientRect();
+        let { width } = this.getBoundingClientRect();
         popup.setAttribute(""width"", width > 100 ? width : 100);
 
         // invalidate() depends on the width attribute
         popup._invalidate();
 
-        popup.openPopup(anchor, ""after_start"");
+        popup.openPopup(this, ""after_start"");
       }
     };
 
",1556561,a29be90ae6089d1a7adac121c8596df7da2be243,"Bug 1556561 - Remove <children> usage from autocomplete binding. r=dao,surkov

Differential Revision: https://phabricator.services.mozilla.com/D33568",1557942,"Bug 1557942 - Remove unnecessary usage of closest() from searchbar.js r=ntim

Differential Revision: https://phabricator.services.mozilla.com/D34401",2019-06-08T08:16:00+00:00,Remove <children> usage from autocomplete binding,"Two of them are specific to the browser searchbar, and the other one is unused. Doing this will allow us to decouple searchbar logic from the autocomplete binding, but also make the autocomplete binding markup more simple and closer to an actual HTML input.",Remove unnecessary usage of `closest()` from searchbar.js,"Post reviewing bug 1556561, I noticed that I forgot to remove an usage of `closest()` that's no longer useful after bug 1534404:

https://hg.mozilla.org/integration/autoland/rev/a29be90ae608#l4.125 

The `anchor` variable can go away and be replaced with `this`, meaning this block can change to:
```js
let { width } = this.getBoundingRect();
popup.setAttribute(""width"", width > 100 ? width : 100);
 
// invalidate() depends on the width attribute
popup._invalidate();

popup.openPopup(this, ""after_start"");
```"
368e9ae19115fce103b410d423d78076d59db7e7,2019-07-11T14:07:00+00:00,"diff -r 151616d86efd -r 295ef3d15d11 security/sandbox/mac/SandboxPolicyGMP.h
--- a/security/sandbox/mac/SandboxPolicyGMP.h	Wed Jul 24 22:59:54 2019 +0300
+++ b/security/sandbox/mac/SandboxPolicyGMP.h	Wed Jul 24 14:48:41 2019 +0000
@@ -38,6 +38,9 @@
   (if (defined? 'file-map-executable)
     (moz-deny file-map-executable))
 
+  ; Needed for things like getpriority()/setpriority()/pthread_setname()
+  (allow process-info-pidinfo process-info-setcontrol (target self))
+
   (if (defined? 'file-map-executable)
     (allow file-map-executable file-read*
       (subpath ""/System/Library"")
diff -r 151616d86efd -r 295ef3d15d11 security/sandbox/mac/SandboxPolicyUtility.h
--- a/security/sandbox/mac/SandboxPolicyUtility.h	Wed Jul 24 22:59:54 2019 +0300
+++ b/security/sandbox/mac/SandboxPolicyUtility.h	Wed Jul 24 14:48:41 2019 +0000
@@ -23,7 +23,6 @@
   (moz-deny default)
   ; These are not included in (deny default)
   (moz-deny process-info*)
-  (allow process-info-pidinfo (target self))
   ; This isn't available in some older macOS releases.
   (if (defined? 'nvram*)
     (moz-deny nvram*))
@@ -31,6 +30,9 @@
   (if (defined? 'file-map-executable)
     (moz-deny file-map-executable))
 
+  ; Needed for things like getpriority()/setpriority()/pthread_setname()
+  (allow process-info-pidinfo process-info-setcontrol (target self))
+
   (if (defined? 'file-map-executable)
     (allow file-map-executable file-read*
       (subpath ""/System/Library"")
","diff -r 5671bf0f8a21 -r 368e9ae19115 dom/media/ipc/RemoteAudioDecoder.cpp
--- a/dom/media/ipc/RemoteAudioDecoder.cpp	Mon Jul 15 15:24:54 2019 +0000
+++ b/dom/media/ipc/RemoteAudioDecoder.cpp	Thu Jul 11 14:07:24 2019 +0000
@@ -6,6 +6,7 @@
 #include ""RemoteAudioDecoder.h""
 
 #include ""RemoteDecoderManagerChild.h""
+#include ""OpusDecoder.h""
 #include ""VorbisDecoder.h""
 #include ""WAVDecoder.h""
 
@@ -85,6 +86,8 @@
 
   if (VorbisDataDecoder::IsVorbis(params.mConfig.mMimeType)) {
     mDecoder = new VorbisDataDecoder(params);
+  } else if (OpusDataDecoder::IsOpus(params.mConfig.mMimeType)) {
+    mDecoder = new OpusDataDecoder(params);
   } else if (WaveDataDecoder::IsWave(params.mConfig.mMimeType)) {
     mDecoder = new WaveDataDecoder(params);
   }
diff -r 5671bf0f8a21 -r 368e9ae19115 dom/media/ipc/RemoteDecoderModule.cpp
--- a/dom/media/ipc/RemoteDecoderModule.cpp	Mon Jul 15 15:24:54 2019 +0000
+++ b/dom/media/ipc/RemoteDecoderModule.cpp	Thu Jul 11 14:07:24 2019 +0000
@@ -18,6 +18,7 @@
 #include ""RemoteDecoderManagerChild.h""
 #include ""RemoteMediaDataDecoder.h""
 #include ""RemoteVideoDecoder.h""
+#include ""OpusDecoder.h""
 #include ""VorbisDecoder.h""
 #include ""WAVDecoder.h""
 
@@ -46,6 +47,9 @@
   if (StaticPrefs::media_rdd_wav_enabled()) {
     supports |= WaveDataDecoder::IsWave(aMimeType);
   }
+  if (StaticPrefs::media_rdd_opus_enabled()) {
+    supports |= OpusDataDecoder::IsOpus(aMimeType);
+  }
 
   MOZ_LOG(
       sPDMLog, LogLevel::Debug,
diff -r 5671bf0f8a21 -r 368e9ae19115 dom/media/platforms/agnostic/AgnosticDecoderModule.cpp
--- a/dom/media/platforms/agnostic/AgnosticDecoderModule.cpp	Mon Jul 15 15:24:54 2019 +0000
+++ b/dom/media/platforms/agnostic/AgnosticDecoderModule.cpp	Thu Jul 11 14:07:24 2019 +0000
@@ -22,9 +22,8 @@
 
 bool AgnosticDecoderModule::SupportsMimeType(
     const nsACString& aMimeType, DecoderDoctorDiagnostics* aDiagnostics) const {
-  bool supports = VPXDecoder::IsVPX(aMimeType) ||
-                  OpusDataDecoder::IsOpus(aMimeType) ||
-                  TheoraDecoder::IsTheora(aMimeType);
+  bool supports =
+      VPXDecoder::IsVPX(aMimeType) || TheoraDecoder::IsTheora(aMimeType);
   if (!StaticPrefs::media_rdd_vorbis_enabled() ||
       !StaticPrefs::media_rdd_process_enabled() ||
       !BrowserTabsRemoteAutostart()) {
@@ -35,6 +34,11 @@
       !BrowserTabsRemoteAutostart()) {
     supports |= WaveDataDecoder::IsWave(aMimeType);
   }
+  if (!StaticPrefs::media_rdd_opus_enabled() ||
+      !StaticPrefs::media_rdd_process_enabled() ||
+      !BrowserTabsRemoteAutostart()) {
+    supports |= OpusDataDecoder::IsOpus(aMimeType);
+  }
 #ifdef MOZ_AV1
   // We remove support for decoding AV1 here if RDD is enabled so that
   // decoding on the content process doesn't accidentally happen in case
diff -r 5671bf0f8a21 -r 368e9ae19115 modules/libpref/init/StaticPrefList.h
--- a/modules/libpref/init/StaticPrefList.h	Mon Jul 15 15:24:54 2019 +0000
+++ b/modules/libpref/init/StaticPrefList.h	Thu Jul 11 14:07:24 2019 +0000
@@ -5910,6 +5910,23 @@
 )
 #undef PREF_VALUE
 
+#if defined(XP_LINUX) && !defined(ANDROID)
+# define PREF_VALUE true
+#elif defined(XP_WIN) && !defined(_ARM64_)
+# define PREF_VALUE false
+#elif defined(XP_MACOSX)
+# define PREF_VALUE true
+#else
+# define PREF_VALUE false
+#endif
+VARCACHE_PREF(
+  Live,
+  ""media.rdd-opus.enabled"",
+   media_rdd_opus_enabled,
+  RelaxedAtomicBool, PREF_VALUE
+)
+#undef PREF_VALUE
+
 #ifdef ANDROID
 
 // Enable the MediaCodec PlatformDecoderModule by default.
",1566540,295ef3d15d1144e6b3dd18c1ced5a57adfa742ee,"Bug 1566540 - [10.15] Crash in [@ CrashReporter::TerminateHandler] r=spohl

To avoid crashing in macOS 10.15, allow access to the proc_info PROC_INFO_CALL_SETCONTROL syscall variant in the GMP and RDD sandboxes.

Differential Revision: https://phabricator.services.mozilla.com/D39079",1560368,"Bug 1560368 - add Opus decoding on RDD. r=jya

Differential Revision: https://phabricator.services.mozilla.com/D37620",2019-07-24T14:48:00+00:00,[10.15] Crash in [@ CrashReporter::TerminateHandler],"This bug is for crash report bp-81c9333d-4860-4800-a8cb-6f58a0190716. All of the crashes are 10.15 users running 10.15.0 19A501i .

Seen while looking at nightly crash stats: https://bit.ly/2GgJOpY. Crashes started in 20190715214335.

Not sure if this is something we regressed or whether this was around the time the third beta came out.

Possible regression range based on Build ID: https://hg.mozilla.org/mozilla-central/pushloghtml?fromchange=30b8d57cb72a2f955532a0e670c599881a110f17&tochange=c0bcda96a954fe7a3700466bda256aea58189ac9

```
Top 9 frames of crashing thread:

0 XUL CrashReporter::TerminateHandler toolkit/crashreporter/nsExceptionHandler.cpp:1380
1  @0x7fff69db6da6 
2  @0x7fff69db6b54 
3  @0x7fff69da834e 
4  @0x7fff68ad42af 
5  @0x7fff68adb6de 
6  @0x7fff68adcb35 
7  @0x7fff6cdd3da9 
8  @0x7fff6cdd06ae 

```",add Opus decoding on RDD,Add Opus decoding on RDD
97027c83ce2e3777de17170b479833a89a635521,2021-02-16T21:24:00+00:00,"diff -r d57670df353e -r 4a1e7d5a5b44 build/moz.configure/toolchain.configure
--- a/build/moz.configure/toolchain.configure	Thu Jun 06 04:01:24 2019 +0300
+++ b/build/moz.configure/toolchain.configure	Thu Jun 06 01:22:21 2019 +0000
@@ -700,10 +700,10 @@
         target: vc_compiler_path,
     }[host_or_target]
 
-    @depends(vc_path, original_path)
+    @depends(vc_path, original_path, developer_options)
     @imports('os')
     @imports(_from='os', _import='environ')
-    def toolchain_search_path(vc_compiler_path, original_path):
+    def toolchain_search_path(vc_compiler_path, original_path, developer_options):
         result = list(original_path)
 
         if vc_compiler_path:
@@ -719,20 +719,24 @@
         # `mach artifact toolchain` installs clang.
         mozbuild_state_dir = environ.get('MOZBUILD_STATE_PATH',
                                          os.path.expanduser(os.path.join('~', '.mozbuild')))
+        bootstrapped = []
+
         bootstrap_clang_path = os.path.join(mozbuild_state_dir, 'clang', 'bin')
-        result.append(bootstrap_clang_path)
+        bootstrapped.append(bootstrap_clang_path)
 
         bootstrap_cbindgen_path = os.path.join(mozbuild_state_dir, 'cbindgen')
-        result.append(bootstrap_cbindgen_path)
+        bootstrapped.append(bootstrap_cbindgen_path)
 
         bootstrap_nasm_path = os.path.join(mozbuild_state_dir, 'nasm')
-        result.append(bootstrap_nasm_path)
+        bootstrapped.append(bootstrap_nasm_path)
 
         # Also add the rustup install directory for cargo/rustc.
         rustup_path = os.path.expanduser(os.path.join('~', '.cargo', 'bin'))
         result.append(rustup_path)
 
-        return result
+        if developer_options:
+            return bootstrapped + result
+        return result + bootstrapped
     return toolchain_search_path
 
 
","diff -r d28c0f11743f -r 97027c83ce2e build/moz.configure/toolchain.configure
--- a/build/moz.configure/toolchain.configure	Tue Feb 16 21:20:05 2021 +0000
+++ b/build/moz.configure/toolchain.configure	Tue Feb 16 21:24:53 2021 +0000
@@ -2360,26 +2360,29 @@
         )
 
     result = try_linker(linker)
-    if result is None:
-        if linker:
-            die(""Could not use {} as linker"".format(linker))
-        die(""Failed to find a linker"")
+    if result is None and linker:
+        die(""Could not use {} as linker"".format(linker))
 
     if (
         linker is None
         and enable_gold.origin == ""default""
         and developer_options
-        and result.KIND in (""bfd"", ""gold"")
+        and (result is None or result.KIND in (""bfd"", ""gold""))
     ):
         # try and use lld if available.
         tried = try_linker(""lld"")
-        if result.KIND != ""gold"" and (tried is None or tried.KIND != ""lld""):
+        if (result is None or result.KIND != ""gold"") and (
+            tried is None or tried.KIND != ""lld""
+        ):
             tried = try_linker(""gold"")
             if tried is None or tried.KIND != ""gold"":
                 tried = None
         if tried:
             result = tried
 
+    if result is None:
+        die(""Failed to find a linker"")
+
     # If an explicit linker was given, error out if what we found is different.
     if linker and not linker.startswith(result.KIND):
         die(""Could not use {} as linker"".format(linker))
",1519954,4a1e7d5a5b449e60ef39d8e67e2b5cb54d3d389d,"Bug 1519954 - Pick binaries from mach bootstrap first on local developer builds. r=nalexander

Differential Revision: https://phabricator.services.mozilla.com/D33884",1563571,"Bug 1563571 - Still try lld when the compiler can't find a linker on its own. r=firefox-build-system-reviewers,andi,dmajor

Differential Revision: https://phabricator.services.mozilla.com/D104964",2019-06-06T01:22:00+00:00,Make |mach configure| prefer Mozilla's clang to local clang,"Around https://dxr.mozilla.org/mozilla-central/source/build/moz.configure/toolchain.configure#722-744, we determine the paths to various compilers.  Right now we favour $PATH to ~/.mozbuild/clang.  This ticket tracks changing the default so that we prefer ~/.mozbuild/clang.  Mozilla's clang builds have patches that work around critical issues and can be easier to update (via |mach bootstrap|).

On the other hand, this leads us closer to a compiler/toolchain monoculture.  Personally, I like said monoculture, 'cuz I spend a lot of time dealing with the fact that Android NDK toolchains no longer are able to build GeckoView/Firefox for Android :(

This would make Bug 1477487 simpler, but it's not a blocker (in either direction).","Configure fails for android build with ""ERROR: Failed to find a linker"" with --enable-release","This is on a brand new PC so a fresh setup, so it's possible I'm missing some magic I had done to my old machine.

I checked out gecko, ran `./mach bootstrap` for android, then ran `./mach build`.

I get the following error:
> 0:03.16 checking for linker...
> 0:03.16 DEBUG: Executing: `/usr/bin/clang -std=gnu99 --target=arm-linux-androideabi -Wl,--version -isystem /home/jamie/.mozbuild/android-ndk-r17b/sysroot/usr/include/arm-linux-androideabi -isystem /home/jamie/.mozbuild/android-ndk-r17b/sysroot/usr/include -gcc-toolchain /home/jamie/.mozbuild/android-ndk-r17b/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64 -D__ANDROID_API__=16`
> 0:03.16 ERROR: Failed to find a linker

I had recently removed the CC and CXX lines from my mozconfig, as I'd read in bug 1561323 to do so. Adding them back in (to point to mozbuild's clang) makes the problem go away.

This is a reduced mozconfig which still triggers the bug:
> ac_add_options --enable-application=mobile/android
> ac_add_options --with-android-ndk=""${HOME}/.mozbuild/android-ndk-r17b""

and adding this fixes it:
> CC=""${HOME}/.mozbuild/clang/bin/clang""
> CXX=""${HOME}/.mozbuild/clang/bin/clang++"""
e0fb78ca5c556091c725679639843627d095bc4e,2019-08-01T13:59:00+00:00,"diff -r bf8e7cbb75d6 -r ce56e2779818 js/public/ProfilingFrameIterator.h
--- a/js/public/ProfilingFrameIterator.h	Thu Jun 20 22:21:28 2019 +0000
+++ b/js/public/ProfilingFrameIterator.h	Fri Jun 21 16:13:48 2019 +0000
@@ -105,15 +105,34 @@
   //    and less than older native and psuedo-stack frame addresses
   void* stackAddress() const;
 
-  enum FrameKind { Frame_Baseline, Frame_Ion, Frame_Wasm };
+  enum FrameKind {
+    Frame_BaselineInterpreter,
+    Frame_Baseline,
+    Frame_Ion,
+    Frame_Wasm
+  };
 
   struct Frame {
     FrameKind kind;
     void* stackAddress;
-    void* returnAddress;
+    union {
+      void* returnAddress_;
+      jsbytecode* interpreterPC_;
+    };
     void* activation;
     void* endStackAddress;
     const char* label;
+    JSScript* interpreterScript;
+
+   public:
+    void* returnAddress() const {
+      MOZ_ASSERT(kind != Frame_BaselineInterpreter);
+      return returnAddress_;
+    }
+    jsbytecode* interpreterPC() const {
+      MOZ_ASSERT(kind == Frame_BaselineInterpreter);
+      return interpreterPC_;
+    }
   } JS_HAZ_GC_INVALIDATED;
 
   bool isWasm() const;
diff -r bf8e7cbb75d6 -r ce56e2779818 js/src/builtin/TestingFunctions.cpp
--- a/js/src/builtin/TestingFunctions.cpp	Thu Jun 20 22:21:28 2019 +0000
+++ b/js/src/builtin/TestingFunctions.cpp	Fri Jun 21 16:13:48 2019 +0000
@@ -2586,8 +2586,11 @@
     for (uint32_t i = 0; i < nframes; i++) {
       const char* frameKindStr = nullptr;
       switch (frames[i].kind) {
+        case JS::ProfilingFrameIterator::Frame_BaselineInterpreter:
+          frameKindStr = ""baseline-interpreter"";
+          break;
         case JS::ProfilingFrameIterator::Frame_Baseline:
-          frameKindStr = ""baseline"";
+          frameKindStr = ""baseline-jit"";
           break;
         case JS::ProfilingFrameIterator::Frame_Ion:
           frameKindStr = ""ion"";
diff -r bf8e7cbb75d6 -r ce56e2779818 js/src/jit/BaselineCompiler.cpp
--- a/js/src/jit/BaselineCompiler.cpp	Thu Jun 20 22:21:28 2019 +0000
+++ b/js/src/jit/BaselineCompiler.cpp	Fri Jun 21 16:13:48 2019 +0000
@@ -6923,6 +6923,21 @@
       return false;
     }
 
+    // Register BaselineInterpreter code with the profiler's JitCode table.
+    {
+      JitcodeGlobalEntry::BaselineInterpreterEntry entry;
+      entry.init(code, code->raw(), code->rawEnd());
+
+      JitcodeGlobalTable* globalTable =
+          cx->runtime()->jitRuntime()->getJitcodeGlobalTable();
+      if (!globalTable->addEntry(entry)) {
+        ReportOutOfMemory(cx);
+        return false;
+      }
+
+      code->setHasBytecodeMap();
+    }
+
     // Patch loads now that we know the tableswitch base address.
     for (CodeOffset off : tableLabels_) {
       Assembler::PatchDataWithValueCheck(CodeLocationLabel(code, off),
@@ -6945,6 +6960,10 @@
         std::move(handler.codeCoverageOffsets()));
   }
 
+  if (cx->runtime()->geckoProfiler().enabled()) {
+    interpreter.toggleProfilerInstrumentation(true);
+  }
+
   if (coverage::IsLCovEnabled()) {
     interpreter.toggleCodeCoverageInstrumentationUnchecked(true);
   }
diff -r bf8e7cbb75d6 -r ce56e2779818 js/src/jit/BaselineJIT.cpp
--- a/js/src/jit/BaselineJIT.cpp	Thu Jun 20 22:21:28 2019 +0000
+++ b/js/src/jit/BaselineJIT.cpp	Fri Jun 21 16:13:48 2019 +0000
@@ -1049,17 +1049,22 @@
   }
 }
 
-void jit::ToggleBaselineProfiling(JSRuntime* runtime, bool enable) {
-  JitRuntime* jrt = runtime->jitRuntime();
+void jit::ToggleBaselineProfiling(JSContext* cx, bool enable) {
+  JitRuntime* jrt = cx->runtime()->jitRuntime();
   if (!jrt) {
     return;
   }
 
   jrt->baselineInterpreter().toggleProfilerInstrumentation(enable);
 
-  for (ZonesIter zone(runtime, SkipAtoms); !zone.done(); zone.next()) {
+  for (ZonesIter zone(cx->runtime(), SkipAtoms); !zone.done(); zone.next()) {
     for (auto script = zone->cellIter<JSScript>(); !script.done();
          script.next()) {
+      if (enable) {
+        if (JitScript* jitScript = script->jitScript()) {
+          jitScript->ensureProfileString(cx, script);
+        }
+      }
       if (!script->hasBaselineScript()) {
         continue;
       }
diff -r bf8e7cbb75d6 -r ce56e2779818 js/src/jit/BaselineJIT.h
--- a/js/src/jit/BaselineJIT.h	Thu Jun 20 22:21:28 2019 +0000
+++ b/js/src/jit/BaselineJIT.h	Fri Jun 21 16:13:48 2019 +0000
@@ -557,7 +557,7 @@
 void AddSizeOfBaselineData(JSScript* script, mozilla::MallocSizeOf mallocSizeOf,
                            size_t* data);
 
-void ToggleBaselineProfiling(JSRuntime* runtime, bool enable);
+void ToggleBaselineProfiling(JSContext* cx, bool enable);
 
 void ToggleBaselineTraceLoggerScripts(JSRuntime* runtime, bool enable);
 void ToggleBaselineTraceLoggerEngine(JSRuntime* runtime, bool enable);
diff -r bf8e7cbb75d6 -r ce56e2779818 js/src/jit/JSJitFrameIter-inl.h
--- a/js/src/jit/JSJitFrameIter-inl.h	Thu Jun 20 22:21:28 2019 +0000
+++ b/js/src/jit/JSJitFrameIter-inl.h	Fri Jun 21 16:13:48 2019 +0000
@@ -36,12 +36,12 @@
   return current->prevFrameLocalSize();
 }
 
-inline JitFrameLayout* JSJitProfilingFrameIterator::framePtr() {
+inline JitFrameLayout* JSJitProfilingFrameIterator::framePtr() const {
   MOZ_ASSERT(!done());
   return (JitFrameLayout*)fp_;
 }
 
-inline JSScript* JSJitProfilingFrameIterator::frameScript() {
+inline JSScript* JSJitProfilingFrameIterator::frameScript() const {
   return ScriptFromCalleeToken(framePtr()->calleeToken());
 }
 
diff -r bf8e7cbb75d6 -r ce56e2779818 js/src/jit/JSJitFrameIter.cpp
--- a/js/src/jit/JSJitFrameIter.cpp	Thu Jun 20 22:21:28 2019 +0000
+++ b/js/src/jit/JSJitFrameIter.cpp	Fri Jun 21 16:13:48 2019 +0000
@@ -10,6 +10,7 @@
 #include ""jit/BaselineIC.h""
 #include ""jit/JitcodeMap.h""
 #include ""jit/JitFrames.h""
+#include ""jit/JitScript.h""
 #include ""jit/Safepoints.h""
 
 using namespace js;
@@ -509,12 +510,16 @@
     }
   }
 
-  MOZ_ASSERT(frameScript()->hasBaselineScript());
-
   // If nothing matches, for now just assume we are at the start of the last
-  // frame's baseline jit code.
+  // frame's baseline jit code or interpreter code.
   type_ = FrameType::BaselineJS;
-  resumePCinCurrentFrame_ = frameScript()->baselineScript()->method()->raw();
+  if (frameScript()->hasBaselineScript()) {
+    resumePCinCurrentFrame_ = frameScript()->baselineScript()->method()->raw();
+  } else {
+    MOZ_ASSERT(JitOptions.baselineInterpreter);
+    resumePCinCurrentFrame_ =
+        cx->runtime()->jitRuntime()->baselineInterpreter().codeRaw();
+  }
 }
 
 template <typename ReturnType = CommonFrameLayout*>
@@ -565,7 +570,7 @@
   JSScript* callee = frameScript();
 
   MOZ_ASSERT(entry->isIon() || entry->isBaseline() || entry->isIonCache() ||
-             entry->isDummy());
+             entry->isBaselineInterpreter() || entry->isDummy());
 
   // Treat dummy lookups as an empty frame sequence.
   if (entry->isDummy()) {
@@ -599,6 +604,12 @@
     return true;
   }
 
+  if (entry->isBaselineInterpreter()) {
+    type_ = FrameType::BaselineJS;
+    resumePCinCurrentFrame_ = pc;
+    return true;
+  }
+
   if (entry->isIonCache()) {
     void* ptr = entry->ionCacheEntry().rejoinAddr();
     const JitcodeGlobalEntry& ionEntry = table->lookupInfallible(ptr);
@@ -631,12 +642,15 @@
   // Certain exception handling cases such as debug OSR or resuming a generator
   // with .throw() will use BaselineFrame::setOverridePc() to indicate the
   // effective |pc|. We translate the effective-pc into a Baseline code
-  // address.
-  if (jsbytecode* override = bl->maybeOverridePc()) {
+  // address. Don't do this for frames running in the Baseline Interpreter,
+  // because we don't use the return address in that case.
+  jsbytecode* overridePC = bl->maybeOverridePc();
+  if (overridePC && !bl->runningInInterpreter()) {
     PCMappingSlotInfo slotInfo;
     JSScript* script = bl->script();
+    BaselineScript* blScript = script->baselineScript();
     resumePCinCurrentFrame_ =
-        script->baselineScript()->nativeCodeForPC(script, override, &slotInfo);
+        blScript->nativeCodeForPC(script, overridePC, &slotInfo);
 
     // NOTE: The stack may not be synced at this PC. For the purpose of
     // profiler sampling this is fine.
@@ -644,6 +658,29 @@
   }
 }
 
+const char* JSJitProfilingFrameIterator::baselineInterpreterLabel() const {
+  MOZ_ASSERT(type_ == FrameType::BaselineJS);
+  return frameScript()->jitScript()->profileString();
+}
+
+void JSJitProfilingFrameIterator::baselineInterpreterScriptPC(
+    JSScript** script, jsbytecode** pc) const {
+  MOZ_ASSERT(type_ == FrameType::BaselineJS);
+  BaselineFrame* blFrame =
+      (BaselineFrame*)(fp_ - BaselineFrame::FramePointerOffset -
+                       BaselineFrame::Size());
+  *script = frameScript();
+  *pc = (*script)->code();
+
+  if (blFrame->runningInInterpreter() &&
+      blFrame->interpreterScript() == *script) {
+    jsbytecode* interpPC = blFrame->interpreterPC();
+    if ((*script)->containsPC(interpPC)) {
+      *pc = interpPC;
+    }
+  }
+}
+
 void JSJitProfilingFrameIterator::operator++() {
   JitFrameLayout* frame = framePtr();
   moveToNextFrame(frame);
diff -r bf8e7cbb75d6 -r ce56e2779818 js/src/jit/JSJitFrameIter.h
--- a/js/src/jit/JSJitFrameIter.h	Thu Jun 20 22:21:28 2019 +0000
+++ b/js/src/jit/JSJitFrameIter.h	Fri Jun 21 16:13:48 2019 +0000
@@ -275,8 +275,8 @@
   FrameType type_;
   void* resumePCinCurrentFrame_;
 
-  inline JitFrameLayout* framePtr();
-  inline JSScript* frameScript();
+  inline JitFrameLayout* framePtr() const;
+  inline JSScript* frameScript() const;
   MOZ_MUST_USE bool tryInitWithPC(void* pc);
   MOZ_MUST_USE bool tryInitWithTable(JitcodeGlobalTable* table, void* pc,
                                      bool forLastCallSite);
@@ -293,6 +293,9 @@
   void operator++();
   bool done() const { return fp_ == nullptr; }
 
+  const char* baselineInterpreterLabel() const;
+  void baselineInterpreterScriptPC(JSScript** script, jsbytecode** pc) const;
+
   void* fp() const {
     MOZ_ASSERT(!done());
     return fp_;
diff -r bf8e7cbb75d6 -r ce56e2779818 js/src/jit/JitScript.cpp
--- a/js/src/jit/JitScript.cpp	Thu Jun 20 22:21:28 2019 +0000
+++ b/js/src/jit/JitScript.cpp	Fri Jun 21 16:13:48 2019 +0000
@@ -40,8 +40,10 @@
 }
 
 JitScript::JitScript(JSScript* script, uint32_t typeSetOffset,
-                     uint32_t bytecodeTypeMapOffset, uint32_t allocBytes)
-    : typeSetOffset_(typeSetOffset),
+                     uint32_t bytecodeTypeMapOffset, uint32_t allocBytes,
+                     const char* profileString)
+    : profileString_(profileString),
+      typeSetOffset_(typeSetOffset),
       bytecodeTypeMapOffset_(bytecodeTypeMapOffset),
       allocBytes_(allocBytes) {
   setTypesGeneration(script->zone()->types.generation);
@@ -71,6 +73,15 @@
     return true;
   }
 
+  // Store the profile string in the JitScript if the profiler is enabled.
+  const char* profileString = nullptr;
+  if (cx->runtime()->geckoProfiler().enabled()) {
+    profileString = cx->runtime()->geckoProfiler().profileString(cx, this);
+    if (!profileString) {
+      return false;
+    }
+  }
+
   size_t numTypeSets = NumTypeSets(this);
 
   static_assert(sizeof(JitScript) % sizeof(uintptr_t) == 0,
@@ -99,8 +110,9 @@
   uint32_t typeSetOffset = sizeof(JitScript) + numICEntries() * sizeof(ICEntry);
   uint32_t bytecodeTypeMapOffset =
       typeSetOffset + numTypeSets * sizeof(StackTypeSet);
-  UniquePtr<JitScript> jitScript(new (raw) JitScript(
-      this, typeSetOffset, bytecodeTypeMapOffset, allocSize.value()));
+  UniquePtr<JitScript> jitScript(
+      new (raw) JitScript(this, typeSetOffset, bytecodeTypeMapOffset,
+                          allocSize.value(), profileString));
 
   // Sanity check the length computations.
   MOZ_ASSERT(jitScript->numICEntries() == numICEntries());
@@ -173,6 +185,19 @@
   }
 }
 
+void JitScript::ensureProfileString(JSContext* cx, JSScript* script) {
+  MOZ_ASSERT(cx->runtime()->geckoProfiler().enabled());
+
+  if (profileString_) {
+    return;
+  }
+
+  profileString_ = cx->runtime()->geckoProfiler().profileString(cx, script);
+  if (!profileString_) {
+    MOZ_CRASH(""Failed to allocate profile string"");
+  }
+}
+
 #ifdef DEBUG
 void JitScript::printTypes(JSContext* cx, HandleScript script) {
   AutoSweepJitScript sweep(script);
diff -r bf8e7cbb75d6 -r ce56e2779818 js/src/jit/JitScript.h
--- a/js/src/jit/JitScript.h	Thu Jun 20 22:21:28 2019 +0000
+++ b/js/src/jit/JitScript.h	Fri Jun 21 16:13:48 2019 +0000
@@ -105,6 +105,9 @@
   // directly to this script.
   js::UniquePtr<Vector<DependentWasmImport>> dependentWasmImports_;
 
+  // Profile string used by the profiler for Baseline Interpreter frames.
+  const char* profileString_ = nullptr;
+
   // Offset of the StackTypeSet array.
   uint32_t typeSetOffset_ = 0;
 
@@ -150,7 +153,8 @@
 
  public:
   JitScript(JSScript* script, uint32_t typeSetOffset,
-            uint32_t bytecodeTypeMapOffset, uint32_t allocBytes);
+            uint32_t bytecodeTypeMapOffset, uint32_t allocBytes,
+            const char* profileString);
 
 #ifdef DEBUG
   ~JitScript() {
@@ -202,6 +206,13 @@
   void setActive() { flags_.active = true; }
   void resetActive() { flags_.active = false; }
 
+  void ensureProfileString(JSContext* cx, JSScript* script);
+
+  const char* profileString() const {
+    MOZ_ASSERT(profileString_);
+    return profileString_;
+  }
+
   /* Array of type sets for variables and JOF_TYPESET ops. */
   StackTypeSet* typeArray(const js::AutoSweepJitScript& sweep) {
     MOZ_ASSERT(sweep.jitScript() == this);
diff -r bf8e7cbb75d6 -r ce56e2779818 js/src/jit/JitcodeMap.cpp
--- a/js/src/jit/JitcodeMap.cpp	Thu Jun 20 22:21:28 2019 +0000
+++ b/js/src/jit/JitcodeMap.cpp	Fri Jun 21 16:13:48 2019 +0000
@@ -198,6 +198,26 @@
   str_ = nullptr;
 }
 
+void* JitcodeGlobalEntry::BaselineInterpreterEntry::canonicalNativeAddrFor(
+    void* ptr) const {
+  return ptr;
+}
+
+bool JitcodeGlobalEntry::BaselineInterpreterEntry::callStackAtAddr(
+    void* ptr, BytecodeLocationVector& results, uint32_t* depth) const {
+  MOZ_CRASH(""shouldn't be called for BaselineInterpreter entries"");
+}
+
+uint32_t JitcodeGlobalEntry::BaselineInterpreterEntry::callStackAtAddr(
+    void* ptr, const char** results, uint32_t maxResults) const {
+  MOZ_CRASH(""shouldn't be called for BaselineInterpreter entries"");
+}
+
+void JitcodeGlobalEntry::BaselineInterpreterEntry::youngestFrameLocationAtAddr(
+    void* ptr, JSScript** script, jsbytecode** pc) const {
+  MOZ_CRASH(""shouldn't be called for BaselineInterpreter entries"");
+}
+
 static inline JitcodeGlobalEntry& RejoinEntry(
     JSRuntime* rt, const JitcodeGlobalEntry::IonCacheEntry& cache, void* ptr) {
   MOZ_ASSERT(cache.containsPointer(ptr));
@@ -367,7 +387,7 @@
 
 bool JitcodeGlobalTable::addEntry(const JitcodeGlobalEntry& entry) {
   MOZ_ASSERT(entry.isIon() || entry.isBaseline() || entry.isIonCache() ||
-             entry.isDummy());
+             entry.isBaselineInterpreter() || entry.isDummy());
 
   JitcodeGlobalEntry* searchTower[JitcodeSkiplistTower::MAX_HEIGHT];
   searchInternal(entry, searchTower);
@@ -1523,6 +1543,9 @@
 
 JS_PUBLIC_API JS::ProfilingFrameIterator::FrameKind
 JS::ProfiledFrameHandle::frameKind() const {
+  if (entry_.isBaselineInterpreter()) {
+    return JS::ProfilingFrameIterator::Frame_BaselineInterpreter;
+  }
   if (entry_.isBaseline()) {
     return JS::ProfilingFrameIterator::Frame_Baseline;
   }
diff -r bf8e7cbb75d6 -r ce56e2779818 js/src/jit/JitcodeMap.h
--- a/js/src/jit/JitcodeMap.h	Thu Jun 20 22:21:28 2019 +0000
+++ b/js/src/jit/JitcodeMap.h	Fri Jun 21 16:13:48 2019 +0000
@@ -123,7 +123,16 @@
   friend class JitcodeGlobalTable;
 
  public:
-  enum Kind { INVALID = 0, Ion, Baseline, IonCache, Dummy, Query, LIMIT };
+  enum Kind {
+    INVALID = 0,
+    Ion,
+    Baseline,
+    BaselineInterpreter,
+    IonCache,
+    Dummy,
+    Query,
+    LIMIT
+  };
   JS_STATIC_ASSERT(LIMIT <= 8);
 
   struct BytecodeLocation {
@@ -414,6 +423,27 @@
     bool isMarkedFromAnyThread(JSRuntime* rt);
   };
 
+  struct BaselineInterpreterEntry : public BaseEntry {
+    void init(JitCode* code, void* nativeStartAddr, void* nativeEndAddr) {
+      BaseEntry::init(BaselineInterpreter, code, nativeStartAddr,
+                      nativeEndAddr);
+    }
+
+    void destroy() {}
+
+    void* canonicalNativeAddrFor(void* ptr) const;
+
+    MOZ_MUST_USE bool callStackAtAddr(void* ptr,
+                                      BytecodeLocationVector& results,
+                                      uint32_t* depth) const;
+
+    uint32_t callStackAtAddr(void* ptr, const char** results,
+                             uint32_t maxResults) const;
+
+    void youngestFrameLocationAtAddr(void* ptr, JSScript** script,
+                                     jsbytecode** pc) const;
+  };
+
   struct IonCacheEntry : public BaseEntry {
     void* rejoinAddr_;
     JS::TrackedOutcome trackedOutcome_;
@@ -517,6 +547,9 @@
     // Baseline jitcode.
     BaselineEntry baseline_;
 
+    // BaselineInterpreter code.
+    BaselineInterpreterEntry baselineInterpreter_;
+
     // IonCache stubs.
     IonCacheEntry ionCache_;
 
@@ -540,6 +573,11 @@
     baseline_ = baseline;
   }
 
+  explicit JitcodeGlobalEntry(const BaselineInterpreterEntry& baselineInterp)
+      : JitcodeGlobalEntry() {
+    baselineInterpreter_ = baselineInterp;
+  }
+
   explicit JitcodeGlobalEntry(const IonCacheEntry& ionCache)
       : JitcodeGlobalEntry() {
     ionCache_ = ionCache;
@@ -567,6 +605,9 @@
       case Baseline:
         baselineEntry().destroy();
         break;
+      case BaselineInterpreter:
+        baselineInterpreterEntry().destroy();
+        break;
       case IonCache:
         ionCacheEntry().destroy();
         break;
@@ -620,6 +661,7 @@
   bool isValid() const { return (kind() > INVALID) && (kind() < LIMIT); }
   bool isIon() const { return kind() == Ion; }
   bool isBaseline() const { return kind() == Baseline; }
+  bool isBaselineInterpreter() const { return kind() == BaselineInterpreter; }
   bool isIonCache() const { return kind() == IonCache; }
   bool isDummy() const { return kind() == Dummy; }
   bool isQuery() const { return kind() == Query; }
@@ -636,6 +678,10 @@
     MOZ_ASSERT(isBaseline());
     return baseline_;
   }
+  BaselineInterpreterEntry& baselineInterpreterEntry() {
+    MOZ_ASSERT(isBaselineInterpreter());
+    return baselineInterpreter_;
+  }
   IonCacheEntry& ionCacheEntry() {
     MOZ_ASSERT(isIonCache());
     return ionCache_;
@@ -661,6 +707,10 @@
     MOZ_ASSERT(isBaseline());
     return baseline_;
   }
+  const BaselineInterpreterEntry& baselineInterpreterEntry() const {
+    MOZ_ASSERT(isBaselineInterpreter());
+    return baselineInterpreter_;
+  }
   const IonCacheEntry& ionCacheEntry() const {
     MOZ_ASSERT(isIonCache());
     return ionCache_;
@@ -703,6 +753,8 @@
         return ionEntry().callStackAtAddr(ptr, results, depth);
       case Baseline:
         return baselineEntry().callStackAtAddr(ptr, results, depth);
+      case BaselineInterpreter:
+        return baselineInterpreterEntry().callStackAtAddr(ptr, results, depth);
       case IonCache:
         return ionCacheEntry().callStackAtAddr(rt, ptr, results, depth);
       case Dummy:
@@ -720,6 +772,9 @@
         return ionEntry().callStackAtAddr(ptr, results, maxResults);
       case Baseline:
         return baselineEntry().callStackAtAddr(ptr, results, maxResults);
+      case BaselineInterpreter:
+        return baselineInterpreterEntry().callStackAtAddr(ptr, results,
+                                                          maxResults);
       case IonCache:
         return ionCacheEntry().callStackAtAddr(rt, ptr, results, maxResults);
       case Dummy:
@@ -855,6 +910,7 @@
       case IonCache:
         tracedAny |= ionCacheEntry().trace<ShouldTraceProvider>(trc);
         break;
+      case BaselineInterpreter:
       case Dummy:
         break;
       default:
@@ -874,6 +930,7 @@
       case IonCache:
         ionCacheEntry().sweepChildren(rt);
         break;
+      case BaselineInterpreter:
       case Dummy:
         break;
       default:
@@ -982,6 +1039,10 @@
   MOZ_MUST_USE bool addEntry(const JitcodeGlobalEntry::BaselineEntry& entry) {
     return addEntry(JitcodeGlobalEntry(entry));
   }
+  MOZ_MUST_USE bool addEntry(
+      const JitcodeGlobalEntry::BaselineInterpreterEntry& entry) {
+    return addEntry(JitcodeGlobalEntry(entry));
+  }
   MOZ_MUST_USE bool addEntry(const JitcodeGlobalEntry::IonCacheEntry& entry) {
     return addEntry(JitcodeGlobalEntry(entry));
   }
diff -r bf8e7cbb75d6 -r ce56e2779818 js/src/vm/GeckoProfiler.cpp
--- a/js/src/vm/GeckoProfiler.cpp	Thu Jun 20 22:21:28 2019 +0000
+++ b/js/src/vm/GeckoProfiler.cpp	Fri Jun 21 16:13:48 2019 +0000
@@ -116,7 +116,7 @@
    * but not jitcode for scripts with active frames on the stack.  These scripts
    * need to have their profiler state toggled so they behave properly.
    */
-  jit::ToggleBaselineProfiling(rt, enabled);
+  jit::ToggleBaselineProfiling(cx, enabled);
 
   // Update lastProfilingFrame to point to the top-most JS jit-frame currently
   // on stack.
diff -r bf8e7cbb75d6 -r ce56e2779818 js/src/vm/Stack.cpp
--- a/js/src/vm/Stack.cpp	Thu Jun 20 22:21:28 2019 +0000
+++ b/js/src/vm/Stack.cpp	Fri Jun 21 16:13:48 2019 +0000
@@ -1934,10 +1934,11 @@
     Frame frame;
     frame.kind = Frame_Wasm;
     frame.stackAddress = stackAddr;
-    frame.returnAddress = nullptr;
+    frame.returnAddress_ = nullptr;
     frame.activation = activation_;
     frame.label = nullptr;
     frame.endStackAddress = activation_->asJit()->jsOrWasmExitFP();
+    frame.interpreterScript = nullptr;
     return mozilla::Some(frame);
   }
 
@@ -1955,7 +1956,7 @@
   }
 
   MOZ_ASSERT(entry->isIon() || entry->isIonCache() || entry->isBaseline() ||
-             entry->isDummy());
+             entry->isBaselineInterpreter() || entry->isDummy());
 
   // Dummy frames produce no stack frames.
   if (entry->isDummy()) {
@@ -1963,11 +1964,26 @@
   }
 
   Frame frame;
-  frame.kind = entry->isBaseline() ? Frame_Baseline : Frame_Ion;
+  if (entry->isBaselineInterpreter()) {
+    frame.kind = Frame_BaselineInterpreter;
+  } else if (entry->isBaseline()) {
+    frame.kind = Frame_Baseline;
+  } else {
+    frame.kind = Frame_Ion;
+  }
   frame.stackAddress = stackAddr;
-  frame.returnAddress = returnAddr;
+  if (entry->isBaselineInterpreter()) {
+    frame.label = jsJitIter().baselineInterpreterLabel();
+    jsJitIter().baselineInterpreterScriptPC(&frame.interpreterScript,
+                                            &frame.interpreterPC_);
+    MOZ_ASSERT(frame.interpreterScript);
+    MOZ_ASSERT(frame.interpreterPC_);
+  } else {
+    frame.interpreterScript = nullptr;
+    frame.returnAddress_ = returnAddr;
+    frame.label = nullptr;
+  }
   frame.activation = activation_;
-  frame.label = nullptr;
   frame.endStackAddress = activation_->asJit()->jsOrWasmExitFP();
   return mozilla::Some(frame);
 }
@@ -1993,6 +2009,11 @@
     return 1;
   }
 
+  if (physicalFrame->kind == Frame_BaselineInterpreter) {
+    frames[offset] = physicalFrame.value();
+    return 1;
+  }
+
   // Extract the stack for the entry.  Assume maximum inlining depth is <64
   const char* labels[64];
   uint32_t depth = entry.callStackAtAddr(cx_->runtime(),
diff -r bf8e7cbb75d6 -r ce56e2779818 tools/profiler/core/platform.cpp
--- a/tools/profiler/core/platform.cpp	Thu Jun 20 22:21:28 2019 +0000
+++ b/tools/profiler/core/platform.cpp	Fri Jun 21 16:13:48 2019 +0000
@@ -1302,10 +1302,19 @@
       if (aIsSynchronous ||
           jsFrame.kind == JS::ProfilingFrameIterator::Frame_Wasm) {
         aCollector.CollectWasmFrame(jsFrame.label);
+      } else if (jsFrame.kind ==
+                 JS::ProfilingFrameIterator::Frame_BaselineInterpreter) {
+        // For now treat this as a C++ Interpreter frame by materializing a
+        // ProfilingStackFrame.
+        JSScript* script = jsFrame.interpreterScript;
+        jsbytecode* pc = jsFrame.interpreterPC();
+        js::ProfilingStackFrame stackFrame;
+        stackFrame.initJsFrame("""", jsFrame.label, script, pc);
+        aCollector.CollectProfilingStackFrame(stackFrame);
       } else {
         MOZ_ASSERT(jsFrame.kind == JS::ProfilingFrameIterator::Frame_Ion ||
                    jsFrame.kind == JS::ProfilingFrameIterator::Frame_Baseline);
-        aCollector.CollectJitReturnAddr(jsFrame.returnAddress);
+        aCollector.CollectJitReturnAddr(jsFrame.returnAddress());
       }
 
       jsIndex--;
","diff -r 4c1f07ffc220 -r e0fb78ca5c55 js/src/jit-test/tests/profiler/bug1563889.js
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/js/src/jit-test/tests/profiler/bug1563889.js	Thu Aug 01 13:59:21 2019 +0000
@@ -0,0 +1,3 @@
+// |jit-test| skip-if: !('oomTest' in this)
+for (var i = 0; i < 20; i++) {}
+oomTest(enableGeckoProfiling);
diff -r 4c1f07ffc220 -r e0fb78ca5c55 js/src/jit/JitScript.cpp
--- a/js/src/jit/JitScript.cpp	Thu Aug 01 14:03:30 2019 +0000
+++ b/js/src/jit/JitScript.cpp	Thu Aug 01 13:59:21 2019 +0000
@@ -204,9 +204,10 @@
     return;
   }
 
+  AutoEnterOOMUnsafeRegion oomUnsafe;
   profileString_ = cx->runtime()->geckoProfiler().profileString(cx, script);
   if (!profileString_) {
-    MOZ_CRASH(""Failed to allocate profile string"");
+    oomUnsafe.crash(""Failed to allocate profile string"");
   }
 }
 
",1551499,ce56e2779818d25cfa2ac32f38ed84e6811d76a9,"Bug 1551499 - Support Baseline Interpreter code in the profiler. r=djvj

Because the return address cannot be used to uniquely identify script/pc, this
is unfortunately quite different from what we do for Baseline/Ion code.

The strategy is as follows:

* When the profiler is enabled, ensure each JitScript has a pointer to the
  profile string (released when the script is finalized).

* The BaselineInterpreter code is registered with the JitcodeMap.

* The profiler code treats interpreter frames like C++ Interpreter frames,
  instead of doing the return address based mapping.

Differential Revision: https://phabricator.services.mozilla.com/D31052",1563889,"Bug 1563889 - Use AutoEnterOOMUnsafeRegion in JitScript::ensureProfileString. r=djvj

Differential Revision: https://phabricator.services.mozilla.com/D38977",2019-06-21T16:13:00+00:00,Support Baseline Interpreter code in the profiler,,Hit MOZ_CRASH(Failed to allocate profile string) at js/src/jit/JitScript.cpp:197,"The following testcase crashes on mozilla-central revision 2b1bee2c7734 (build with --enable-debug --enable-more-deterministic, run with --fuzzing-safe --no-threads --no-ion):

    // jsfunfuzz-generated
    (function exploreBuiltins() {
        function exploreDeeper(a, an) {
            try {
                h = a[hn];
            } catch (e) {}
        }
        function exploreConstructors() {
            var gns = Object.getOwnPropertyNames(this);
            for (var i = 0; i < gns.length; ++i) {
                var gn = gns[i];
                var g = this[gn];
                if (typeof g === ""function"" && g.toString().indexOf(""]"") !== -1) {
                    exploreDeeper(g.prototype, `${gn}.prototype`);
                }
            }
        }
        exploreConstructors();
    })();
    function makeAsmJSFunction(d, b) {
        handlerFactoryText += "")"";
    }
    var recursiveFunctions = [{
            text: ""function g(){}"",
        },
        {
            text: ""function g(){@}"",
        }
    ];
    for (var i = 0; i < 2; ++i) {
        var a = recursiveFunctions[i];
        var text = a.text;
        eval(text.replace(/@/g, """")); /* eslint-disable-line no-eval */
    }
    makeBuilderStatement = function(d, b) {};
    var asmvals = [
        1, Math.PI, 42,
    ];
    var pureForeign = {}
    var confusableVals = [];
    // Adapted from randomly chosen test: js/src/jit-test/tests/parser/bug-1263355-44.js
    oomTest(async function() {
        enableGeckoProfiling();
    })

Backtrace:

```
#0  js::jit::JitScript::ensureProfileString (this=0x7fd602939000, cx=<optimized out>, script=<optimized out>) at js/src/jit/JitScript.cpp:197
#1  0x000055d4c8a30225 in js::jit::ToggleBaselineProfiling (cx=<optimized out>, enable=<optimized out>) at js/src/jit/BaselineJIT.cpp:1065
#2  0x000055d4c81a6797 in js::GeckoProfilerRuntime::enable (this=<optimized out>, enabled=true) at js/src/vm/GeckoProfiler.cpp:119
#3  0x000055d4c7ec0e03 in EnableGeckoProfiling (cx=0x7fd603117000, argc=<optimized out>, vp=<optimized out>) at js/src/shell/js.cpp:6627
#4  0x000055d4c7f6aff5 in CallJSNative (cx=0x7fd603117000, native=0x55d4c7ec0d30 <EnableGeckoProfiling(JSContext*, unsigned int, JS::Value*)>, args=...) at js/src/vm/Interpreter.cpp:448
#5  0x000055d4c7f5ae9f in js::InternalCallOrConstruct (cx=<optimized out>, args=..., construct=<optimized out>) at js/src/vm/Interpreter.cpp:540
/snip
```

For detailed crash information, see attachment.

Setting s-s as a start as it is a JIT bug. However, it involves profiling via enableGeckoProfiling, so I'm now in not-sure territory."
8a54e897db7c2c553c9f9dbbbed0b90a8d9b8f28,2019-08-19T19:51:00+00:00,"diff -r 4762f5a28a72 -r 1dd4e16a1a96 js/src/jit-test/tests/debug/bug1557343-2.js
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/js/src/jit-test/tests/debug/bug1557343-2.js	Sat Jul 06 00:01:24 2019 +0000
@@ -0,0 +1,30 @@
+// |jit-test| --no-ggc
+// Don't crash when two Debugger.Frames refer to the same generator script, and
+// then one returns.
+
+var g = newGlobal({ newCompartment: true });
+g.eval(`
+  function* gen() {
+    debugger;
+    yield 1;
+  }
+
+  function use_gen() {
+    var gen1 = gen();
+    var gen2 = gen();
+
+    gen1.next();
+    gen2.next();
+
+    gen1.next();
+    gen2.next();
+  }
+`);
+
+var dbg = new Debugger(g);
+var frame;
+dbg.onDebuggerStatement = f => {
+  frame = f;
+};
+
+g.use_gen();
diff -r 4762f5a28a72 -r 1dd4e16a1a96 js/src/vm/Compartment.h
--- a/js/src/vm/Compartment.h	Sat Jul 06 02:36:03 2019 +0000
+++ b/js/src/vm/Compartment.h	Sat Jul 06 00:01:24 2019 +0000
@@ -124,18 +124,10 @@
         : Debuggee(debugger, referent) {}
   };
 
-  // Key under which we find debugger's Debugger.Frame for the generator call
-  // whose AbstractGeneratorObject is referent.
-  struct DebuggeeFrameGeneratorScript : Debuggee<JSScript> {
-    DebuggeeFrameGeneratorScript(NativeObject* debugger, JSScript* referent)
-        : Debuggee(debugger, referent) {}
-  };
-
-  using WrappedType =
-      mozilla::Variant<JSObject*, JSString*, DebuggeeObject, DebuggeeJSScript,
-                       DebuggeeWasmScript, DebuggeeLazyScript,
-                       DebuggeeEnvironment, DebuggeeSource,
-                       DebuggeeFrameGenerator, DebuggeeFrameGeneratorScript>;
+  using WrappedType = mozilla::Variant<JSObject*, JSString*, DebuggeeObject,
+                                       DebuggeeJSScript, DebuggeeWasmScript,
+                                       DebuggeeLazyScript, DebuggeeEnvironment,
+                                       DebuggeeSource, DebuggeeFrameGenerator>;
 
   explicit CrossCompartmentKey(JSObject* obj) : wrapped(obj) {
     MOZ_RELEASE_ASSERT(obj);
@@ -160,8 +152,6 @@
       : wrapped(std::move(key)) {}
   explicit CrossCompartmentKey(DebuggeeFrameGenerator&& key)
       : wrapped(std::move(key)) {}
-  explicit CrossCompartmentKey(DebuggeeFrameGeneratorScript&& key)
-      : wrapped(std::move(key)) {}
   explicit CrossCompartmentKey(NativeObject* debugger, JSScript* referent)
       : wrapped(DebuggeeJSScript(debugger, referent)) {}
   explicit CrossCompartmentKey(NativeObject* debugger, LazyScript* referent)
@@ -602,23 +592,22 @@
                                const js::CrossCompartmentKey& wrapped,
                                const js::Value& wrapper);
 
+  js::WrapperMap::Ptr lookupWrapper(const js::CrossCompartmentKey& key) const {
+    return crossCompartmentWrappers.lookup(key);
+  }
+
   js::WrapperMap::Ptr lookupWrapper(const js::Value& wrapped) const {
-    return crossCompartmentWrappers.lookup(js::CrossCompartmentKey(wrapped));
+    return lookupWrapper(js::CrossCompartmentKey(wrapped));
   }
 
   js::WrapperMap::Ptr lookupWrapper(JSObject* obj) const {
-    return crossCompartmentWrappers.lookup(js::CrossCompartmentKey(obj));
+    return lookupWrapper(js::CrossCompartmentKey(obj));
   }
 
   void removeWrapper(js::WrapperMap::Ptr p) {
     crossCompartmentWrappers.remove(p);
   }
 
-  void removeWrapper(const js::CrossCompartmentKey& key) {
-    js::WrapperMap::Ptr p = crossCompartmentWrappers.lookup(key);
-    crossCompartmentWrappers.remove(p);
-  }
-
   bool hasNurseryAllocatedWrapperEntries(const js::CompartmentFilter& f) {
     return crossCompartmentWrappers.hasNurseryAllocatedWrapperEntries(f);
   }
diff -r 4762f5a28a72 -r 1dd4e16a1a96 js/src/vm/Debugger.cpp
--- a/js/src/vm/Debugger.cpp	Sat Jul 06 02:36:03 2019 +0000
+++ b/js/src/vm/Debugger.cpp	Sat Jul 06 00:01:24 2019 +0000
@@ -9026,6 +9026,15 @@
  *
  * Yes, officer, I definitely knew all this in advance and designed it this way
  * the first time.
+ *
+ * Note that it is not necessary to have a second cross-compartment wrapper
+ * table entry to cover the pointer to the generator's script. The wrapper table
+ * entries play two roles: they help the GC put a debugger zone in the same zone
+ * group as its debuggee, and they serve as roots when collecting the debuggee
+ * zone, but not the debugger zone. Since an AbstractGeneratorObject holds a
+ * strong reference to its callee's script (via the callee), and the AGO and the
+ * script are always in the same compartment, it suffices to add a
+ * cross-compartment wrapper table entry for the Debugger.Frame -> AGO edge.
  */
 class DebuggerFrame::GeneratorInfo {
   // An unwrapped cross-compartment reference to the generator object.
@@ -9076,7 +9085,7 @@
     return true;
   }
 
-  // There are five relations we must establish:
+  // There are four relations we must establish:
   //
   // 1) The DebuggerFrame must point to the AbstractGeneratorObject.
   //
@@ -9086,10 +9095,7 @@
   // 3) The compartment's crossCompartmentWrappers map must map this Debugger
   //    and the AbstractGeneratorObject to the DebuggerFrame.
   //
-  // 4) The compartment's crossCompartmentWrappers map must map this Debugger
-  //    and the generator's JSScript to the DebuggerFrame.
-  //
-  // 5) The generator's script's observer count must be bumped.
+  // 4) The generator's script's observer count must be bumped.
   RootedScript script(cx, genObj->callee().nonLazyScript());
   auto* info = cx->new_<GeneratorInfo>(genObj, script);
   if (!info) {
@@ -9109,17 +9115,14 @@
   Rooted<CrossCompartmentKey> generatorKey(
       cx, CrossCompartmentKey::DebuggeeFrameGenerator(owner()->toJSObject(),
                                                       genObj));
-  Rooted<CrossCompartmentKey> scriptKey(
-      cx, CrossCompartmentKey::DebuggeeFrameGeneratorScript(
-              owner()->toJSObject(), script));
+  if (!compartment()->putWrapper(cx, generatorKey, ObjectValue(*this))) {
+    return false;
+  }
   auto crossCompartmentKeysGuard = MakeScopeExit([&] {
-    compartment()->removeWrapper(generatorKey);
-    compartment()->removeWrapper(scriptKey);
+    WrapperMap::Ptr generatorPtr = compartment()->lookupWrapper(generatorKey);
+    MOZ_ASSERT(generatorPtr);
+    compartment()->removeWrapper(generatorPtr);
   });
-  if (!compartment()->putWrapper(cx, generatorKey, ObjectValue(*this)) ||
-      !compartment()->putWrapper(cx, scriptKey, ObjectValue(*this))) {
-    return false;
-  }
 
   {
     AutoRealm ar(cx, script);
@@ -9144,7 +9147,7 @@
 
   GeneratorInfo* info = generatorInfo();
 
-  // 5) The generator's script's observer count must be dropped.
+  // 4) The generator's script's observer count must be dropped.
   //
   // For ordinary calls, Debugger.Frame objects drop the script's stepper count
   // when the frame is popped, but for generators, they leave the stepper count
@@ -9175,21 +9178,15 @@
     return;
   }
 
-  // 4) The compartment's crossCompartmentWrappers map must map this Debugger
-  //    and the generator's JSScript to the DebuggerFrame.
-  //
   // 3) The compartment's crossCompartmentWrappers map must map this Debugger
   //    and the AbstractGeneratorObject to the DebuggerFrame.
   //
   GeneratorInfo* info = generatorInfo();
-  HeapPtr<JSScript*>& generatorScript = info->generatorScript();
   CrossCompartmentKey generatorKey(CrossCompartmentKey::DebuggeeFrameGenerator(
       owner->object, &info->unwrappedGenerator()));
-  CrossCompartmentKey scriptKey(
-      CrossCompartmentKey::DebuggeeFrameGeneratorScript(owner->object,
-                                                        generatorScript));
-  compartment()->removeWrapper(generatorKey);
-  compartment()->removeWrapper(scriptKey);
+  auto generatorPtr = compartment()->lookupWrapper(generatorKey);
+  MOZ_ASSERT(generatorPtr);
+  compartment()->removeWrapper(generatorPtr);
 
   // 2) generatorFrames must no longer map the AbstractGeneratorObject to the
   // DebuggerFrame.
diff -r 4762f5a28a72 -r 1dd4e16a1a96 js/src/vm/Debugger.h
--- a/js/src/vm/Debugger.h	Sat Jul 06 02:36:03 2019 +0000
+++ b/js/src/vm/Debugger.h	Sat Jul 06 00:01:24 2019 +0000
@@ -1528,7 +1528,7 @@
    *
    * If provided, owner must be the Debugger to which this Debugger.Frame
    * belongs; remove this frame's entry from its generatorFrames map, and clean
-   * up its cross-compartment wrapper table entries. The owner must be passed
+   * up its cross-compartment wrapper table entry. The owner must be passed
    * unless this method is being called from the Debugger.Frame's finalizer. (In
    * that case, the owner is not reliably available, and is not actually
    * necessary.)
","diff -r 59e241707fab -r 8a54e897db7c js/src/jit-test/tests/debug/bug-1564012.js
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/js/src/jit-test/tests/debug/bug-1564012.js	Mon Aug 19 19:51:13 2019 +0000
@@ -0,0 +1,8 @@
+fullcompartmentchecks(true);
+var g = newGlobal({
+    newCompartment: true
+});
+g.eval(""function*f(){debugger;yield}"");
+var dbg = new Debugger(g);
+dbg.onDebuggerStatement = function(frame) {};
+g.f().next();
",1560754,1dd4e16a1a9633c661abd2da224d1046259513e0,"Bug 1560754: Remove DebuggeeFrameGeneratorScript. r=jorendorff

Stop inserting DebuggeeFrameGeneratorScript keys in the cross-compartment
wrapper table for the edges from Debugger.Frames for generator / async calls to
the generators' scripts. The wrappers are unnecessary, and since they're not
unique when multiple Debugger.Frames refer to different calls of the same
generator, we can't easily tell when to remove them.

Differential Revision: https://phabricator.services.mozilla.com/D35617",1564012,"Bug 1564012 - Add fuzz test for cross compartment pointers from debugger frame generator info to scripts r=jimb?

Differential Revision: https://phabricator.services.mozilla.com/D40601",2019-07-06T00:01:00+00:00,"[jsdbg2] DebuggeeFrameGeneratorScript keys are removed when they should not be, and unnecessary anyway","The `DebuggeeFrameGeneratorScript` variant of `CrossCompartmentKey` doesn't carry enough information to make it unique to a single `Debugger.Frame` for a generator call, so if there are ever multiple `Debugger.Frame`s for different calls to a single generator, they will all try to put identical entries in the cross-compartment wrapper table. Subsequent puts will overwrite the first, resulting in a single table entry attempting to serve all the `Debugger.Frame`s. Then, the first time a `Debugger.Frame` tries to remove its key, it will remove the entry the other `Debugger.Frame`s expect to find there.

Fortunately, the `DebuggeeFrameGeneratorScript` keys are, despite being introduced by yours truly in bug 1551176 ([patch]), are unnecessary. Since an `AbstractGeneratorObject` and its callee's script are always in the same compartment, and the `AGO` holds a strong reference to the script, the cross-compartment wrapper table entry for the edge from the `Debugger.Frame` to its `AbstractGeneratorObject` suffices both to document the edge from the debugger's compartment to the debuggee's, and to hold the script alive.

Currently we don't actually try to remove cross-compartment wrapper tables, but the fix for bug 1557343 will begin doing so.

[patch]: https://phabricator.services.mozilla.com/D32272","Assertion failure: comp == compartment || (srcKind == JS::TraceKind::Object && InCrossCompartmentMap(static_cast<JSObject*>(src), thing)), at js/src/gc/GC.cpp:4257","The following testcase crashes on mozilla-central revision 483d687212fb (build with --enable-debug --enable-more-deterministic, run with --fuzzing-safe --no-threads --no-baseline --no-ion):

    // jsfunfuzz-generated
    fullcompartmentchecks(true);
    // Adapted from randomly chosen test: js/src/jit-test/tests/debug/Frame-identity-05.js
    var g = newGlobal({
        newCompartment: true
    });
    g.eval(""function*f(){debugger;yield}"");
    var dbg = new Debugger(g);
    dbg.onDebuggerStatement = function(frame) {};
    g.f().next();

Backtrace:

```
#0  CompartmentCheckTracer::onChild (this=<optimized out>, thing=...) at js/src/gc/GC.cpp:4255
#1  0x000055dc035cf285 in JS::CallbackTracer::onScriptEdge (this=<optimized out>, scriptp=<optimized out>) at /home/ubuntu/shell-cache/js-dbg-64-dm-linux-x86_64-483d687212fb/objdir-js/dist/include/js/TracingAPI.h:164
#2  0x000055dc03a90ab0 in JS::CallbackTracer::dispatchToOnEdge (this=0x7ffe1d515628, scriptp=0x7fb8a0b1b1f8) at /home/ubuntu/shell-cache/js-dbg-64-dm-linux-x86_64-483d687212fb/objdir-js/dist/include/js/TracingAPI.h:261
#3  DoCallback<JSScript> (trc=0x7ffe1d515628, thingp=0x7fb8a0b1b1f8, name=0x55dc01f391b7 ""Debugger.Frame generator script"") at js/src/gc/Tracer.cpp:45
#4  0x000055dc03430633 in js::Class::doTrace (this=<optimized out>, trc=<optimized out>, obj=<optimized out>) at /home/ubuntu/shell-cache/js-dbg-64-dm-linux-x86_64-483d687212fb/objdir-js/dist/include/js/Class.h:872
/snip
```

For detailed crash information, see attachment."
149fa7bb765e2df6990ab0b3744143be131d6f02,2019-07-19T19:08:00+00:00,"diff -r b7a9e6822e73 -r 2c4c4dd5de14 toolkit/components/extensions/ExtensionStorageIDB.jsm
--- a/toolkit/components/extensions/ExtensionStorageIDB.jsm	Tue Jul 09 16:01:21 2019 +0000
+++ b/toolkit/components/extensions/ExtensionStorageIDB.jsm	Tue Jul 09 16:01:23 2019 +0000
@@ -15,6 +15,7 @@
 
 XPCOMUtils.defineLazyModuleGetters(this, {
   ExtensionStorage: ""resource://gre/modules/ExtensionStorage.jsm"",
+  ExtensionUtils: ""resource://gre/modules/ExtensionUtils.jsm"",
   getTrimmedString: ""resource://gre/modules/ExtensionTelemetry.jsm"",
   Services: ""resource://gre/modules/Services.jsm"",
   OS: ""resource://gre/modules/osfile.jsm"",
@@ -767,6 +768,49 @@
     );
   },
 
+  /**
+   * Ensure that an error originated from the ExtensionStorageIDB methods is normalized
+   * into an ExtensionError (e.g. DataCloneError and QuotaExceededError instances raised
+   * from the internal IndexedDB operations have to be converted into an ExtensionError
+   * to be accessible to the extension code).
+   *
+   * @param {Error|ExtensionError|DOMException} error
+   *        The error object to normalize.
+   *
+   * @returns {ExtensionError}
+   *          Return an ExtensionError error instance.
+   */
+  normalizeStorageError(error) {
+    const { ExtensionError } = ExtensionUtils;
+
+    if (error instanceof ExtensionError) {
+      return error;
+    }
+
+    let errorMessage;
+
+    if (error instanceof DOMException) {
+      switch (error.name) {
+        case ""DataCloneError"":
+          errorMessage = String(error);
+          break;
+        case ""QuotaExceededError"":
+          errorMessage = `${
+            error.name
+          }: storage.local API call exceeded its quota limitations.`;
+          break;
+      }
+    }
+
+    if (!errorMessage) {
+      Cu.reportError(error);
+
+      errorMessage = ""An unexpected error occurred"";
+    }
+
+    return new ExtensionError(errorMessage);
+  },
+
   addOnChangedListener(extensionId, listener) {
     let listeners = this.listeners.get(extensionId) || new Set();
     listeners.add(listener);
diff -r b7a9e6822e73 -r 2c4c4dd5de14 toolkit/components/extensions/child/ext-storage.js
--- a/toolkit/components/extensions/child/ext-storage.js	Tue Jul 09 16:01:21 2019 +0000
+++ b/toolkit/components/extensions/child/ext-storage.js	Tue Jul 09 16:01:23 2019 +0000
@@ -244,11 +244,18 @@
             // if this context has been destroyed in the meantime.
             if (method !== ""get"") {
               // Let the outer try to catch rejections returned by the backend methods.
-              const result = await context.childManager.callParentAsyncFunction(
-                ""storage.local.callMethodInParentProcess"",
-                [method, args]
-              );
-              return result;
+              try {
+                const result = await context.childManager.callParentAsyncFunction(
+                  ""storage.local.callMethodInParentProcess"",
+                  [method, args]
+                );
+                return result;
+              } catch (err) {
+                // Just return the rejection as is, the error has been normalized in the
+                // parent process by callMethodInParentProcess and the original error
+                // logged in the browser console.
+                return Promise.reject(err);
+              }
             }
 
             // Get the selected backend and cache it for the next API calls from this context.
@@ -259,10 +266,7 @@
           const result = await selectedBackend[method](...args);
           return result;
         } catch (err) {
-          // Ensure that the error we throw is converted into an ExtensionError
-          // (e.g. DataCloneError instances raised from the internal IndexedDB
-          // operation have to be converted to be accessible to the extension code).
-          throw new ExtensionUtils.ExtensionError(String(err));
+          throw ExtensionStorageIDB.normalizeStorageError(err);
         }
       };
     }
diff -r b7a9e6822e73 -r 2c4c4dd5de14 toolkit/components/extensions/parent/ext-storage.js
--- a/toolkit/components/extensions/parent/ext-storage.js	Tue Jul 09 16:01:21 2019 +0000
+++ b/toolkit/components/extensions/parent/ext-storage.js	Tue Jul 09 16:01:23 2019 +0000
@@ -84,11 +84,20 @@
               res.storagePrincipal.deserialize(this, true),
               persisted
             );
-            const changes = await db[method](...args);
-            if (changes) {
-              ExtensionStorageIDB.notifyListeners(extension.id, changes);
+            try {
+              const changes = await db[method](...args);
+              if (changes) {
+                ExtensionStorageIDB.notifyListeners(extension.id, changes);
+              }
+              return changes;
+            } catch (err) {
+              const normalizedError = ExtensionStorageIDB.normalizeStorageError(
+                err
+              ).message;
+              return Promise.reject({
+                message: String(normalizedError),
+              });
             }
-            return changes;
           },
           // Private storage.local JSONFile backend methods (used internally by the child
           // ext-storage.js module).
diff -r b7a9e6822e73 -r 2c4c4dd5de14 toolkit/components/extensions/test/xpcshell/head.js
--- a/toolkit/components/extensions/test/xpcshell/head.js	Tue Jul 09 16:01:21 2019 +0000
+++ b/toolkit/components/extensions/test/xpcshell/head.js	Tue Jul 09 16:01:23 2019 +0000
@@ -1,7 +1,8 @@
 ""use strict"";
 
-/* exported createHttpServer, promiseConsoleOutput, cleanupDir, clearCache, testEnv
-            runWithPrefs, withHandlingUserInput */
+/* exported createHttpServer, cleanupDir, clearCache, promiseConsoleOutput,
+            promiseQuotaManagerServiceReset, promiseQuotaManagerServiceClear,
+            runWithPrefs, testEnv, withHandlingUserInput */
 
 var { AppConstants } = ChromeUtils.import(
   ""resource://gre/modules/AppConstants.jsm""
@@ -245,3 +246,21 @@
     false
   );
 }
+
+// QuotaManagerService test helpers.
+
+function promiseQuotaManagerServiceReset() {
+  info(""Calling QuotaManagerService.reset to enforce new test storage limits"");
+  return new Promise(resolve => {
+    Services.qms.reset().callback = resolve;
+  });
+}
+
+function promiseQuotaManagerServiceClear() {
+  info(
+    ""Calling QuotaManagerService.clear to empty the test data and refresh test storage limits""
+  );
+  return new Promise(resolve => {
+    Services.qms.clear().callback = resolve;
+  });
+}
diff -r b7a9e6822e73 -r 2c4c4dd5de14 toolkit/components/extensions/test/xpcshell/test_ext_storage_idb_data_migration.js
--- a/toolkit/components/extensions/test/xpcshell/test_ext_storage_idb_data_migration.js	Tue Jul 09 16:01:21 2019 +0000
+++ b/toolkit/components/extensions/test/xpcshell/test_ext_storage_idb_data_migration.js	Tue Jul 09 16:01:23 2019 +0000
@@ -722,3 +722,73 @@
   await promiseShutdownManager();
   await TelemetryController.testShutdown();
 });
+
+add_task(async function setup_quota_manager_testing_prefs() {
+  Services.prefs.setBoolPref(""dom.quotaManager.testing"", true);
+  Services.prefs.setIntPref(
+    ""dom.quotaManager.temporaryStorage.fixedLimit"",
+    100
+  );
+  await promiseQuotaManagerServiceReset();
+});
+
+add_task(async function test_quota_exceeded_while_migrating_data() {
+  const EXT_ID = ""test-data-migration-stuck@mochi.test"";
+  const dataSize = 1000 * 1024;
+
+  await createExtensionJSONFileWithData(EXT_ID, {
+    data: new Array(dataSize).fill(""x"").join(""""),
+  });
+
+  const extension = ExtensionTestUtils.loadExtension({
+    manifest: {
+      permissions: [""storage""],
+      applications: { gecko: { id: EXT_ID } },
+    },
+    background() {
+      browser.test.onMessage.addListener(async (msg, dataSize) => {
+        if (msg !== ""verify-stored-data"") {
+          return;
+        }
+        const res = await browser.storage.local.get();
+        browser.test.assertEq(
+          res.data && res.data.length,
+          dataSize,
+          ""Got the expected data""
+        );
+        browser.test.sendMessage(""verify-stored-data:done"");
+      });
+
+      browser.test.sendMessage(""bg-page:ready"");
+    },
+  });
+
+  await extension.startup();
+  await extension.awaitMessage(""bg-page:ready"");
+
+  extension.sendMessage(""verify-stored-data"", dataSize);
+  await extension.awaitMessage(""verify-stored-data:done"");
+
+  await ok(
+    !ExtensionStorageIDB.isMigratedExtension(extension),
+    ""The extension falls back to the JSONFile backend because of the migration failure""
+  );
+  await extension.unload();
+
+  TelemetryTestUtils.assertEvents(
+    [
+      {
+        value: EXT_ID,
+        extra: {
+          backend: ""JSONFile"",
+          error_name: ""QuotaExceededError"",
+        },
+      },
+    ],
+    TELEMETRY_EVENTS_FILTER
+  );
+
+  Services.prefs.clearUserPref(""dom.quotaManager.temporaryStorage.fixedLimit"");
+  await promiseQuotaManagerServiceClear();
+  Services.prefs.clearUserPref(""dom.quotaManager.testing"");
+});
diff -r b7a9e6822e73 -r 2c4c4dd5de14 toolkit/components/extensions/test/xpcshell/test_ext_storage_quota_exceeded_errors.js
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/toolkit/components/extensions/test/xpcshell/test_ext_storage_quota_exceeded_errors.js	Tue Jul 09 16:01:23 2019 +0000
@@ -0,0 +1,82 @@
+/* -*- Mode: indent-tabs-mode: nil; js-indent-level: 2 -*- */
+/* vim: set sts=2 sw=2 et tw=80: */
+
+""use strict"";
+
+ChromeUtils.defineModuleGetter(
+  this,
+  ""ExtensionStorageIDB"",
+  ""resource://gre/modules/ExtensionStorageIDB.jsm""
+);
+
+const LEAVE_STORAGE_PREF = ""extensions.webextensions.keepStorageOnUninstall"";
+const LEAVE_UUID_PREF = ""extensions.webextensions.keepUuidOnUninstall"";
+
+AddonTestUtils.init(this);
+
+add_task(async function setup() {
+  // Ensure that the IDB backend is enabled.
+  Services.prefs.setBoolPref(""ExtensionStorageIDB.BACKEND_ENABLED_PREF"", true);
+
+  Services.prefs.setBoolPref(""dom.quotaManager.testing"", true);
+  Services.prefs.setIntPref(
+    ""dom.quotaManager.temporaryStorage.fixedLimit"",
+    100
+  );
+  await promiseQuotaManagerServiceReset();
+
+  await ExtensionTestUtils.startAddonManager();
+});
+
+add_task(async function test_storage_local_set_quota_exceeded_error() {
+  const EXT_ID = ""test-quota-exceeded@mochi.test"";
+
+  const extensionDef = {
+    manifest: {
+      permissions: [""storage""],
+      applications: { gecko: { id: EXT_ID } },
+    },
+    async background() {
+      const data = new Array(1000 * 1024).fill(""x"").join("""");
+      await browser.test.assertRejects(
+        browser.storage.local.set({ data }),
+        /QuotaExceededError/,
+        ""Got a rejection with the expected error message""
+      );
+      browser.test.sendMessage(""data-stored"");
+    },
+  };
+
+  Services.prefs.setBoolPref(LEAVE_STORAGE_PREF, true);
+  Services.prefs.setBoolPref(LEAVE_UUID_PREF, true);
+  registerCleanupFunction(() => {
+    Services.prefs.clearUserPref(LEAVE_STORAGE_PREF);
+    Services.prefs.clearUserPref(LEAVE_UUID_PREF);
+  });
+
+  const extension = ExtensionTestUtils.loadExtension(extensionDef);
+
+  // Run test on a test extension being migrated to the IDB backend.
+  await extension.startup();
+  await extension.awaitMessage(""data-stored"");
+
+  ok(
+    ExtensionStorageIDB.isMigratedExtension(extension),
+    ""The extension has been successfully migrated to the IDB backend""
+  );
+  await extension.unload();
+
+  // Run again on a test extension already already migrated to the IDB backend.
+  const extensionUpdated = ExtensionTestUtils.loadExtension(extensionDef);
+  await extensionUpdated.startup();
+  ok(
+    ExtensionStorageIDB.isMigratedExtension(extension),
+    ""The extension has been successfully migrated to the IDB backend""
+  );
+  await extensionUpdated.awaitMessage(""data-stored"");
+
+  await extensionUpdated.unload();
+
+  Services.prefs.clearUserPref(""dom.quotaManager.temporaryStorage.fixedLimit"");
+  await promiseQuotaManagerServiceClear();
+});
diff -r b7a9e6822e73 -r 2c4c4dd5de14 toolkit/components/extensions/test/xpcshell/xpcshell-common.ini
--- a/toolkit/components/extensions/test/xpcshell/xpcshell-common.ini	Tue Jul 09 16:01:21 2019 +0000
+++ b/toolkit/components/extensions/test/xpcshell/xpcshell-common.ini	Tue Jul 09 16:01:23 2019 +0000
@@ -125,6 +125,7 @@
 skip-if = os == ""android"" && debug
 [test_ext_storage_content.js]
 skip-if = os == ""android"" && debug
+[test_ext_storage_quota_exceeded_errors.js]
 [test_ext_storage_managed.js]
 skip-if = os == ""android""
 [test_ext_storage_managed_policy.js]
","diff -r e9cc61207fb8 -r 149fa7bb765e toolkit/components/extensions/test/xpcshell/test_ext_storage_idb_data_migration.js
--- a/toolkit/components/extensions/test/xpcshell/test_ext_storage_idb_data_migration.js	Fri Jul 19 19:01:47 2019 +0000
+++ b/toolkit/components/extensions/test/xpcshell/test_ext_storage_idb_data_migration.js	Fri Jul 19 19:08:36 2019 +0000
@@ -732,7 +732,14 @@
   await promiseQuotaManagerServiceReset();
 });
 
-add_task(async function test_quota_exceeded_while_migrating_data() {
+add_task(
+  // TODO: temporarily disabled because it currently perma-fails on
+  // android builds (Bug 1564871)
+  { skip_if: () => AppConstants.platform === ""android"" },
+  // eslint-disable-next-line no-use-before-define
+  test_quota_exceeded_while_migrating_data
+);
+async function test_quota_exceeded_while_migrating_data() {
   const EXT_ID = ""test-data-migration-stuck@mochi.test"";
   const dataSize = 1000 * 1024;
 
@@ -791,4 +798,4 @@
   Services.prefs.clearUserPref(""dom.quotaManager.temporaryStorage.fixedLimit"");
   await promiseQuotaManagerServiceClear();
   Services.prefs.clearUserPref(""dom.quotaManager.testing"");
-});
+}
diff -r e9cc61207fb8 -r 149fa7bb765e toolkit/components/extensions/test/xpcshell/xpcshell-common.ini
--- a/toolkit/components/extensions/test/xpcshell/xpcshell-common.ini	Fri Jul 19 19:01:47 2019 +0000
+++ b/toolkit/components/extensions/test/xpcshell/xpcshell-common.ini	Fri Jul 19 19:08:36 2019 +0000
@@ -126,6 +126,7 @@
 [test_ext_storage_content.js]
 skip-if = os == ""android"" && debug
 [test_ext_storage_quota_exceeded_errors.js]
+skip-if = os == ""android"" # Bug 1564871
 [test_ext_storage_managed.js]
 skip-if = os == ""android""
 [test_ext_storage_managed_policy.js]
",1555491,2c4c4dd5de14845dc02a20c0a75844137e2293ce,"Bug 1555491 - Normalize errors raised from the storage.local IndexedDB backend. r=kmag,ttung

Differential Revision: https://phabricator.services.mozilla.com/D36514",1564871,"Bug 1564871 - Skip storage.local API QuotaExceededError tests that permafail on android builds. r=mixedpuppy

Differential Revision: https://phabricator.services.mozilla.com/D38693",2019-07-09T16:01:00+00:00,Privacy Badgers users occasionally see error messages related to IndexedDB,"User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:67.0) Gecko/20100101 Firefox/67.0



Actual results:

Several bugs have been filed with Privacy Badger that display errors related to IndexedDB. The two separate error messages are:

`AbortError: A request was aborted, for example through a call to IDBTransaction.abort`

`InvalidStateError: A mutation operation was attempted on a database that did not allow mutations.`

Is there anything we or our users can do to prevent these error messages from occurring? Thanks.",Perma [Tier 2] toolkit/components/extensions/test/xpcshell/test_ext_storage_idb_data_migration.js | test_quota_exceeded_while_migrating_data - [test_quota_exceeded_while_migrating_data : 772] The extension falls back to the JSONFile backend because of the,"**Filed by:** malexandru [at] mozilla.com
**Parsed log:** https://treeherder.mozilla.org/logviewer.html#?job_id=255694594&repo=mozilla-central
**Full log:** https://queue.taskcluster.net/v1/task/MAQQI_4lQ862KIwTWxZizQ/runs/0/artifacts/public/logs/live_backing.log

---

[task 2019-07-10T12:15:02.070Z] 12:15:02     INFO -  ""Calling QuotaManagerService.reset to enforce new test storage limits""
[task 2019-07-10T12:15:02.070Z] 12:15:02     INFO -  (xpcshell/head.js) | test run_next_test 10 finished (2)
[task 2019-07-10T12:15:02.070Z] 12:15:02     INFO -  (xpcshell/head.js) | test run_next_test 11 pending (2)
[task 2019-07-10T12:15:02.070Z] 12:15:02     INFO -  (xpcshell/head.js) | test setup_quota_manager_testing_prefs finished (2)
[task 2019-07-10T12:15:02.071Z] 12:15:02     INFO -  xpcshell.ini:toolkit/components/extensions/test/xpcshell/test_ext_storage_idb_data_migration.js | Starting test_quota_exceeded_while_migrating_data
[task 2019-07-10T12:15:02.071Z] 12:15:02     INFO -  (xpcshell/head.js) | test test_quota_exceeded_while_migrating_data pending (2)
[task 2019-07-10T12:15:02.071Z] 12:15:02     INFO -  (xpcshell/head.js) | test run_next_test 11 finished (2)
[task 2019-07-10T12:15:02.071Z] 12:15:02     INFO -  TEST-PASS | xpcshell.ini:toolkit/components/extensions/test/xpcshell/test_ext_storage_idb_data_migration.js | test_quota_exceeded_while_migrating_data - [test_quota_exceeded_while_migrating_data : 62] The old json file has been created - true == true
[task 2019-07-10T12:15:02.071Z] 12:15:02     INFO -  ""Extension attached""
[task 2019-07-10T12:15:02.071Z] 12:15:02     INFO -  ""CONSOLE_MESSAGE: (info) Migrating storage.local data for ""Generated extension"" (ID: test-data-migration-stuck@mochi.test, moz-extension://016d9e48-aeb0-4f63-a8e4-7bdeda8c8ff2/)...""
[task 2019-07-10T12:15:02.072Z] 12:15:02     INFO -  ""CONSOLE_MESSAGE: (info) storage.local data successfully migrated to IDB Backend for ""Generated extension"" (ID: test-data-migration-stuck@mochi.test, moz-extension://016d9e48-aeb0-4f63-a8e4-7bdeda8c8ff2/).""
[task 2019-07-10T12:15:02.072Z] 12:15:02     INFO -  TEST-PASS | xpcshell.ini:toolkit/components/extensions/test/xpcshell/test_ext_storage_idb_data_migration.js | test_quota_exceeded_while_migrating_data - [test_quota_exceeded_while_migrating_data : 402] Got the expected data - Expected: 1024000, Actual: 1024000 - true == true
[task 2019-07-10T12:15:02.072Z] 12:15:02  WARNING -  TEST-UNEXPECTED-FAIL | xpcshell.ini:toolkit/components/extensions/test/xpcshell/test_ext_storage_idb_data_migration.js | test_quota_exceeded_while_migrating_data - [test_quota_exceeded_while_migrating_data : 772] The extension falls back to the JSONFile backend because of the migration failure - false == true
[task 2019-07-10T12:15:02.073Z] 12:15:02     INFO -  test_ext_storage_idb_data_migration.js:test_quota_exceeded_while_migrating_data:772
[task 2019-07-10T12:15:02.073Z] 12:15:02     INFO -  /sdcard/tests/xpc/head.js:_do_main:245
[task 2019-07-10T12:15:02.073Z] 12:15:02     INFO -  /sdcard/tests/xpc/head.js:_execute_test:572
[task 2019-07-10T12:15:02.073Z] 12:15:02     INFO -  -e:null:1
[task 2019-07-10T12:15:02.073Z] 12:15:02     INFO -  exiting test
[task 2019-07-10T12:15:02.073Z] 12:15:02     INFO -  Unexpected exception NS_ERROR_ABORT:
[task 2019-07-10T12:15:02.073Z] 12:15:02     INFO -  _abort_failed_test@/sdcard/tests/xpc/head.js:788:20
[task 2019-07-10T12:15:02.074Z] 12:15:02     INFO -  do_report_result@/sdcard/tests/xpc/head.js:889:5
[task 2019-07-10T12:15:02.074Z] 12:15:02     INFO -  Assert<@/sdcard/tests/xpc/head.js:66:5
[task 2019-07-10T12:15:02.074Z] 12:15:02     INFO -  proto.report@resource://testing-common/Assert.jsm:233:10
[task 2019-07-10T12:15:02.074Z] 12:15:02     INFO -  proto.ok@resource://testing-common/Assert.jsm:259:10
[task 2019-07-10T12:15:02.074Z] 12:15:02     INFO -  test_quota_exceeded_while_migrating_data@test_ext_storage_idb_data_migration.js:772:9
[task 2019-07-10T12:15:02.074Z] 12:15:02     INFO -  _do_main@/sdcard/tests/xpc/head.js:245:6
[task 2019-07-10T12:15:02.075Z] 12:15:02     INFO -  _execute_test@/sdcard/tests/xpc/head.js:572:5
[task 2019-07-10T12:15:02.075Z] 12:15:02     INFO -  @-e:1:1
[task 2019-07-10T12:15:02.075Z] 12:15:02     INFO -  exiting test
[task 2019-07-10T12:15:02.075Z] 12:15:02  WARNING -  TEST-UNEXPECTED-FAIL | xpcshell.ini:toolkit/components/extensions/test/xpcshell/test_ext_storage_idb_data_migration.js | test_quota_exceeded_while_migrating_data - [test_quota_exceeded_while_migrating_data : 323] Extension left running at test shutdown - ""running"" == ""unloaded""
[task 2019-07-10T12:15:02.075Z] 12:15:02     INFO -  resource://testing-common/ExtensionXPCShellUtils.jsm:ExtensionWrapper/<:323
[task 2019-07-10T12:15:02.075Z] 12:15:02     INFO -  /sdcard/tests/xpc/head.js:_execute_test/<:635
[task 2019-07-10T12:15:02.076Z] 12:15:02     INFO -  /sdcard/tests/xpc/head.js:_execute_test:644
[task 2019-07-10T12:15:02.076Z] 12:15:02     INFO -  -e:null:1
[task 2019-07-10T12:15:02.076Z] 12:15:02     INFO -  exiting test
[task 2019-07-10T12:15:02.076Z] 12:15:02     INFO -  NS_ERROR_ABORT:
[task 2019-07-10T12:15:02.076Z] 12:15:02     INFO -  _abort_failed_test@/sdcard/tests/xpc/head.js:788:20
[task 2019-07-10T12:15:02.076Z] 12:15:02     INFO -  do_report_result@/sdcard/tests/xpc/head.js:889:5
[task 2019-07-10T12:15:02.077Z] 12:15:02     INFO -  Assert<@/sdcard/tests/xpc/head.js:66:5
[task 2019-07-10T12:15:02.077Z] 12:15:02     INFO -  proto.report@resource://testing-common/Assert.jsm:233:10
[task 2019-07-10T12:15:02.077Z] 12:15:02     INFO -  equal@resource://testing-common/Assert.jsm:275:8
[task 2019-07-10T12:15:02.077Z] 12:15:02     INFO -  ExtensionWrapper/<@resource://testing-common/ExtensionXPCShellUtils.jsm:323:24
[task 2019-07-10T12:15:02.077Z] 12:15:02     INFO -  _execute_test/<@/sdcard/tests/xpc/head.js:635:28
[task 2019-07-10T12:15:02.077Z] 12:15:02     INFO -  _execute_test@/sdcard/tests/xpc/head.js:644:5
[task 2019-07-10T12:15:02.077Z] 12:15:02     INFO -  @-e:1:1
[task 2019-07-10T12:15:02.078Z] 12:15:02     INFO -  Error: Found unexpected files in temporary directory: generated-extension.xpi at resource://testing-common/AddonTestUtils.jsm:466"
d0cf03130c937cb7a83662ea857286b8cc0adf12,2019-07-17T12:41:00+00:00,"diff -r b6f817bdcd5c -r ddd8910e7d83 gfx/layers/apz/test/mochitest/browser.ini
--- a/gfx/layers/apz/test/mochitest/browser.ini	Fri Jul 12 18:20:29 2019 +0000
+++ b/gfx/layers/apz/test/mochitest/browser.ini	Fri Jul 12 17:13:04 2019 +0000
@@ -1,4 +1,5 @@
 [browser_test_group_fission.js]
+skip-if = os == 'win' && bits == 32     # Some subtests fail intermittently on Win7
 support-files =
   apz_test_native_event_utils.js
   apz_test_utils.js
diff -r b6f817bdcd5c -r ddd8910e7d83 gfx/layers/apz/test/mochitest/browser_test_group_fission.js
--- a/gfx/layers/apz/test/mochitest/browser_test_group_fission.js	Fri Jul 12 18:20:29 2019 +0000
+++ b/gfx/layers/apz/test/mochitest/browser_test_group_fission.js	Fri Jul 12 17:13:04 2019 +0000
@@ -14,12 +14,12 @@
   // is fission-enabled.
   var test_urls = [
     httpURL(""helper_fission_basic.html""),
+    httpURL(""helper_fission_transforms.html""),
+    httpURL(""helper_fission_scroll_oopif.html""),
     // add additional tests here
   ];
   if (isWebRender) {
     test_urls = test_urls.concat([
-      httpURL(""helper_fission_transforms.html""),
-      httpURL(""helper_fission_scroll_oopif.html""),
       // add additional WebRender-specific tests here
     ]);
   }
","diff -r 238a8eb35207 -r d0cf03130c93 gfx/layers/apz/test/mochitest/apz_test_utils.js
--- a/gfx/layers/apz/test/mochitest/apz_test_utils.js	Wed Jul 17 10:35:44 2019 +0000
+++ b/gfx/layers/apz/test/mochitest/apz_test_utils.js	Wed Jul 17 12:41:16 2019 +0000
@@ -198,6 +198,13 @@
   return false;
 }
 
+// Return a promise that is resolved on the next rAF callback
+function waitForFrame() {
+  return new Promise(resolve => {
+    window.requestAnimationFrame(resolve);
+  });
+}
+
 function promiseApzRepaintsFlushed(aWindow = window) {
   return new Promise(function(resolve, reject) {
     var repaintDone = function() {
diff -r 238a8eb35207 -r d0cf03130c93 gfx/layers/apz/test/mochitest/helper_fission_empty.html
--- a/gfx/layers/apz/test/mochitest/helper_fission_empty.html	Wed Jul 17 10:35:44 2019 +0000
+++ b/gfx/layers/apz/test/mochitest/helper_fission_empty.html	Wed Jul 17 12:41:16 2019 +0000
@@ -1,14 +1,22 @@
 <!DOCTYPE html>
 <html>
  <meta charset=""utf-8"">
+ <script src=""apz_test_utils.js""></script>
  <script>
 // This is an empty document that serves as a OOPIF content document that be
 // reused by different fission subtests. The subtest can eval stuff in this
 // document using the sendToOopif helper and thereby populate this document
 // with whatever is needed. This allows the subtest to more ""contained"" in a
 // single file and avoids having to create new dummy files for each subtest.
-function loaded() {
+async function loaded() {
   window.dispatchEvent(new Event(""FissionTestHelper:Init""));
+  // Wait a couple of animation frames before sending the load, to ensure that
+  // this OOPIF's layer tree has been sent to the compositor. We use this
+  // instead of things like flushApzRepaints and/or waitForAllPaints because
+  // this page is running without SpecialPowers and I couldn't figure out a good
+  // way to get a hold of a things like Services.obs or DOMWindowUtils easily.
+  await waitForFrame();
+  await waitForFrame();
   FissionTestHelper.fireEventInEmbedder(""OOPIF:Load"", {content: window.location.href});
 }
  </script>
diff -r 238a8eb35207 -r d0cf03130c93 gfx/layers/apz/test/mochitest/helper_no_scalable_with_initial_scale.html
--- a/gfx/layers/apz/test/mochitest/helper_no_scalable_with_initial_scale.html	Wed Jul 17 10:35:44 2019 +0000
+++ b/gfx/layers/apz/test/mochitest/helper_no_scalable_with_initial_scale.html	Wed Jul 17 12:41:16 2019 +0000
@@ -20,11 +20,6 @@
   <div style=""width: 400%; height: 400%; background: red;""></div>
   <div style=""width: 100%; height: 100%; background-color: blue""></div>
   <script type=""application/javascript"">
-    function waitForFrame() {
-      return new Promise(resolve => {
-          window.requestAnimationFrame(resolve);
-      });
-    }
     const utils = SpecialPowers.getDOMWindowUtils(window);
 
     async function test(testDriver) {
",1560312,ddd8910e7d83e2a2c43395357c9ae889a5a5aa6f,"Bug 1560312 - Run fission tests without WR as well. r=botond

This also disables the test on Windows 7 because the newly enabled subtests
fail intermittently there. We don't care so much about Windows 7 these days,
and I don't have a local setup to reproduce it, so I didn't investigate the
failure.

Differential Revision: https://phabricator.services.mozilla.com/D37819",1565670,"Bug 1565670 - Wait for a couple of rAF calls before declaring OOPIFs ready for testing. r=botond

This should ensure that the OOPIF gets painted and attached to the
compositor layer tree before the main part of the test starts. We might
be able to do something more sophisticated like waitForAllPaints or
flushApzRepaints, but it's not trivial because this page loads with an
example.com domain and can't easily access SpecialPowers.

Differential Revision: https://phabricator.services.mozilla.com/D38225",2019-07-12T17:13:00+00:00,Make the fission subtests for browser_test_group_fission work on non-WR,"In bug 1559259 :rhunt added a fix for the APZ/fission hit-testing codepath for non-WR. This should have made all the subtests pass without WebRender, but for some reason they were still failing (see e.g. bug 1559565). We should figure out why and fix it.

One possible reason is that the OOP iframe doesn't get a displayport and so APZ doesn't have a layers id for it. That is, the rectangle is just in the dispatch-to-content region for the top-level content document. If that's the case then we can probably modify the test to force setting a displayport. But it might also get fixed by bug 1541589.",Intermittent gfx/layers/apz/test/mochitest/browser_test_group_fission.js | Test timed out -,"**Filed by:** rmaries [at] mozilla.com
**Parsed log:** https://treeherder.mozilla.org/logviewer.html#?job_id=256262689&repo=autoland
**Full log:** https://queue.taskcluster.net/v1/task/ZsuWfy_FTK6C7aBi0ghKRA/runs/0/artifacts/public/logs/live_backing.log
**Reftest URL:** https://hg.mozilla.org/mozilla-central/raw-file/tip/layout/tools/reftest/reftest-analyzer.xhtml#logurl=https://queue.taskcluster.net/v1/task/ZsuWfy_FTK6C7aBi0ghKRA/runs/0/artifacts/public/logs/live_backing.log&only_show_unexpected=1

---

undefined"
0e7a3ae29aa06ca711de68abbad94c37109b2320,2020-03-24T19:19:00+00:00,"diff -r f7ab0e6e739b -r b30211be4a04 toolkit/content/widgets/videocontrols.js
--- a/toolkit/content/widgets/videocontrols.js	Thu Feb 14 15:14:10 2019 +0000
+++ b/toolkit/content/widgets/videocontrols.js	Thu Feb 14 15:30:53 2019 +0000
@@ -1559,6 +1559,10 @@
       },
 
       get isClosedCaptionAvailable() {
+        // There is no rendering area, no need to show the caption.
+        if (!this.video.videoWidth || !this.video.videoHeight) {
+          return false;
+        }
         return this.overlayableTextTracks.length;
       },
 
","diff -r fec7d30f8811 -r 0e7a3ae29aa0 toolkit/content/widgets/videocontrols.js
--- a/toolkit/content/widgets/videocontrols.js	Tue Mar 24 18:58:46 2020 +0000
+++ b/toolkit/content/widgets/videocontrols.js	Tue Mar 24 19:19:07 2020 +0000
@@ -1823,7 +1823,7 @@
 
       get isClosedCaptionAvailable() {
         // There is no rendering area, no need to show the caption.
-        if (!this.video.videoWidth || !this.video.videoHeight) {
+        if (this.isAudioOnly) {
           return false;
         }
         return this.overlayableTextTracks.length;
",1527688,b30211be4a04f8fbaace77828a0d9d1e80df2df4,"Bug 1527688 - do not show caption button when there is no rendering area. r=jaws

According to the spec 7.1.1, https://www.w3.org/TR/webvtt1/#processing-model

""If the media element is an audio element, or is another playback mechanism with no rendering area, abort these steps""

Which also means that we should not show the caption button if there is no rendering area.

Differential Revision: https://phabricator.services.mozilla.com/D19695",1566199,"Bug 1566199 - check 'isAudioOnly' for knowing if we have rendering area or not. r=Gijs

The not-preloaded video would have `0`  width and height, so using width and length as a condition of showing caption or not would incorrectly exclude the not-preloaded video. Therefore, we should check `isAudioOnly` instead.

Differential Revision: https://phabricator.services.mozilla.com/D68074",2019-02-14T15:30:00+00:00,[webvtt] do not show caption button when there is no rendering area,"According to the spec 7.1.1, https://www.w3.org/TR/webvtt1/#processing-model

`If the media element is an audio element, or is another playback mechanism with no rendering area, abort these steps`

Which also means that we should not show the caption button if there is no rendering area.","Subtitle selection widget not displayed with 'preload=""none""'","User Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0

Steps to reproduce:

Load the following HTML code (no need to provide subtitle files):

```html
<div>
    <video width=""480"" height=""201"" controls preload=""none"" crossorigin=""anonymous"">
        <source src=""https://media.luffy.cx/videos/2019-self-hosted-videos-subtitles/progressive.mp4"" type='video/mp4; codecs=""avc1.4d401f, mp4a.40.2""'>
        <track src=""2019-self-hosted-videos-subtitles.de.vtt"" kind=""subtitles"" srclang=""de"" label=""Deutsch"">
        <track src=""2019-self-hosted-videos-subtitles.en.vtt"" kind=""subtitles"" srclang=""en"" label=""English"">
    </video>
</div>

<div>
    <video width=""480"" height=""201"" controls crossorigin=""anonymous"">
        <source src=""https://media.luffy.cx/videos/2019-self-hosted-videos-subtitles/progressive.mp4"" type='video/mp4; codecs=""avc1.4d401f, mp4a.40.2""'>
        <track src=""2019-self-hosted-videos-subtitles.de.vtt"" kind=""subtitles"" srclang=""de"" label=""Deutsch"">
        <track src=""2019-self-hosted-videos-subtitles.en.vtt"" kind=""subtitles"" srclang=""en"" label=""English"">
    </video>
</div>
```


Actual results:

The first video doesn't show the subtitle selection widget until you press play. The second video shows the subtitle selection widget on load.


Expected results:

The first video should have shown the subtitle selection widget too. There is no need to preload the video to have the appropriate information to populate the subtitle menu."
d551e573d4ce43cc14ffca24eaa2c2c312b134d1,2019-09-03T12:20:00+00:00,"diff -r 7e88127111fe -r 5ca49059949b js/src/jit-test/tests/wasm/gc/stackmaps1.js
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/js/src/jit-test/tests/wasm/gc/stackmaps1.js	Fri Dec 14 13:00:44 2018 +0100
@@ -0,0 +1,89 @@
+// |jit-test| skip-if: !wasmGcEnabled()
+
+// Tests wasm frame tracing.  Only tests for direct and indirect call chains
+// in wasm that lead to JS allocation.  Does not test any timeout or interrupt
+// related aspects.  The structure is
+//
+//   test top level: call fn2
+//   fn2: call fn1
+//   fn1: do 100k times { call-direct fn0; call-indirect fn0; }
+//   fn0: call out to JS that does allocation
+//
+// Eventually fn0 will trigger GC and we expect the chain of resulting frames
+// to be traced correctly.  fn2, fn1 and fn0 have some ref-typed args, so
+// there will be traceable stack words to follow, in the sequence of frames.
+
+const {Module,Instance} = WebAssembly;
+
+let t =
+  `(module
+     (gc_feature_opt_in 2)
+     (import $check3 """" ""check3"" (func (param anyref) (param anyref) (param anyref)))
+     (type $typeOfFn0
+           (func (result i32) (param i32) (param anyref) (param i32)
+                              (param anyref) (param anyref) (param i32)))
+     (table 1 1 anyfunc)
+     (elem (i32.const 0) $fn0)
+
+     (import $alloc """" ""alloc"" (func (result anyref)))
+
+     ;; -- fn 0
+     (func $fn0 (export ""fn0"")
+                (result i32) (param $arg1 i32) (param $arg2 anyref) (param $arg3 i32)
+                             (param $arg4 anyref) (param $arg5 anyref) (param $arg6 i32)
+       (call $alloc)
+       drop
+       (i32.add (i32.add (get_local $arg1) (get_local $arg3)) (get_local $arg6))
+
+       ;; Poke the ref-typed arguments, to be sure that they got kept alive
+       ;; properly across any GC that the |alloc| call might have done.
+       (call $check3 (get_local $arg2) (get_local $arg4) (get_local $arg5))
+     )
+
+     ;; -- fn 1
+     (func $fn1 (export ""fn1"") (param $arg1 anyref) (result i32)
+       (local $i i32)
+
+       (loop i32
+         ;; call direct 0
+         (call $fn0 (i32.const 10) (get_local $arg1) (i32.const 12)
+                    (get_local $arg1) (get_local $arg1) (i32.const 15))
+
+         ;; call indirect 0
+         (call_indirect $typeOfFn0
+                    (i32.const 10) (get_local $arg1) (i32.const 12)
+                    (get_local $arg1) (get_local $arg1) (i32.const 15)
+                    (i32.const 0)) ;; table index
+
+         i32.add
+
+         ;; Do 60k iterations of this loop, to get a good amount of allocation
+         (set_local $i (i32.add (get_local $i) (i32.const 1)))
+         (br_if 0 (i32.lt_s (get_local $i) (i32.const 60000)))
+       )
+     )
+
+     ;; -- fn 2
+     (func $fn2 (export ""fn2"") (param $arg1 anyref) (result i32)
+       (call $fn1 (get_local $arg1))
+     )
+   )`;
+
+function Croissant(chocolate, number) {
+    this.chocolate = chocolate;
+    this.number = number;
+}
+
+function allocates() {
+    return new Croissant(true, 271828);
+}
+
+function check3(a1, a2, a3) {
+    assertEq(a1.number, 31415927);
+    assertEq(a2.number, 31415927);
+    assertEq(a3.number, 31415927);
+}
+
+let i = wasmEvalText(t, {"""":{alloc: allocates, check3: check3}});
+
+print(i.exports.fn2( new Croissant(false, 31415927) ));
diff -r 7e88127111fe -r 5ca49059949b js/src/jit-test/tests/wasm/gc/stackmaps2.js
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/js/src/jit-test/tests/wasm/gc/stackmaps2.js	Fri Dec 14 13:00:44 2018 +0100
@@ -0,0 +1,134 @@
+// |jit-test| skip-if: !wasmGcEnabled()
+
+// Tests wasm frame tracing in the presence of interrupt handlers that perform
+// allocation.  The structure is
+//
+//   test top level: call fn2
+//   fn2: call fn1
+//   fn1: repeat { call-direct fn0; call-indirect fn0; }
+//   fn0: a 100-iteration loop that does nothing except waste time
+//
+// At the same time we are asynchronously runnning handler(), which does a lot
+// of allocation.  At some point that will trigger a GC.  Assuming that
+// handler() runs whilst fn0 is running (the most likely scenario, since fn0
+// consumes the majority of the wasm running time), then the runtime will walk
+// the stack from the wasm exit frame, through fn0, fn1 and finally fn2.  As
+// with stackmaps1.js, there are some ref-typed args in use so as provide
+// traceable stack slots to follow.
+//
+// The test runs until the loop in fn1 determines that handler() has allocated
+// sufficient memory as to have caused at least three collections.  This helps
+// keep the test effective in the face of wide variations in the rate of
+// progress of the handler()'s loop (eg x86+native is fast, arm64+simulator is
+// slow).
+
+const {Module,Instance} = WebAssembly;
+
+const DEBUG = false;
+
+let t =
+  `(module
+     (gc_feature_opt_in 2)
+     (type $typeOfFn0
+           (func (result i32) (param i32) (param anyref) (param i32)
+                              (param anyref) (param anyref) (param i32)))
+     (table 1 1 anyfunc)
+     (elem (i32.const 0) $fn0)
+
+     (import $alloc """" ""alloc"" (func (result anyref)))
+     (import $quitp """" ""quitp"" (func (result i32)))
+     (import $check3 """" ""check3"" (func (param anyref) (param anyref) (param anyref)))
+
+     ;; -- fn 0
+     (func $fn0 (export ""fn0"")
+                (result i32) (param $arg1 i32) (param $arg2 anyref) (param $arg3 i32)
+                             (param $arg4 anyref) (param $arg5 anyref) (param $arg6 i32)
+       (local $i i32)
+
+       ;; spinloop to waste time
+       (loop
+         (set_local $i (i32.add (get_local $i) (i32.const 1)))
+         (br_if 0 (i32.lt_s (get_local $i) (i32.const 100)))
+       )
+
+       (i32.add (i32.add (get_local $arg1) (get_local $arg3)) (get_local $arg6))
+
+       ;; Poke the ref-typed arguments, to be sure that they got kept alive
+       ;; properly across any GC that might have happened.
+       (call $check3 (get_local $arg2) (get_local $arg4) (get_local $arg5))
+     )
+
+     ;; -- fn 1
+     (func $fn1 (export ""fn1"") (param $arg1 anyref) (result i32)
+       (loop i32
+         ;; call direct to $fn0
+         (call $fn0 (i32.const 10) (get_local $arg1) (i32.const 12)
+                    (get_local $arg1) (get_local $arg1) (i32.const 15))
+
+         ;; call indirect to table index 0, which is $fn0
+         (call_indirect $typeOfFn0
+                    (i32.const 10) (get_local $arg1) (i32.const 12)
+                    (get_local $arg1) (get_local $arg1) (i32.const 15)
+                    (i32.const 0)) ;; table index
+
+         i32.add
+
+         ;; Continue iterating until handler() has allocated enough
+         (br_if 0 (i32.eq (call $quitp) (i32.const 0)))
+       )
+     )
+
+     ;; -- fn 2
+     (func $fn2 (export ""fn2"") (param $arg1 anyref) (result i32)
+       (call $fn1 (get_local $arg1))
+     )
+   )`;
+
+function Croissant(chocolate, number) {
+    this.chocolate = chocolate;
+    this.number = number;
+}
+
+function allocates() {
+    return new Croissant(true, 271828);
+}
+
+let totAllocs = 0;
+
+function handler() {
+    if (DEBUG) {
+        print('XXXXXXXX icallback: START');
+    }
+    let q = allocates();
+    let sum = 0;
+    let iters = 15000;
+    for (let i = 0; i < iters; i++) {
+        let x = allocates();
+        // Without this hoop jumping to create an apparent use of |x|, Ion
+        // will remove the allocation call and make the test pointless.
+        if (x == q) { sum++; }
+    }
+    totAllocs += iters;
+    // Artificial use of |sum|.  See comment above.
+    if (sum == 133713371337) { print(""unlikely!""); }
+    timeout(0.5, handler);
+    if (DEBUG) {
+        print('XXXXXXXX icallback: END');
+    }
+    return true;
+}
+
+function quitp() {
+    return totAllocs > 200000 ? 1 : 0;
+}
+
+function check3(a1, a2, a3) {
+    assertEq(a1.number, 31415927);
+    assertEq(a2.number, 31415927);
+    assertEq(a3.number, 31415927);
+}
+
+let i = wasmEvalText(t, {"""":{alloc: allocates, quitp: quitp, check3: check3}});
+
+timeout(0.5, handler);
+print(i.exports.fn2( new Croissant(false, 31415927) ));
diff -r 7e88127111fe -r 5ca49059949b js/src/jit-test/tests/wasm/gc/stackmaps3.js
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/js/src/jit-test/tests/wasm/gc/stackmaps3.js	Fri Dec 14 13:00:44 2018 +0100
@@ -0,0 +1,204 @@
+// |jit-test| skip-if: !wasmGcEnabled()
+
+// Generates a bunch of numbers-on-the-heap, and tries to ensure that they are
+// held live -- at least for a short while -- only by references from the wasm
+// evaluation stack.  Then assembles them in a list and checks that the list
+// is as expected (and we don't segfault).  While all this is running we also
+// have an regular interrupt whose handler does a bunch of allocation, so as
+// to cause as much disruption as possible.
+
+// Note this makes an assumption about how the wasm compiler works.  There's
+// no particular reason that the wasm compiler needs to keep the results of
+// the $mkBoxedInt calls on the machine stack.  It could equally cache them in
+// registers or even reorder the call sequences so as to interleave
+// construction of the list elements with construction of the list itself.  It
+// just happens that our baseline compiler will behave as described.  That
+// said, however, it's hard to imagine how an implementation could complete
+// the list construction without having at least one root in a register or on
+// the stack, so the test still has value regardless of how the underlying
+// implementation works.
+
+const {Module,Instance} = WebAssembly;
+
+const DEBUG = false;
+
+let t =
+  `(module
+     (gc_feature_opt_in 2)
+     (import $mkCons """" ""mkCons"" (func (result anyref)
+                                       (param anyref) (param anyref)))
+     (import $mkBoxedInt """" ""mkBoxedInt"" (func (result anyref)))
+
+     (func $mkNil (result anyref)
+       ref.null
+     )
+
+     (func $mkConsIgnoringScalar (result anyref)
+              (param $hd anyref) (param i32) (param $tl anyref)
+        (get_local $hd)
+        (get_local $tl)
+        call $mkCons
+     )
+
+     (func $mkList (export ""mkList"") (result anyref)
+        call $mkList20
+     )
+
+     (func $mkList20 (result anyref)
+       ;; create 20 pointers to boxed ints on the stack, plus a few
+       ;; scalars for added confusion
+       (local $scalar99 i32)
+       (local $scalar97 i32)
+       (set_local $scalar99 (i32.const 99))
+       (set_local $scalar97 (i32.const 97))
+
+       call $mkBoxedInt
+       get_local $scalar99
+       call $mkBoxedInt
+       call $mkBoxedInt
+       get_local $scalar97
+       call $mkBoxedInt
+       call $mkBoxedInt
+       call $mkBoxedInt
+       call $mkBoxedInt
+       call $mkBoxedInt
+       call $mkBoxedInt
+       call $mkBoxedInt
+       call $mkBoxedInt
+       call $mkBoxedInt
+       call $mkBoxedInt
+       call $mkBoxedInt
+       call $mkBoxedInt
+       call $mkBoxedInt
+       call $mkBoxedInt
+       call $mkBoxedInt
+       call $mkBoxedInt
+       call $mkBoxedInt
+       call $mkNil
+       ;; Now we have (pointers to) 20 boxed ints and a NIL on the stack, and
+       ;; nothing else holding them live.  Build a list from the elements.
+       call $mkCons
+       call $mkCons
+       call $mkCons
+       call $mkCons
+       call $mkCons
+       call $mkCons
+       call $mkCons
+       call $mkCons
+       call $mkCons
+       call $mkCons
+       call $mkCons
+       call $mkCons
+       call $mkCons
+       call $mkCons
+       call $mkCons
+       call $mkCons
+       call $mkCons
+       call $mkConsIgnoringScalar
+       call $mkCons
+       call $mkConsIgnoringScalar
+     )
+   )`;
+
+let boxedIntCounter = 0;
+
+function BoxedInt() {
+    this.theInt = boxedIntCounter;
+    boxedIntCounter++;
+}
+
+function mkBoxedInt() {
+    return new BoxedInt();
+}
+
+function printBoxedInt(bi) {
+    print(bi.theInt);
+}
+
+function Cons(hd, tl) {
+    this.hd = hd;
+    this.tl = tl;
+}
+
+function mkCons(hd, tl) {
+    return new Cons(hd, tl);
+}
+
+function showList(list) {
+    print(""["");
+    while (list) {
+        printBoxedInt(list.hd);
+        print("","");
+        list = list.tl;
+    }
+    print(""]"");
+}
+
+function checkList(list, expectedHdValue, expectedLength) {
+    while (list) {
+        if (expectedLength <= 0)
+            return false;
+        if (list.hd.theInt !== expectedHdValue) {
+            return false;
+        }
+        list = list.tl;
+        expectedHdValue++;
+        expectedLength--;
+    }
+    if (expectedLength == 0) {
+        return true;
+    } else {
+        return false;
+    }
+}
+
+let i = wasmEvalText(t, {"""":{mkCons: mkCons, mkBoxedInt: mkBoxedInt}});
+
+
+function Croissant(chocolate) {
+    this.chocolate = chocolate;
+}
+
+function allocates() {
+    return new Croissant(true);
+}
+
+function handler() {
+    if (DEBUG) {
+        print('XXXXXXXX icallback: START');
+    }
+    let q = allocates();
+    let sum = 0;
+    for (let i = 0; i < 15000; i++) {
+        let x = allocates();
+        // Without this hoop jumping to create an apparent use of |x|, Ion
+        // will remove the allocation call and make the test pointless.
+        if (x == q) { sum++; }
+    }
+    // Artificial use of |sum|.  See comment above.
+    if (sum == 133713371337) { print(""unlikely!""); }
+    timeout(1, handler);
+    if (DEBUG) {
+        print('XXXXXXXX icallback: END');
+    }
+    return true;
+}
+
+timeout(1, handler);
+
+for (let n = 0; n < 10000; n++) {
+    let listLowest = boxedIntCounter;
+
+    // Create the list in wasm land, possibly inducing GC on the way
+    let aList = i.exports.mkList();
+
+    // Check it is as we expect
+    let ok = checkList(aList, listLowest, 20/*expected length*/);
+    if (!ok) {
+        print(""Failed on list: "");
+        showList(aList);
+    }
+    assertEq(ok, true);
+}
+
+// If we get here, the test finished successfully.
diff -r 7e88127111fe -r 5ca49059949b js/src/jit/JitFrames.cpp
--- a/js/src/jit/JitFrames.cpp	Tue Dec 11 18:27:01 2018 +0000
+++ b/js/src/jit/JitFrames.cpp	Fri Dec 14 13:00:44 2018 +0100
@@ -1295,6 +1295,10 @@
   activation->traceRematerializedFrames(trc);
   activation->traceIonRecovery(trc);
 
+  // This is used for sanity checking continuity of the sequence of wasm stack
+  // maps as we unwind.  It has no functional purpose.
+  uintptr_t highestByteVisitedInPrevWasmFrame = 0;
+
   for (JitFrameIter frames(activation); !frames.done(); ++frames) {
     if (frames.isJSJit()) {
       const JSJitFrameIter& jitFrame = frames.asJSJit();
@@ -1331,9 +1335,16 @@
         default:
           MOZ_CRASH(""unexpected frame type"");
       }
+      highestByteVisitedInPrevWasmFrame = 0; /* ""unknown"" */
     } else {
       MOZ_ASSERT(frames.isWasm());
-      frames.asWasm().instance()->trace(trc);
+      uint8_t* nextPC = frames.returnAddressToFp();
+      MOZ_ASSERT(nextPC != 0);
+      wasm::WasmFrameIter& wasmFrameIter = frames.asWasm();
+      wasm::Instance* instance = wasmFrameIter.instance();
+      instance->trace(trc);
+      highestByteVisitedInPrevWasmFrame = instance->traceFrame(
+          trc, wasmFrameIter, nextPC, highestByteVisitedInPrevWasmFrame);
     }
   }
 }
diff -r 7e88127111fe -r 5ca49059949b js/src/jit/MacroAssembler-inl.h
--- a/js/src/jit/MacroAssembler-inl.h	Tue Dec 11 18:27:01 2018 +0000
+++ b/js/src/jit/MacroAssembler-inl.h	Fri Dec 14 13:00:44 2018 +0100
@@ -51,14 +51,18 @@
 
 void MacroAssembler::call(TrampolinePtr code) { call(ImmPtr(code.value)); }
 
-void MacroAssembler::call(const wasm::CallSiteDesc& desc, const Register reg) {
+CodeOffset MacroAssembler::call(const wasm::CallSiteDesc& desc,
+                                const Register reg) {
   CodeOffset l = call(reg);
   append(desc, l);
+  return l;
 }
 
-void MacroAssembler::call(const wasm::CallSiteDesc& desc, uint32_t funcIndex) {
+CodeOffset MacroAssembler::call(const wasm::CallSiteDesc& desc,
+                                uint32_t funcIndex) {
   CodeOffset l = callWithPatch();
   append(desc, l, funcIndex);
+  return l;
 }
 
 void MacroAssembler::call(const wasm::CallSiteDesc& desc, wasm::Trap trap) {
@@ -66,12 +70,13 @@
   append(desc, l, trap);
 }
 
-void MacroAssembler::call(const wasm::CallSiteDesc& desc,
-                          wasm::SymbolicAddress imm) {
+CodeOffset MacroAssembler::call(const wasm::CallSiteDesc& desc,
+                                wasm::SymbolicAddress imm) {
   MOZ_ASSERT(wasm::NeedsBuiltinThunk(imm),
              ""only for functions which may appear in profiler"");
-  call(imm);
-  append(desc, CodeOffset(currentOffset()));
+  CodeOffset raOffset = call(imm);
+  append(desc, raOffset);
+  return raOffset;
 }
 
 // ===============================================================
diff -r 7e88127111fe -r 5ca49059949b js/src/jit/MacroAssembler.cpp
--- a/js/src/jit/MacroAssembler.cpp	Tue Dec 11 18:27:01 2018 +0000
+++ b/js/src/jit/MacroAssembler.cpp	Fri Dec 14 13:00:44 2018 +0100
@@ -3152,9 +3152,9 @@
 #endif
 }
 
-void MacroAssembler::callWithABI(wasm::BytecodeOffset bytecode,
-                                 wasm::SymbolicAddress imm,
-                                 MoveOp::Type result) {
+CodeOffset MacroAssembler::callWithABI(wasm::BytecodeOffset bytecode,
+                                       wasm::SymbolicAddress imm,
+                                       MoveOp::Type result) {
   MOZ_ASSERT(wasm::NeedsBuiltinThunk(imm));
 
   // We clobber WasmTlsReg below in the loadWasmTlsRegFromFrame(), but Ion
@@ -3169,10 +3169,14 @@
   // points when placing arguments.
   loadWasmTlsRegFromFrame();
 
-  call(wasm::CallSiteDesc(bytecode.offset(), wasm::CallSite::Symbolic), imm);
+  CodeOffset raOffset = call(
+      wasm::CallSiteDesc(bytecode.offset(), wasm::CallSite::Symbolic), imm);
+
   callWithABIPost(stackAdjust, result, /* callFromWasm = */ true);
 
   Pop(WasmTlsReg);
+
+  return raOffset;
 }
 
 // ===============================================================
@@ -3394,8 +3398,8 @@
   }
 }
 
-void MacroAssembler::wasmCallImport(const wasm::CallSiteDesc& desc,
-                                    const wasm::CalleeDesc& callee) {
+CodeOffset MacroAssembler::wasmCallImport(const wasm::CallSiteDesc& desc,
+                                          const wasm::CalleeDesc& callee) {
   // Load the callee, before the caller's registers are clobbered.
   uint32_t globalDataOffset = callee.importGlobalDataOffset();
   loadWasmGlobalPtr(globalDataOffset + offsetof(wasm::FuncImportTls, code),
@@ -3416,10 +3420,10 @@
                     WasmTlsReg);
   loadWasmPinnedRegsFromTls();
 
-  call(desc, ABINonArgReg0);
+  return call(desc, ABINonArgReg0);
 }
 
-void MacroAssembler::wasmCallBuiltinInstanceMethod(
+CodeOffset MacroAssembler::wasmCallBuiltinInstanceMethod(
     const wasm::CallSiteDesc& desc, const ABIArg& instanceArg,
     wasm::SymbolicAddress builtin) {
   MOZ_ASSERT(instanceArg != ABIArg());
@@ -3437,12 +3441,12 @@
     MOZ_CRASH(""Unknown abi passing style for pointer"");
   }
 
-  call(desc, builtin);
+  return call(desc, builtin);
 }
 
-void MacroAssembler::wasmCallIndirect(const wasm::CallSiteDesc& desc,
-                                      const wasm::CalleeDesc& callee,
-                                      bool needsBoundsCheck) {
+CodeOffset MacroAssembler::wasmCallIndirect(const wasm::CallSiteDesc& desc,
+                                            const wasm::CalleeDesc& callee,
+                                            bool needsBoundsCheck) {
   Register scratch = WasmTableCallScratchReg0;
   Register index = WasmTableCallIndexReg;
 
@@ -3465,8 +3469,7 @@
       addPtr(index, scratch);
     }
     loadPtr(Address(scratch, offsetof(wasm::FunctionTableElem, code)), scratch);
-    call(desc, scratch);
-    return;
+    return call(desc, scratch);
   }
 
   MOZ_ASSERT(callee.which() == wasm::CalleeDesc::WasmTable);
@@ -3519,7 +3522,7 @@
 
   loadPtr(Address(scratch, offsetof(wasm::FunctionTableElem, code)), scratch);
 
-  call(desc, scratch);
+  return call(desc, scratch);
 }
 
 void MacroAssembler::emitPreBarrierFastPath(JSRuntime* rt, MIRType type,
diff -r 7e88127111fe -r 5ca49059949b js/src/jit/MacroAssembler.h
--- a/js/src/jit/MacroAssembler.h	Tue Dec 11 18:27:01 2018 +0000
+++ b/js/src/jit/MacroAssembler.h	Fri Dec 14 13:00:44 2018 +0100
@@ -421,22 +421,26 @@
   // ===============================================================
   // Simple call functions.
 
+  // The returned CodeOffset is the assembler offset for the instruction
+  // immediately following the call; that is, for the return point.
   CodeOffset call(Register reg) PER_SHARED_ARCH;
   CodeOffset call(Label* label) PER_SHARED_ARCH;
+
   void call(const Address& addr) PER_SHARED_ARCH;
   void call(ImmWord imm) PER_SHARED_ARCH;
   // Call a target native function, which is neither traceable nor movable.
   void call(ImmPtr imm) PER_SHARED_ARCH;
-  void call(wasm::SymbolicAddress imm) PER_SHARED_ARCH;
-  inline void call(const wasm::CallSiteDesc& desc, wasm::SymbolicAddress imm);
+  CodeOffset call(wasm::SymbolicAddress imm) PER_SHARED_ARCH;
+  inline CodeOffset call(const wasm::CallSiteDesc& desc,
+                         wasm::SymbolicAddress imm);
 
   // Call a target JitCode, which must be traceable, and may be movable.
   void call(JitCode* c) PER_SHARED_ARCH;
 
   inline void call(TrampolinePtr code);
 
-  inline void call(const wasm::CallSiteDesc& desc, const Register reg);
-  inline void call(const wasm::CallSiteDesc& desc, uint32_t funcDefIndex);
+  inline CodeOffset call(const wasm::CallSiteDesc& desc, const Register reg);
+  inline CodeOffset call(const wasm::CallSiteDesc& desc, uint32_t funcDefIndex);
   inline void call(const wasm::CallSiteDesc& desc, wasm::Trap trap);
 
   CodeOffset callWithPatch() PER_SHARED_ARCH;
@@ -582,8 +586,8 @@
   inline void callWithABI(const Address& fun,
                           MoveOp::Type result = MoveOp::GENERAL);
 
-  void callWithABI(wasm::BytecodeOffset offset, wasm::SymbolicAddress fun,
-                   MoveOp::Type result = MoveOp::GENERAL);
+  CodeOffset callWithABI(wasm::BytecodeOffset offset, wasm::SymbolicAddress fun,
+                         MoveOp::Type result = MoveOp::GENERAL);
 
  private:
   // Reinitialize the variables which have to be cleared before making a call
@@ -1863,19 +1867,20 @@
 
   // This function takes care of loading the callee's TLS and pinned regs but
   // it is the caller's responsibility to save/restore TLS or pinned regs.
-  void wasmCallImport(const wasm::CallSiteDesc& desc,
-                      const wasm::CalleeDesc& callee);
+  CodeOffset wasmCallImport(const wasm::CallSiteDesc& desc,
+                            const wasm::CalleeDesc& callee);
 
   // WasmTableCallIndexReg must contain the index of the indirect call.
-  void wasmCallIndirect(const wasm::CallSiteDesc& desc,
-                        const wasm::CalleeDesc& callee, bool needsBoundsCheck);
+  CodeOffset wasmCallIndirect(const wasm::CallSiteDesc& desc,
+                              const wasm::CalleeDesc& callee,
+                              bool needsBoundsCheck);
 
   // This function takes care of loading the pointer to the current instance
   // as the implicit first argument. It preserves TLS and pinned registers.
   // (TLS & pinned regs are non-volatile registers in the system ABI).
-  void wasmCallBuiltinInstanceMethod(const wasm::CallSiteDesc& desc,
-                                     const ABIArg& instanceArg,
-                                     wasm::SymbolicAddress builtin);
+  CodeOffset wasmCallBuiltinInstanceMethod(const wasm::CallSiteDesc& desc,
+                                           const ABIArg& instanceArg,
+                                           wasm::SymbolicAddress builtin);
 
   // As enterFakeExitFrame(), but using register conventions appropriate for
   // wasm stubs.
diff -r 7e88127111fe -r 5ca49059949b js/src/jit/Registers.h
--- a/js/src/jit/Registers.h	Tue Dec 11 18:27:01 2018 +0000
+++ b/js/src/jit/Registers.h	Fri Dec 14 13:00:44 2018 +0100
@@ -263,6 +263,9 @@
   void write(Register reg, uintptr_t value) const {
     regs_[reg.code()]->r = value;
   }
+  const Registers::RegisterContent* address(Register reg) const {
+    return regs_[reg.code()];
+  }
   const FloatRegisters::RegisterContent* address(FloatRegister reg) const {
     return fpregs_[reg.code()];
   }
diff -r 7e88127111fe -r 5ca49059949b js/src/jit/arm/MacroAssembler-arm.cpp
--- a/js/src/jit/arm/MacroAssembler-arm.cpp	Tue Dec 11 18:27:01 2018 +0000
+++ b/js/src/jit/arm/MacroAssembler-arm.cpp	Fri Dec 14 13:00:44 2018 +0100
@@ -4177,9 +4177,9 @@
   ma_call(imm);
 }
 
-void MacroAssembler::call(wasm::SymbolicAddress imm) {
+CodeOffset MacroAssembler::call(wasm::SymbolicAddress imm) {
   movePtr(imm, CallReg);
-  call(CallReg);
+  return call(CallReg);
 }
 
 void MacroAssembler::call(const Address& addr) {
diff -r 7e88127111fe -r 5ca49059949b js/src/jit/arm64/MacroAssembler-arm64.cpp
--- a/js/src/jit/arm64/MacroAssembler-arm64.cpp	Tue Dec 11 18:27:01 2018 +0000
+++ b/js/src/jit/arm64/MacroAssembler-arm64.cpp	Fri Dec 14 13:00:44 2018 +0100
@@ -583,12 +583,12 @@
   Blr(vixl::ip0);
 }
 
-void MacroAssembler::call(wasm::SymbolicAddress imm) {
+CodeOffset MacroAssembler::call(wasm::SymbolicAddress imm) {
   vixl::UseScratchRegisterScope temps(this);
   const Register scratch = temps.AcquireX().asUnsized();
   syncStackPtr();
   movePtr(imm, scratch);
-  call(scratch);
+  return call(scratch);
 }
 
 void MacroAssembler::call(const Address& addr) {
diff -r 7e88127111fe -r 5ca49059949b js/src/jit/mips-shared/MacroAssembler-mips-shared.cpp
--- a/js/src/jit/mips-shared/MacroAssembler-mips-shared.cpp	Tue Dec 11 18:27:01 2018 +0000
+++ b/js/src/jit/mips-shared/MacroAssembler-mips-shared.cpp	Fri Dec 14 13:00:44 2018 +0100
@@ -1457,9 +1457,9 @@
   *u32 = targetOffset - farJump.offset();
 }
 
-void MacroAssembler::call(wasm::SymbolicAddress target) {
+CodeOffset MacroAssembler::call(wasm::SymbolicAddress target) {
   movePtr(target, CallReg);
-  call(CallReg);
+  return call(CallReg);
 }
 
 void MacroAssembler::call(const Address& addr) {
diff -r 7e88127111fe -r 5ca49059949b js/src/jit/x86-shared/MacroAssembler-x86-shared.cpp
--- a/js/src/jit/x86-shared/MacroAssembler-x86-shared.cpp	Tue Dec 11 18:27:01 2018 +0000
+++ b/js/src/jit/x86-shared/MacroAssembler-x86-shared.cpp	Fri Dec 14 13:00:44 2018 +0100
@@ -599,9 +599,9 @@
   Assembler::call(Operand(addr.base, addr.offset));
 }
 
-void MacroAssembler::call(wasm::SymbolicAddress target) {
+CodeOffset MacroAssembler::call(wasm::SymbolicAddress target) {
   mov(target, eax);
-  Assembler::call(eax);
+  return Assembler::call(eax);
 }
 
 void MacroAssembler::call(ImmWord target) { Assembler::call(target); }
diff -r 7e88127111fe -r 5ca49059949b js/src/vm/Stack.cpp
--- a/js/src/vm/Stack.cpp	Tue Dec 11 18:27:01 2018 +0000
+++ b/js/src/vm/Stack.cpp	Fri Dec 14 13:00:44 2018 +0100
@@ -540,6 +540,13 @@
   return asJSJit().script()->realm();
 }
 
+uint8_t* JitFrameIter::returnAddressToFp() const {
+  if (isWasm()) {
+    return asWasm().returnAddressToFp();
+  }
+  return asJSJit().returnAddressToFp();
+}
+
 bool JitFrameIter::done() const {
   if (!isSome()) {
     return true;
diff -r 7e88127111fe -r 5ca49059949b js/src/vm/Stack.h
--- a/js/src/vm/Stack.h	Tue Dec 11 18:27:01 2018 +0000
+++ b/js/src/vm/Stack.h	Fri Dec 14 13:00:44 2018 +0100
@@ -1883,6 +1883,10 @@
 
   JS::Realm* realm() const;
 
+  // Returns the return address of the frame above this one (that is, the
+  // return address that returns back to the current frame).
+  uint8_t* returnAddressToFp() const;
+
   // Operations which have an effect only on JIT frames.
   void skipNonScriptedJSFrames();
 
diff -r 7e88127111fe -r 5ca49059949b js/src/wasm/WasmBaselineCompile.cpp
--- a/js/src/wasm/WasmBaselineCompile.cpp	Tue Dec 11 18:27:01 2018 +0000
+++ b/js/src/wasm/WasmBaselineCompile.cpp	Fri Dec 14 13:00:44 2018 +0100
@@ -142,6 +142,7 @@
 #include ""wasm/WasmInstance.h""
 #include ""wasm/WasmOpIter.h""
 #include ""wasm/WasmSignalHandlers.h""
+#include ""wasm/WasmStubs.h""
 #include ""wasm/WasmValidate.h""
 
 #include ""jit/MacroAssembler-inl.h""
@@ -1582,10 +1583,10 @@
     masm.storeFloat32(src, Address(sp_, localOffset(dest)));
   }
 
- private:
   // Offset off of sp_ for `local`.
   int32_t localOffset(const Local& local) { return localOffset(local.offs); }
 
+ private:
   // Offset off of sp_ for a local with offset `offset` from Frame.
   int32_t localOffset(int32_t offset) { return masm.framePushed() - offset; }
 
@@ -1827,6 +1828,552 @@
   ra->freeI32(zero);
 }
 
+// Value stack: stack elements
+
+struct Stk {
+ private:
+  Stk() : kind_(Unknown), i64val_(0) {}
+
+ public:
+  enum Kind {
+    // The Mem opcodes are all clustered at the beginning to
+    // allow for a quick test within sync().
+    MemI32,  // 32-bit integer stack value (""offs"")
+    MemI64,  // 64-bit integer stack value (""offs"")
+    MemF32,  // 32-bit floating stack value (""offs"")
+    MemF64,  // 64-bit floating stack value (""offs"")
+    MemRef,  // reftype (pointer wide) stack value (""offs"")
+
+    // The Local opcodes follow the Mem opcodes for a similar
+    // quick test within hasLocal().
+    LocalI32,  // Local int32 var (""slot"")
+    LocalI64,  // Local int64 var (""slot"")
+    LocalF32,  // Local float32 var (""slot"")
+    LocalF64,  // Local double var (""slot"")
+    LocalRef,  // Local reftype (pointer wide) var (""slot"")
+
+    RegisterI32,  // 32-bit integer register (""i32reg"")
+    RegisterI64,  // 64-bit integer register (""i64reg"")
+    RegisterF32,  // 32-bit floating register (""f32reg"")
+    RegisterF64,  // 64-bit floating register (""f64reg"")
+    RegisterRef,  // reftype (pointer wide) register (""refReg"")
+
+    ConstI32,  // 32-bit integer constant (""i32val"")
+    ConstI64,  // 64-bit integer constant (""i64val"")
+    ConstF32,  // 32-bit floating constant (""f32val"")
+    ConstF64,  // 64-bit floating constant (""f64val"")
+    ConstRef,  // reftype (pointer wide) constant (""refval"")
+
+    Unknown,
+  };
+
+  Kind kind_;
+
+  static const Kind MemLast = MemRef;
+  static const Kind LocalLast = LocalRef;
+
+  union {
+    RegI32 i32reg_;
+    RegI64 i64reg_;
+    RegPtr refReg_;
+    RegF32 f32reg_;
+    RegF64 f64reg_;
+    int32_t i32val_;
+    int64_t i64val_;
+    intptr_t refval_;
+    float f32val_;
+    double f64val_;
+    uint32_t slot_;
+    uint32_t offs_;
+  };
+
+  explicit Stk(RegI32 r) : kind_(RegisterI32), i32reg_(r) {}
+  explicit Stk(RegI64 r) : kind_(RegisterI64), i64reg_(r) {}
+  explicit Stk(RegPtr r) : kind_(RegisterRef), refReg_(r) {}
+  explicit Stk(RegF32 r) : kind_(RegisterF32), f32reg_(r) {}
+  explicit Stk(RegF64 r) : kind_(RegisterF64), f64reg_(r) {}
+  explicit Stk(int32_t v) : kind_(ConstI32), i32val_(v) {}
+  explicit Stk(int64_t v) : kind_(ConstI64), i64val_(v) {}
+  explicit Stk(float v) : kind_(ConstF32), f32val_(v) {}
+  explicit Stk(double v) : kind_(ConstF64), f64val_(v) {}
+  explicit Stk(Kind k, uint32_t v) : kind_(k), slot_(v) {
+    MOZ_ASSERT(k > MemLast && k <= LocalLast);
+  }
+  static Stk StkRef(intptr_t v) {
+    Stk s;
+    s.kind_ = ConstRef;
+    s.refval_ = v;
+    return s;
+  }
+
+  void setOffs(Kind k, uint32_t v) {
+    MOZ_ASSERT(k <= MemLast);
+    kind_ = k;
+    offs_ = v;
+  }
+
+  Kind kind() const { return kind_; }
+  bool isMem() const { return kind_ <= MemLast; }
+
+  RegI32 i32reg() const {
+    MOZ_ASSERT(kind_ == RegisterI32);
+    return i32reg_;
+  }
+  RegI64 i64reg() const {
+    MOZ_ASSERT(kind_ == RegisterI64);
+    return i64reg_;
+  }
+  RegPtr refReg() const {
+    MOZ_ASSERT(kind_ == RegisterRef);
+    return refReg_;
+  }
+  RegF32 f32reg() const {
+    MOZ_ASSERT(kind_ == RegisterF32);
+    return f32reg_;
+  }
+  RegF64 f64reg() const {
+    MOZ_ASSERT(kind_ == RegisterF64);
+    return f64reg_;
+  }
+
+  int32_t i32val() const {
+    MOZ_ASSERT(kind_ == ConstI32);
+    return i32val_;
+  }
+  int64_t i64val() const {
+    MOZ_ASSERT(kind_ == ConstI64);
+    return i64val_;
+  }
+  intptr_t refval() const {
+    MOZ_ASSERT(kind_ == ConstRef);
+    return refval_;
+  }
+
+  // For these two, use an out-param instead of simply returning, to
+  // use the normal stack and not the x87 FP stack (which has effect on
+  // NaNs with the signaling bit set).
+
+  void f32val(float* out) const {
+    MOZ_ASSERT(kind_ == ConstF32);
+    *out = f32val_;
+  }
+  void f64val(double* out) const {
+    MOZ_ASSERT(kind_ == ConstF64);
+    *out = f64val_;
+  }
+
+  uint32_t slot() const {
+    MOZ_ASSERT(kind_ > MemLast && kind_ <= LocalLast);
+    return slot_;
+  }
+  uint32_t offs() const {
+    MOZ_ASSERT(isMem());
+    return offs_;
+  }
+};
+
+typedef Vector<Stk, 8, SystemAllocPolicy> StkVector;
+
+// MachineStackTracker, used for stack-slot pointerness tracking.
+
+class MachineStackTracker {
+  // Simulates the machine's stack, with one bool per word.  Index zero in
+  // this vector corresponds to the highest address in the machine stack.  The
+  // last entry corresponds to what SP currently points at.  This all assumes
+  // a grow-down stack.
+  //
+  // numPtrs_ contains the number of ""true"" values in vec_, and is therefore
+  // redundant.  But it serves as a constant-time way to detect the common
+  // case where vec_ holds no ""true"" values.
+  size_t numPtrs_;
+  Vector<bool, 64, SystemAllocPolicy> vec_;
+
+ public:
+  MachineStackTracker() : numPtrs_(0) {}
+
+  ~MachineStackTracker() {
+#ifdef DEBUG
+    size_t n = 0;
+    for (bool b : vec_) {
+      n += (b ? 1 : 0);
+    }
+    MOZ_ASSERT(n == numPtrs_);
+#endif
+  }
+
+  // Clone this MachineStackTracker, writing the result at |dst|.
+  MOZ_MUST_USE bool cloneTo(MachineStackTracker* dst) {
+    MOZ_ASSERT(dst->vec_.empty());
+    if (!dst->vec_.appendAll(vec_)) {
+      return false;
+    }
+    dst->numPtrs_ = numPtrs_;
+    return true;
+  }
+
+  // Notionally push |n| non-pointers on the stack.
+  MOZ_MUST_USE bool pushNonGCPointers(size_t n) {
+    return vec_.appendN(false, n);
+  }
+
+  // Mark the stack slot |offsetFromSP| up from the bottom as holding a
+  // pointer.
+  void setGCPointer(size_t offsetFromSP) {
+    // Offset 0 is the most recently pushed, offset 1 is the second most
+    // recently pushed item, etc.
+    MOZ_ASSERT(offsetFromSP < vec_.length());
+
+    size_t offsetFromTop = vec_.length() - 1 - offsetFromSP;
+    numPtrs_ = numPtrs_ + 1 - (vec_[offsetFromTop] ? 1 : 0);
+    vec_[offsetFromTop] = true;
+  }
+
+  // Query the pointerness of the slot |offsetFromSP| up from the bottom.
+  bool isGCPointer(size_t offsetFromSP) {
+    MOZ_ASSERT(offsetFromSP < vec_.length());
+    return vec_[offsetFromSP];
+  }
+
+  // Return the number of words tracked by this MachineStackTracker.
+  size_t length() { return vec_.length(); }
+
+  // Return the number of pointer-typed words tracked by this
+  // MachineStackTracker.
+  size_t numPtrs() {
+    MOZ_ASSERT(numPtrs_ <= length());
+    return numPtrs_;
+  }
+};
+
+// StackMapGenerator, which carries all state needed to create stack maps.
+
+enum class HasRefTypedDebugFrame { No, Yes };
+
+struct StackMapGenerator {
+ private:
+  // --- These are constant for the life of the function's compilation ---
+
+  // For generating stack maps, we'll need to know the offsets of registers
+  // as saved by the trap exit stub.
+  const MachineState& trapExitLayout_;
+  const size_t trapExitLayoutNumWords_;
+
+  // Completed stackmaps are added here
+  StackMaps* stackMaps_;
+
+  // So as to be able to get current offset when creating stack maps
+  const MacroAssembler& masm_;
+
+ public:
+  // --- These are constant once we've completed beginFunction() ---
+
+  // The number of words of arguments passed to this function in memory.
+  size_t numStackArgWords_;
+
+  MachineStackTracker mst_;  // tracks machine stack pointerness
+
+  // This holds masm.framePushed at entry to the function's body.  It is a
+  // Maybe because createStackMap needs to know whether or not we're still
+  // in the prologue.  It makes a Nothing-to-Some transition just once per
+  // function.
+  Maybe<uint32_t> framePushedAtEntryToBody_;
+
+  // --- These can change at any point ---
+
+  // This holds masm.framePushed immediately before we move the stack
+  // pointer down so as to reserve space, in a function call, for arguments
+  // passed in memory.  To be more precise: this holds the value
+  // masm.framePushed would have had after moving the stack pointer over any
+  // alignment padding pushed before the arguments proper, but before the
+  // downward movement of the stack pointer that allocates space for the
+  // arguments proper.
+  //
+  // When not inside a function call setup/teardown sequence, it is Nothing.
+  // It can make Nothing-to/from-Some transitions arbitrarily as we progress
+  // through the function body.
+  Maybe<uint32_t> framePushedBeforePushingCallArgs_;
+
+  // The number of memory-resident, ref-typed entries on the containing
+  // BaseCompiler::stk_.
+  size_t memRefsOnStk_;
+
+  StackMapGenerator(StackMaps* stackMaps, const MachineState& trapExitLayout,
+                    const size_t trapExitLayoutNumWords,
+                    const MacroAssembler& masm)
+      : trapExitLayout_(trapExitLayout),
+        trapExitLayoutNumWords_(trapExitLayoutNumWords),
+        stackMaps_(stackMaps),
+        masm_(masm),
+        memRefsOnStk_(0) {}
+
+  // At the beginning of a function, we may have live roots in registers (as
+  // arguments) at the point where we perform a stack overflow check.  This
+  // method generates the ""extra"" stackmap entries to describe that, in the
+  // case that the check fails and we wind up calling into the wasm exit
+  // stub, as generated by GenerateTrapExit().
+  //
+  // The resulting map must correspond precisely with the stack layout
+  // created for the integer registers as saved by (code generated by)
+  // GenerateTrapExit().  To do that we use trapExitLayout_ and
+  // trapExitLayoutNumWords_, which together comprise a description of the
+  // layout and are created by GenerateTrapExitMachineState().
+  MOZ_MUST_USE bool generateStackmapEntriesForTrapExit(
+      const ValTypeVector& args, ExitStubMapVector& extras) {
+    MOZ_ASSERT(extras.empty());
+
+    // If this doesn't hold, we can't distinguish saved and not-saved
+    // registers in the MachineState.  See MachineState::MachineState().
+    MOZ_ASSERT(trapExitLayoutNumWords_ < 0x100);
+
+    if (!extras.appendN(false, trapExitLayoutNumWords_)) {
+      return false;
+    }
+
+    for (ABIArgIter<const ValTypeVector> i(args); !i.done(); i++) {
+      if (!i->argInRegister() || i.mirType() != MIRType::Pointer) {
+        continue;
+      }
+
+      size_t offsetFromTop =
+          reinterpret_cast<size_t>(trapExitLayout_.address(i->gpr()));
+
+      // If this doesn't hold, the associated register wasn't saved by
+      // the trap exit stub.  Better to crash now than much later, in
+      // some obscure place, and possibly with security consequences.
+      MOZ_RELEASE_ASSERT(offsetFromTop < trapExitLayoutNumWords_);
+
+      // offsetFromTop is an offset in words down from the highest
+      // address in the exit stub save area.  Switch it around to be an
+      // offset up from the bottom of the (integer register) save area.
+      size_t offsetFromBottom = trapExitLayoutNumWords_ - 1 - offsetFromTop;
+
+      extras[offsetFromBottom] = true;
+    }
+
+    return true;
+  }
+
+  // Creates a stackmap associated with the instruction denoted by
+  // |assemblerOffset|, incorporating pointers from the current operand
+  // stack |stk|, incorporating possible extra pointers in |extra| at the
+  // lower addressed end, and possibly with the associated frame having a
+  // ref-typed DebugFrame as indicated by |refDebugFrame|.
+  MOZ_MUST_USE bool createStackMap(const char* who,
+                                   const ExitStubMapVector& extras,
+                                   uint32_t assemblerOffset,
+                                   HasRefTypedDebugFrame refDebugFrame,
+                                   const StkVector& stk) {
+    size_t countedPointers = mst_.numPtrs() + memRefsOnStk_;
+#ifndef DEBUG
+    // An important optimization.  If there are obviously no pointers, as
+    // we expect in the majority of cases, exit quickly.
+    if (countedPointers == 0 && extras.empty() &&
+        refDebugFrame == HasRefTypedDebugFrame::No) {
+      return true;
+    }
+#else
+    // In the debug case, create the stack map regardless, and cross-check
+    // the pointer-counting below.  We expect the final map to have
+    // |countedPointers| in total.  This doesn't include those in the
+    // DebugFrame, but they do not appear in the map's bitmap.  Note that
+    // |countedPointers| is debug-only from this point onwards.
+    for (bool b : extras) {
+      countedPointers += (b ? 1 : 0);
+    }
+#endif
+
+    // Start with the frame-setup map, and add operand-stack information
+    // to that.
+    MachineStackTracker augmentedMst;
+    if (!mst_.cloneTo(&augmentedMst)) {
+      return false;
+    }
+
+    // At this point, augmentedMst only contains entries covering the
+    // incoming argument area (if any) and for the area allocated by this
+    // function's prologue.  We now need to calculate how far the machine's
+    // stack pointer is below where it was at the start of the body.  But we
+    // must take care not to include any words pushed as arguments to an
+    // upcoming function call, since those words ""belong"" to the stackmap of
+    // the callee, not to the stackmap of this function.  Note however that
+    // any alignment padding pushed prior to pushing the args *does* belong to
+    // this function.  That padding is taken into account at the point where
+    // framePushedBeforePushingCallArgs_ is set.
+    Maybe<uint32_t> framePushedExcludingArgs;
+    if (framePushedAtEntryToBody_.isNothing()) {
+      // Still in the prologue.  framePushedExcludingArgs remains Nothing.
+      MOZ_ASSERT(framePushedBeforePushingCallArgs_.isNothing());
+    } else {
+      // In the body.
+      MOZ_ASSERT(masm_.framePushed() >= framePushedAtEntryToBody_.value());
+      if (framePushedBeforePushingCallArgs_.isSome()) {
+        // In the body, and we've potentially pushed some args onto the stack.
+        // We must ignore them when sizing the stackmap.
+        MOZ_ASSERT(masm_.framePushed() >=
+                   framePushedBeforePushingCallArgs_.value());
+        MOZ_ASSERT(framePushedBeforePushingCallArgs_.value() >=
+                   framePushedAtEntryToBody_.value());
+        framePushedExcludingArgs =
+            Some(framePushedBeforePushingCallArgs_.value());
+      } else {
+        // In the body, but not with call args on the stack.  The stackmap
+        // must be sized so as to extend all the way ""down"" to
+        // masm_.framePushed().
+        framePushedExcludingArgs = Some(masm_.framePushed());
+      }
+    }
+
+    if (framePushedExcludingArgs.isSome()) {
+      uint32_t bodyPushedBytes =
+          framePushedExcludingArgs.value() - framePushedAtEntryToBody_.value();
+      MOZ_ASSERT(0 == bodyPushedBytes % sizeof(void*));
+      if (!augmentedMst.pushNonGCPointers(bodyPushedBytes / sizeof(void*))) {
+        return false;
+      }
+    }
+
+    // Scan the operand stack, marking pointers in the just-added new
+    // section.
+    MOZ_ASSERT_IF(framePushedAtEntryToBody_.isNothing(), stk.empty());
+    MOZ_ASSERT_IF(framePushedExcludingArgs.isNothing(), stk.empty());
+
+    for (const Stk& v : stk) {
+#ifndef DEBUG
+      // We don't track roots in registers, per rationale below, so if this
+      // doesn't hold, something is seriously wrong, and we're likely to get a
+      // GC-related crash.
+      MOZ_RELEASE_ASSERT(v.kind() != Stk::RegisterRef);
+      if (v.kind() != Stk::MemRef) {
+        continue;
+      }
+#else
+      // Take the opportunity to check everything we reasonably can about
+      // operand stack elements.
+      switch (v.kind()) {
+        case Stk::MemI32:
+        case Stk::MemI64:
+        case Stk::MemF32:
+        case Stk::MemF64:
+        case Stk::ConstI32:
+        case Stk::ConstI64:
+        case Stk::ConstF32:
+        case Stk::ConstF64:
+          // All of these have uninteresting type.
+          continue;
+        case Stk::LocalI32:
+        case Stk::LocalI64:
+        case Stk::LocalF32:
+        case Stk::LocalF64:
+          // These also have uninteresting type.  Check that they live in the
+          // section of stack set up by beginFunction().  The unguarded use of
+          // |value()| here is safe due to the assertion above this loop.
+          MOZ_ASSERT(v.offs() <= framePushedAtEntryToBody_.value());
+          continue;
+        case Stk::RegisterI32:
+        case Stk::RegisterI64:
+        case Stk::RegisterF32:
+        case Stk::RegisterF64:
+          // These also have uninteresting type, but more to the point: all
+          // registers holding live values should have been flushed to the
+          // machine stack immediately prior to the instruction to which this
+          // stackmap pertains.  So these can't happen.
+          MOZ_CRASH(""createStackMap: operand stack has Register-non-Ref"");
+        case Stk::MemRef:
+          // This is the only case we care about.  We'll handle it after the
+          // switch.
+          break;
+        case Stk::LocalRef:
+          // We need the stackmap to mention this pointer, but it should
+          // already be in the mst_ section created by beginFunction().
+          MOZ_ASSERT(v.offs() <= framePushedAtEntryToBody_.value());
+          continue;
+        case Stk::ConstRef:
+          // This can currently only be a null pointer.
+          MOZ_ASSERT(v.refval() == 0);
+          continue;
+        case Stk::RegisterRef:
+          // This can't happen, per rationale above.
+          MOZ_CRASH(""createStackMap: operand stack contains RegisterRef"");
+        default:
+          MOZ_CRASH(""createStackMap: unknown operand stack element"");
+      }
+#endif
+      // v.offs() holds masm.framePushed() at the point immediately after it
+      // was pushed on the stack.  Since it's still on the stack,
+      // masm.framePushed() can't be less.
+      MOZ_ASSERT(v.offs() <= framePushedExcludingArgs.value());
+      uint32_t offsFromMapLowest = framePushedExcludingArgs.value() - v.offs();
+      MOZ_ASSERT(0 == offsFromMapLowest % sizeof(void*));
+      augmentedMst.setGCPointer(offsFromMapLowest / sizeof(void*));
+    }
+
+    // Create the final StackMap.  The initial map is zeroed out, so there's
+    // no need to write zero bits in it.
+    const uint32_t extraWords = extras.length();
+    const uint32_t augmentedMstWords = augmentedMst.length();
+    const uint32_t numMappedWords = extraWords + augmentedMstWords;
+    StackMap* stackMap = StackMap::create(numMappedWords);
+    if (!stackMap) {
+      return false;
+    }
+
+    {
+      // First the exit stub extra words, if any.
+      uint32_t i = 0;
+      for (bool b : extras) {
+        if (b) {
+          stackMap->setBit(i);
+        }
+        i++;
+      }
+    }
+    // Followed by the ""main"" part of the map.
+    for (uint32_t i = 0; i < augmentedMstWords; i++) {
+      if (augmentedMst.isGCPointer(i)) {
+        stackMap->setBit(numMappedWords - 1 - i);
+      }
+    }
+
+    stackMap->setExitStubWords(extraWords);
+
+    // Record in the map, how far down from the highest address the Frame* is.
+    // Take the opportunity to check that we haven't marked any part of the
+    // Frame itself as a pointer.
+    stackMap->setFrameOffsetFromTop(numStackArgWords_ +
+                                    sizeof(Frame) / sizeof(void*));
+#ifdef DEBUG
+    for (uint32_t i = 0; i < sizeof(Frame) / sizeof(void*); i++) {
+      MOZ_ASSERT(stackMap->getBit(stackMap->numMappedWords -
+                                  stackMap->frameOffsetFromTop + i) == 0);
+    }
+#endif
+
+    // Note the presence of a ref-typed DebugFrame, if any.
+    if (refDebugFrame == HasRefTypedDebugFrame::Yes) {
+      stackMap->setHasRefTypedDebugFrame();
+    }
+
+    // Add the completed map to the running collection thereof.
+    if (!stackMaps_->add((uint8_t*)(uintptr_t)assemblerOffset, stackMap)) {
+      return false;
+    }
+
+#ifdef DEBUG
+    {
+      // Crosscheck the map pointer counting.
+      uint32_t nw = stackMap->numMappedWords;
+      uint32_t np = 0;
+      for (uint32_t i = 0; i < nw; i++) {
+        np += stackMap->getBit(i);
+      }
+      MOZ_ASSERT(size_t(np) == countedPointers);
+    }
+#endif
+
+    return true;
+  }
+};
+
 // The baseline compiler proper.
 
 class BaseCompiler final : public BaseCompilerInterface {
@@ -1979,6 +2526,8 @@
   BaseRegAlloc ra;       // Ditto
   BaseStackFrame fr;
 
+  StackMapGenerator smgen_;
+
   BaseStackFrame::LocalVector localInfo_;
   Vector<OutOfLineCode*, 8, SystemAllocPolicy> outOfLine_;
 
@@ -2000,9 +2549,10 @@
 
  public:
   BaseCompiler(const ModuleEnvironment& env, const FuncCompileInput& input,
-               const ValTypeVector& locals, Decoder& decoder,
+               const ValTypeVector& locals, const MachineState& trapExitLayout,
+               size_t trapExitLayoutNumWords, Decoder& decoder,
                ExclusiveDeferredValidationState& dvs, TempAllocator* alloc,
-               MacroAssembler* masm);
+               MacroAssembler* masm, StackMaps* stackMaps);
 
   MOZ_MUST_USE bool init();
 
@@ -2301,153 +2851,25 @@
   // to avoid problems with control flow and messy register usage
   // patterns.
 
-  struct Stk {
-   private:
-    Stk() : kind_(Unknown), i64val_(0) {}
-
-   public:
-    enum Kind {
-      // The Mem opcodes are all clustered at the beginning to
-      // allow for a quick test within sync().
-      MemI32,  // 32-bit integer stack value (""offs"")
-      MemI64,  // 64-bit integer stack value (""offs"")
-      MemF32,  // 32-bit floating stack value (""offs"")
-      MemF64,  // 64-bit floating stack value (""offs"")
-      MemRef,  // reftype (pointer wide) stack value (""offs"")
-
-      // The Local opcodes follow the Mem opcodes for a similar
-      // quick test within hasLocal().
-      LocalI32,  // Local int32 var (""slot"")
-      LocalI64,  // Local int64 var (""slot"")
-      LocalF32,  // Local float32 var (""slot"")
-      LocalF64,  // Local double var (""slot"")
-      LocalRef,  // Local reftype (pointer wide) var (""slot"")
-
-      RegisterI32,  // 32-bit integer register (""i32reg"")
-      RegisterI64,  // 64-bit integer register (""i64reg"")
-      RegisterF32,  // 32-bit floating register (""f32reg"")
-      RegisterF64,  // 64-bit floating register (""f64reg"")
-      RegisterRef,  // reftype (pointer wide) register (""refReg"")
-
-      ConstI32,  // 32-bit integer constant (""i32val"")
-      ConstI64,  // 64-bit integer constant (""i64val"")
-      ConstF32,  // 32-bit floating constant (""f32val"")
-      ConstF64,  // 64-bit floating constant (""f64val"")
-      ConstRef,  // reftype (pointer wide) constant (""refval"")
-
-      Unknown,
-    };
-
-    Kind kind_;
-
-    static const Kind MemLast = MemRef;
-    static const Kind LocalLast = LocalRef;
-
-    union {
-      RegI32 i32reg_;
-      RegI64 i64reg_;
-      RegPtr refReg_;
-      RegF32 f32reg_;
-      RegF64 f64reg_;
-      int32_t i32val_;
-      int64_t i64val_;
-      intptr_t refval_;
-      float f32val_;
-      double f64val_;
-      uint32_t slot_;
-      uint32_t offs_;
-    };
-
-    explicit Stk(RegI32 r) : kind_(RegisterI32), i32reg_(r) {}
-    explicit Stk(RegI64 r) : kind_(RegisterI64), i64reg_(r) {}
-    explicit Stk(RegPtr r) : kind_(RegisterRef), refReg_(r) {}
-    explicit Stk(RegF32 r) : kind_(RegisterF32), f32reg_(r) {}
-    explicit Stk(RegF64 r) : kind_(RegisterF64), f64reg_(r) {}
-    explicit Stk(int32_t v) : kind_(ConstI32), i32val_(v) {}
-    explicit Stk(int64_t v) : kind_(ConstI64), i64val_(v) {}
-    explicit Stk(float v) : kind_(ConstF32), f32val_(v) {}
-    explicit Stk(double v) : kind_(ConstF64), f64val_(v) {}
-    explicit Stk(Kind k, uint32_t v) : kind_(k), slot_(v) {
-      MOZ_ASSERT(k > MemLast && k <= LocalLast);
-    }
-    static Stk StkRef(intptr_t v) {
-      Stk s;
-      s.kind_ = ConstRef;
-      s.refval_ = v;
-      return s;
-    }
-
-    void setOffs(Kind k, uint32_t v) {
-      MOZ_ASSERT(k <= MemLast);
-      kind_ = k;
-      offs_ = v;
-    }
-
-    Kind kind() const { return kind_; }
-    bool isMem() const { return kind_ <= MemLast; }
-
-    RegI32 i32reg() const {
-      MOZ_ASSERT(kind_ == RegisterI32);
-      return i32reg_;
-    }
-    RegI64 i64reg() const {
-      MOZ_ASSERT(kind_ == RegisterI64);
-      return i64reg_;
-    }
-    RegPtr refReg() const {
-      MOZ_ASSERT(kind_ == RegisterRef);
-      return refReg_;
-    }
-    RegF32 f32reg() const {
-      MOZ_ASSERT(kind_ == RegisterF32);
-      return f32reg_;
-    }
-    RegF64 f64reg() const {
-      MOZ_ASSERT(kind_ == RegisterF64);
-      return f64reg_;
-    }
-
-    int32_t i32val() const {
-      MOZ_ASSERT(kind_ == ConstI32);
-      return i32val_;
-    }
-    int64_t i64val() const {
-      MOZ_ASSERT(kind_ == ConstI64);
-      return i64val_;
-    }
-    intptr_t refval() const {
-      MOZ_ASSERT(kind_ == ConstRef);
-      return refval_;
-    }
-
-    // For these two, use an out-param instead of simply returning, to
-    // use the normal stack and not the x87 FP stack (which has effect on
-    // NaNs with the signaling bit set).
-
-    void f32val(float* out) const {
-      MOZ_ASSERT(kind_ == ConstF32);
-      *out = f32val_;
-    }
-    void f64val(double* out) const {
-      MOZ_ASSERT(kind_ == ConstF64);
-      *out = f64val_;
-    }
-
-    uint32_t slot() const {
-      MOZ_ASSERT(kind_ > MemLast && kind_ <= LocalLast);
-      return slot_;
-    }
-    uint32_t offs() const {
-      MOZ_ASSERT(isMem());
-      return offs_;
-    }
-  };
-
-  Vector<Stk, 8, SystemAllocPolicy> stk_;
-
-  template <typename... Args>
-  void push(Args&&... args) {
-    stk_.infallibleEmplaceBack(Stk(std::forward<Args>(args)...));
+  StkVector stk_;
+
+#ifdef DEBUG
+  size_t countMemRefsOnStk() {
+    size_t nRefs = 0;
+    for (Stk& v : stk_) {
+      if (v.kind() == Stk::MemRef) {
+        nRefs++;
+      }
+    }
+    return nRefs;
+  }
+#endif
+
+  template <typename T>
+  void push(T item) {
+    // None of the single-arg Stk constructors create a Stk::MemRef, so
+    // there's no need to increment smgen_.memRefsOnStk_ here.
+    stk_.infallibleEmplaceBack(Stk(item));
   }
 
   void pushConstRef(intptr_t v) { stk_.infallibleEmplaceBack(Stk::StkRef(v)); }
@@ -2779,12 +3201,14 @@
           loadLocalRef(v, scratch);
           uint32_t offs = fr.pushPtr(scratch);
           v.setOffs(Stk::MemRef, offs);
+          smgen_.memRefsOnStk_++;
           break;
         }
         case Stk::RegisterRef: {
           uint32_t offs = fr.pushPtr(v.refReg());
           freeRef(v.refReg());
           v.setOffs(Stk::MemRef, offs);
+          smgen_.memRefsOnStk_++;
           break;
         }
         default: { break; }
@@ -2792,6 +3216,46 @@
     }
   }
 
+  // Various methods for creating a stack map.  Stack maps are indexed by the
+  // lowest address of the instruction immediately *after* the instruction of
+  // interest.  In practice that means either: the return point of a call, the
+  // instruction immediately after a trap instruction (the ""resume""
+  // instruction), or the instruction immediately following a no-op (when
+  // debugging is enabled).
+
+  // Create a vanilla stack map.
+  MOZ_MUST_USE bool createStackMap(const char* who) {
+    const ExitStubMapVector noExtras;
+    return smgen_.createStackMap(who, noExtras, masm.currentOffset(),
+                                 HasRefTypedDebugFrame::No, stk_);
+  }
+
+  // Create a stack map as vanilla, but for a custom assembler offset.
+  MOZ_MUST_USE bool createStackMap(const char* who,
+                                   CodeOffset assemblerOffset) {
+    const ExitStubMapVector noExtras;
+    return smgen_.createStackMap(who, noExtras, assemblerOffset.offset(),
+                                 HasRefTypedDebugFrame::No, stk_);
+  }
+
+  // Create a stack map as vanilla, and note the presence of a ref-typed
+  // DebugFrame on the stack.
+  MOZ_MUST_USE bool createStackMap(const char* who,
+                                   HasRefTypedDebugFrame refDebugFrame) {
+    const ExitStubMapVector noExtras;
+    return smgen_.createStackMap(who, noExtras, masm.currentOffset(),
+                                 refDebugFrame, stk_);
+  }
+
+  // The most general stack map construction.
+  MOZ_MUST_USE bool createStackMap(const char* who,
+                                   const ExitStubMapVector& extras,
+                                   uint32_t assemblerOffset,
+                                   HasRefTypedDebugFrame refDebugFrame) {
+    return smgen_.createStackMap(who, extras, assemblerOffset, refDebugFrame,
+                                 stk_);
+  }
+
   // This is an optimization used to avoid calling sync() for
   // setLocal(): if the local does not exist unresolved on the stack
   // then we can skip the sync.
@@ -2824,54 +3288,64 @@
 
   void pushI32(RegI32 r) {
     MOZ_ASSERT(!isAvailableI32(r));
-    push(r);
+    push(Stk(r));
   }
 
   void pushI64(RegI64 r) {
     MOZ_ASSERT(!isAvailableI64(r));
-    push(r);
+    push(Stk(r));
   }
 
   void pushRef(RegPtr r) {
     MOZ_ASSERT(!isAvailableRef(r));
-    push(r);
+    push(Stk(r));
   }
 
   void pushF64(RegF64 r) {
     MOZ_ASSERT(!isAvailableF64(r));
-    push(r);
+    push(Stk(r));
   }
 
   void pushF32(RegF32 r) {
     MOZ_ASSERT(!isAvailableF32(r));
-    push(r);
+    push(Stk(r));
   }
 
   // Push the value onto the stack.
 
-  void pushI32(int32_t v) { push(v); }
-
-  void pushI64(int64_t v) { push(v); }
+  void pushI32(int32_t v) { push(Stk(v)); }
+
+  void pushI64(int64_t v) { push(Stk(v)); }
 
   void pushRef(intptr_t v) { pushConstRef(v); }
 
-  void pushF64(double v) { push(v); }
-
-  void pushF32(float v) { push(v); }
+  void pushF64(double v) { push(Stk(v)); }
+
+  void pushF32(float v) { push(Stk(v)); }
 
   // Push the local slot onto the stack.  The slot will not be read
   // here; it will be read when it is consumed, or when a side
   // effect to the slot forces its value to be saved.
 
-  void pushLocalI32(uint32_t slot) { push(Stk::LocalI32, slot); }
-
-  void pushLocalI64(uint32_t slot) { push(Stk::LocalI64, slot); }
-
-  void pushLocalRef(uint32_t slot) { push(Stk::LocalRef, slot); }
-
-  void pushLocalF64(uint32_t slot) { push(Stk::LocalF64, slot); }
-
-  void pushLocalF32(uint32_t slot) { push(Stk::LocalF32, slot); }
+  void pushLocalI32(uint32_t slot) {
+    stk_.infallibleEmplaceBack(Stk(Stk::LocalI32, slot));
+  }
+
+  void pushLocalI64(uint32_t slot) {
+    stk_.infallibleEmplaceBack(Stk(Stk::LocalI64, slot));
+  }
+
+  void pushLocalRef(uint32_t slot) {
+    stk_.infallibleEmplaceBack(Stk(Stk::LocalRef, slot));
+  }
+
+  void pushLocalF64(uint32_t slot) {
+    stk_.infallibleEmplaceBack(Stk(Stk::LocalF64, slot));
+  }
+
+  void pushLocalF32(uint32_t slot) {
+    stk_.infallibleEmplaceBack(Stk(Stk::LocalF32, slot));
+  }
 
   // Call only from other popI32() variants.
   // v must be the stack top.  May pop the CPU stack.
@@ -3018,6 +3492,9 @@
     }
 
     stk_.popBack();
+    if (v.kind() == Stk::MemRef) {
+      smgen_.memRefsOnStk_--;
+    }
     return specific;
   }
 
@@ -3030,6 +3507,9 @@
       popRef(v, (r = needRef()));
     }
     stk_.popBack();
+    if (v.kind() == Stk::MemRef) {
+      smgen_.memRefsOnStk_--;
+    }
     return r;
   }
 
@@ -3405,6 +3885,9 @@
         case Stk::RegisterRef:
           freeRef(v.refReg());
           break;
+        case Stk::MemRef:
+          smgen_.memRefsOnStk_--;
+          break;
         default:
           break;
       }
@@ -3527,14 +4010,54 @@
   //
   // Function prologue and epilogue.
 
-  void beginFunction() {
+  MOZ_MUST_USE bool beginFunction() {
+    JitSpew(JitSpew_Codegen, ""# ========================================"");
     JitSpew(JitSpew_Codegen, ""# Emitting wasm baseline code"");
+    JitSpew(JitSpew_Codegen,
+            ""# beginFunction: start of function prologue for index %d"",
+            (int)func_.index);
+
+    // Make a start on the stack map for this function.  Inspect the args so
+    // as to determine which of them are both in-memory and pointer-typed, and
+    // add entries to mst_ as appropriate.
+
+    const ValTypeVector& argTys = env_.funcTypes[func_.index]->args();
+
+    size_t nStackArgBytes = stackArgAreaSize(argTys);
+    MOZ_ASSERT(nStackArgBytes % sizeof(void*) == 0);
+    smgen_.numStackArgWords_ = nStackArgBytes / sizeof(void*);
+
+    MOZ_ASSERT(smgen_.mst_.length() == 0);
+    if (!smgen_.mst_.pushNonGCPointers(smgen_.numStackArgWords_)) {
+      return false;
+    }
+
+    for (ABIArgIter<const ValTypeVector> i(argTys); !i.done(); i++) {
+      ABIArg argLoc = *i;
+      if (argLoc.kind() != ABIArg::Stack) {
+        continue;
+      }
+      const ValType& ty = argTys[i.index()];
+      if (!ty.isReference()) {
+        continue;
+      }
+      uint32_t offset = argLoc.offsetFromArgBase();
+      MOZ_ASSERT(offset < nStackArgBytes);
+      MOZ_ASSERT(offset % sizeof(void*) == 0);
+      smgen_.mst_.setGCPointer(offset / sizeof(void*));
+    }
 
     GenerateFunctionPrologue(
         masm, env_.funcTypes[func_.index]->id,
         env_.mode() == CompileMode::Tier1 ? Some(func_.index) : Nothing(),
         &offsets_);
 
+    // GenerateFunctionPrologue pushes exactly one wasm::Frame's worth of
+    // stuff, and none of the values are GC pointers.  Hence:
+    if (!smgen_.mst_.pushNonGCPointers(sizeof(Frame) / sizeof(void*))) {
+      return false;
+    }
+
     // Initialize DebugFrame fields before the stack overflow trap so that
     // we have the invariant that all observable Frames in a debugEnabled
     // Module have valid DebugFrames.
@@ -3544,21 +4067,53 @@
                     ""aligned"");
 #endif
       masm.reserveStack(DebugFrame::offsetOfFrame());
+      if (!smgen_.mst_.pushNonGCPointers(DebugFrame::offsetOfFrame() /
+                                         sizeof(void*))) {
+        return false;
+      }
+
       masm.store32(
           Imm32(func_.index),
           Address(masm.getStackPointer(), DebugFrame::offsetOfFuncIndex()));
       masm.storePtr(ImmWord(0), Address(masm.getStackPointer(),
                                         DebugFrame::offsetOfFlagsWord()));
-    }
+      // Zero out DebugFrame::cachedReturnJSValue_ and ::resultRef_ for
+      // safety, since it's not easy to establish whether they will always be
+      // defined before a GC.
+      masm.storePtr(ImmWord(0), Address(masm.getStackPointer(),
+                                        DebugFrame::offsetOfResults()));
+      for (size_t i = 0; i < sizeof(js::Value) / sizeof(void*); i++) {
+        masm.storePtr(ImmWord(0),
+                      Address(masm.getStackPointer(),
+                              DebugFrame::offsetOfCachedReturnJSValue() +
+                                  i * sizeof(void*)));
+      }
+    }
+
+    // Generate a stack-overflow check and its associated stack map.
 
     fr.checkStack(ABINonArgReg0, BytecodeOffset(func_.lineOrBytecode));
-    masm.reserveStack(fr.fixedSize() - masm.framePushed());
+
+    const ValTypeVector& args = funcType().args();
+    ExitStubMapVector extras;
+    if (!smgen_.generateStackmapEntriesForTrapExit(args, extras)) {
+      return false;
+    }
+    if (!createStackMap(""stack check"", extras, masm.currentOffset(),
+                        HasRefTypedDebugFrame::No)) {
+      return false;
+    }
+
+    size_t reservedBytes = fr.fixedSize() - masm.framePushed();
+    MOZ_ASSERT(0 == (reservedBytes % sizeof(void*)));
+
+    masm.reserveStack(reservedBytes);
     fr.onFixedStackAllocated();
+    if (!smgen_.mst_.pushNonGCPointers(reservedBytes / sizeof(void*))) {
+      return false;
+    }
 
     // Copy arguments from registers to stack.
-
-    const ValTypeVector& args = funcType().args();
-
     for (ABIArgIter<const ValTypeVector> i(args); !i.done(); i++) {
       if (!i->argInRegister()) {
         continue;
@@ -3571,9 +4126,13 @@
         case MIRType::Int64:
           fr.storeLocalI64(RegI64(i->gpr64()), l);
           break;
-        case MIRType::Pointer:
+        case MIRType::Pointer: {
+          uint32_t offs = fr.localOffset(l);
+          MOZ_ASSERT(0 == (offs % sizeof(void*)));
           fr.storeLocalPtr(RegPtr(i->gpr()), l);
+          smgen_.mst_.setGCPointer(offs / sizeof(void*));
           break;
+        }
         case MIRType::Double:
           fr.storeLocalF64(RegF64(i->fpu()), l);
           break;
@@ -3589,7 +4148,18 @@
 
     if (env_.debugEnabled()) {
       insertBreakablePoint(CallSiteDesc::EnterFrame);
-    }
+      if (!createStackMap(""debug: breakable point"")) {
+        return false;
+      }
+    }
+
+    JitSpew(JitSpew_Codegen,
+            ""# beginFunction: enter body with masm.framePushed = %u"",
+            masm.framePushed());
+    MOZ_ASSERT(smgen_.framePushedAtEntryToBody_.isNothing());
+    smgen_.framePushedAtEntryToBody_.emplace(masm.framePushed());
+
+    return true;
   }
 
   void saveResult() {
@@ -3652,7 +4222,9 @@
     }
   }
 
-  bool endFunction() {
+  MOZ_MUST_USE bool endFunction() {
+    JitSpew(JitSpew_Codegen, ""# endFunction: start of function epilogue"");
+
     // Always branch to returnLabel_.
     masm.breakpoint();
 
@@ -3670,11 +4242,26 @@
     masm.bind(&returnLabel_);
 
     if (env_.debugEnabled()) {
+      // If the return type is a ref, we need to note that in the stack maps
+      // generated here.  Note that this assumes that DebugFrame::result* and
+      // DebugFrame::cachedReturnJSValue_ are either both ref-typed or they
+      // are both not ref-typed.  It can't represent the situation where one
+      // is and the other isn't.
+      HasRefTypedDebugFrame refDebugFrame = funcType().ret().isReference()
+                                                ? HasRefTypedDebugFrame::Yes
+                                                : HasRefTypedDebugFrame::No;
+
       // Store and reload the return value from DebugFrame::return so that
       // it can be clobbered, and/or modified by the debug trap.
       saveResult();
       insertBreakablePoint(CallSiteDesc::Breakpoint);
+      if (!createStackMap(""debug: breakpoint"", refDebugFrame)) {
+        return false;
+      }
       insertBreakablePoint(CallSiteDesc::LeaveFrame);
+      if (!createStackMap(""debug: leave frame"", refDebugFrame)) {
+        return false;
+      }
       restoreResult();
     }
 
@@ -3687,6 +4274,8 @@
     // gen->perfSpewer().noteEndInlineCode(masm);
 #endif
 
+    JitSpew(JitSpew_Codegen, ""# endFunction: end of function epilogue"");
+    JitSpew(JitSpew_Codegen, ""# endFunction: start of OOL code"");
     if (!generateOutOfLineCode()) {
       return false;
     }
@@ -3697,6 +4286,8 @@
       return false;
     }
 
+    JitSpew(JitSpew_Codegen, ""# endFunction: end of OOL code for index %d"",
+            (int)func_.index);
     return !masm.oom();
   }
 
@@ -3759,6 +4350,9 @@
     size_t adjustment = call.stackArgAreaSize + call.frameAlignAdjustment;
     fr.freeArgAreaAndPopBytes(adjustment, stackSpace);
 
+    MOZ_ASSERT(smgen_.framePushedBeforePushingCallArgs_.isSome());
+    smgen_.framePushedBeforePushingCallArgs_.reset();
+
     if (call.isInterModule) {
       masm.loadWasmTlsRegFromFrame();
       masm.loadWasmPinnedRegsFromTls();
@@ -3790,6 +4384,14 @@
   }
 
   void startCallArgs(size_t stackArgAreaSize, FunctionCall* call) {
+    // Record the masm.framePushed() value at this point, before we push args
+    // for the call, but including the alignment space placed above the args.
+    // This defines the lower limit of the stackmap that will be created for
+    // this call.
+    MOZ_ASSERT(smgen_.framePushedBeforePushingCallArgs_.isNothing());
+    smgen_.framePushedBeforePushingCallArgs_.emplace(
+        masm.framePushed() + call->frameAlignAdjustment);
+
     call->stackArgAreaSize = stackArgAreaSize;
 
     size_t adjustment = call->stackArgAreaSize + call->frameAlignAdjustment;
@@ -3947,20 +4549,20 @@
     }
   }
 
-  void callDefinition(uint32_t funcIndex, const FunctionCall& call) {
+  CodeOffset callDefinition(uint32_t funcIndex, const FunctionCall& call) {
     CallSiteDesc desc(call.lineOrBytecode, CallSiteDesc::Func);
-    masm.call(desc, funcIndex);
-  }
-
-  void callSymbolic(SymbolicAddress callee, const FunctionCall& call) {
+    return masm.call(desc, funcIndex);
+  }
+
+  CodeOffset callSymbolic(SymbolicAddress callee, const FunctionCall& call) {
     CallSiteDesc desc(call.lineOrBytecode, CallSiteDesc::Symbolic);
-    masm.call(desc, callee);
+    return masm.call(desc, callee);
   }
 
   // Precondition: sync()
 
-  void callIndirect(uint32_t funcTypeIndex, uint32_t tableIndex,
-                    const Stk& indexVal, const FunctionCall& call) {
+  CodeOffset callIndirect(uint32_t funcTypeIndex, uint32_t tableIndex,
+                          const Stk& indexVal, const FunctionCall& call) {
     const FuncTypeWithId& funcType = env_.types[funcTypeIndex].funcType();
     MOZ_ASSERT(funcType.id.kind() != FuncTypeIdDescKind::None);
 
@@ -3970,29 +4572,29 @@
 
     CallSiteDesc desc(call.lineOrBytecode, CallSiteDesc::Dynamic);
     CalleeDesc callee = CalleeDesc::wasmTable(table, funcType.id);
-    masm.wasmCallIndirect(desc, callee, NeedsBoundsCheck(true));
+    return masm.wasmCallIndirect(desc, callee, NeedsBoundsCheck(true));
   }
 
   // Precondition: sync()
 
-  void callImport(unsigned globalDataOffset, const FunctionCall& call) {
+  CodeOffset callImport(unsigned globalDataOffset, const FunctionCall& call) {
     CallSiteDesc desc(call.lineOrBytecode, CallSiteDesc::Dynamic);
     CalleeDesc callee = CalleeDesc::import(globalDataOffset);
-    masm.wasmCallImport(desc, callee);
-  }
-
-  void builtinCall(SymbolicAddress builtin, const FunctionCall& call) {
-    callSymbolic(builtin, call);
-  }
-
-  void builtinInstanceMethodCall(SymbolicAddress builtin,
-                                 const ABIArg& instanceArg,
-                                 const FunctionCall& call) {
+    return masm.wasmCallImport(desc, callee);
+  }
+
+  CodeOffset builtinCall(SymbolicAddress builtin, const FunctionCall& call) {
+    return callSymbolic(builtin, call);
+  }
+
+  CodeOffset builtinInstanceMethodCall(SymbolicAddress builtin,
+                                       const ABIArg& instanceArg,
+                                       const FunctionCall& call) {
     // Builtin method calls assume the TLS register has been set.
     masm.loadWasmTlsRegFromFrame();
 
     CallSiteDesc desc(call.lineOrBytecode, CallSiteDesc::Symbolic);
-    masm.wasmCallBuiltinInstanceMethod(desc, instanceArg, builtin);
+    return masm.wasmCallBuiltinInstanceMethod(desc, instanceArg, builtin);
   }
 
   //////////////////////////////////////////////////////////////////////
@@ -4013,10 +4615,11 @@
 
   void moveImmF64(double d, RegF64 dest) { masm.loadConstantDouble(d, dest); }
 
-  void addInterruptCheck() {
+  MOZ_MUST_USE bool addInterruptCheck() {
     ScratchI32 tmp(*this);
     masm.loadWasmTlsRegFromFrame(tmp);
     masm.wasmInterruptCheck(tmp, bytecodeOffset());
+    return createStackMap(""addInterruptCheck"");
   }
 
   void jumpTable(const LabelVector& labels, Label* theTable) {
@@ -5872,7 +6475,7 @@
 
   // This frees the register `valueAddr`.
 
-  void emitPostBarrier(RegPtr valueAddr) {
+  MOZ_MUST_USE bool emitPostBarrier(RegPtr valueAddr) {
     uint32_t bytecodeOffset = iter_.lastOpcodeOffset();
 
     // The `valueAddr` is a raw pointer to the cell within some GC object or
@@ -5880,17 +6483,22 @@
     // postbarrier call is active, so push a uintptr_t value.
 #ifdef JS_64BIT
     pushI64(RegI64(Register64(valueAddr)));
-    emitInstanceCall(bytecodeOffset, SigPL_, ExprType::Void,
-                     SymbolicAddress::PostBarrier);
+    if (!emitInstanceCall(bytecodeOffset, SigPL_, ExprType::Void,
+                          SymbolicAddress::PostBarrier)) {
+      return false;
+    }
 #else
     pushI32(RegI32(valueAddr));
-    emitInstanceCall(bytecodeOffset, SigPI_, ExprType::Void,
-                     SymbolicAddress::PostBarrier);
-#endif
-  }
-
-  void emitBarrieredStore(const Maybe<RegPtr>& object, RegPtr valueAddr,
-                          RegPtr value) {
+    if (!emitInstanceCall(bytecodeOffset, SigPI_, ExprType::Void,
+                          SymbolicAddress::PostBarrier)) {
+      return false;
+    }
+#endif
+    return true;
+  }
+
+  MOZ_MUST_USE bool emitBarrieredStore(const Maybe<RegPtr>& object,
+                                       RegPtr valueAddr, RegPtr value) {
     emitPreBarrier(valueAddr);  // Preserves valueAddr
     masm.storePtr(value, Address(valueAddr, 0));
 
@@ -5901,8 +6509,11 @@
     emitPostBarrierGuard(object, otherScratch, value, &skipBarrier);
     freeRef(otherScratch);
 
-    emitPostBarrier(valueAddr);
+    if (!emitPostBarrier(valueAddr)) {
+      return false;
+    }
     masm.bind(&skipBarrier);
+    return true;
   }
 
   ////////////////////////////////////////////////////////////
@@ -6121,7 +6732,8 @@
   void emitRemainderI32();
   void emitRemainderU32();
 #ifdef RABALDR_INT_DIV_I64_CALLOUT
-  void emitDivOrModI64BuiltinCall(SymbolicAddress callee, ValType operandType);
+  MOZ_MUST_USE bool emitDivOrModI64BuiltinCall(SymbolicAddress callee,
+                                               ValType operandType);
 #else
   void emitQuotientI64();
   void emitQuotientU64();
@@ -6209,8 +6821,9 @@
   void emitReinterpretI32AsF32();
   void emitReinterpretI64AsF64();
   void emitRound(RoundingMode roundingMode, ValType operandType);
-  void emitInstanceCall(uint32_t lineOrBytecode, const MIRTypeVector& sig,
-                        ExprType retType, SymbolicAddress builtin);
+  MOZ_MUST_USE bool emitInstanceCall(uint32_t lineOrBytecode,
+                                     const MIRTypeVector& sig, ExprType retType,
+                                     SymbolicAddress builtin);
   MOZ_MUST_USE bool emitGrowMemory();
   MOZ_MUST_USE bool emitCurrentMemory();
 
@@ -7531,7 +8144,9 @@
   if (!deadCode_) {
     masm.nopAlign(CodeAlignment);
     masm.bind(&controlItem(0).label);
-    addInterruptCheck();
+    if (!addInterruptCheck()) {
+      return false;
+    }
   }
 
   return true;
@@ -8031,10 +8646,16 @@
     return false;
   }
 
+  CodeOffset raOffset;
   if (import) {
-    callImport(env_.funcImportGlobalDataOffsets[funcIndex], baselineCall);
+    raOffset =
+        callImport(env_.funcImportGlobalDataOffsets[funcIndex], baselineCall);
   } else {
-    callDefinition(funcIndex, baselineCall);
+    raOffset = callDefinition(funcIndex, baselineCall);
+  }
+
+  if (!createStackMap(""emitCall"", raOffset)) {
+    return false;
   }
 
   endCall(baselineCall, stackSpace);
@@ -8083,7 +8704,11 @@
     return false;
   }
 
-  callIndirect(funcTypeIndex, tableIndex, callee, baselineCall);
+  CodeOffset raOffset =
+      callIndirect(funcTypeIndex, tableIndex, callee, baselineCall);
+  if (!createStackMap(""emitCallIndirect"", raOffset)) {
+    return false;
+  }
 
   endCall(baselineCall, stackSpace);
 
@@ -8143,7 +8768,10 @@
     return false;
   }
 
-  builtinCall(callee, baselineCall);
+  CodeOffset raOffset = builtinCall(callee, baselineCall);
+  if (!createStackMap(""emitUnaryMathBuiltin[..]"", raOffset)) {
+    return false;
+  }
 
   endCall(baselineCall, stackSpace);
 
@@ -8155,7 +8783,7 @@
 }
 
 #ifdef RABALDR_INT_DIV_I64_CALLOUT
-void BaseCompiler::emitDivOrModI64BuiltinCall(SymbolicAddress callee,
+bool BaseCompiler::emitDivOrModI64BuiltinCall(SymbolicAddress callee,
                                               ValType operandType) {
   MOZ_ASSERT(operandType == ValType::I64);
   MOZ_ASSERT(!deadCode_);
@@ -8182,12 +8810,16 @@
   masm.passABIArg(srcDest.low);
   masm.passABIArg(rhs.high);
   masm.passABIArg(rhs.low);
-  masm.callWithABI(bytecodeOffset(), callee);
+  CodeOffset raOffset = masm.callWithABI(bytecodeOffset(), callee);
+  if (!createStackMap(""emitDivOrModI64Bui[..]"", raOffset)) {
+    return false;
+  }
 
   masm.bind(&done);
 
   freeI64(rhs);
   pushI64(srcDest);
+  return true;
 }
 #endif  // RABALDR_INT_DIV_I64_CALLOUT
 
@@ -8208,9 +8840,12 @@
   masm.passABIArg(input.high);
   masm.passABIArg(input.low);
 #endif
-  masm.callWithABI(
+  CodeOffset raOffset = masm.callWithABI(
       bytecodeOffset(), callee,
       resultType == ValType::F32 ? MoveOp::FLOAT32 : MoveOp::DOUBLE);
+  if (!createStackMap(""emitConvertInt64To[..]"", raOffset)) {
+    return false;
+  }
 
   freeI64(input);
 
@@ -8250,7 +8885,10 @@
 
   masm.setupWasmABICall();
   masm.passABIArg(doubleInput, MoveOp::DOUBLE);
-  masm.callWithABI(bytecodeOffset(), callee);
+  CodeOffset raOffset = masm.callWithABI(bytecodeOffset(), callee);
+  if (!createStackMap(""emitConvertFloatin[..]"", raOffset)) {
+    return false;
+  }
 
   freeF64(doubleInput);
 
@@ -8556,7 +9194,10 @@
                                      valueAddr);
       }
       RegPtr rv = popRef();
-      emitBarrieredStore(Nothing(), valueAddr, rv);  // Consumes valueAddr
+      if (!emitBarrieredStore(Nothing(), valueAddr,
+                              rv)) {  // Consumes valueAddr
+        return false;
+      }
       freeRef(rv);
       break;
     }
@@ -9061,7 +9702,7 @@
   pushI32(rd);
 }
 
-void BaseCompiler::emitInstanceCall(uint32_t lineOrBytecode,
+bool BaseCompiler::emitInstanceCall(uint32_t lineOrBytecode,
                                     const MIRTypeVector& sig, ExprType retType,
                                     SymbolicAddress builtin) {
   MOZ_ASSERT(sig[0] == MIRType::Pointer);
@@ -9094,7 +9735,12 @@
     }
     passArg(t, peek(numArgs - i), &baselineCall);
   }
-  builtinInstanceMethodCall(builtin, instanceArg, baselineCall);
+  CodeOffset raOffset =
+      builtinInstanceMethodCall(builtin, instanceArg, baselineCall);
+  if (!createStackMap(""emitInstanceCall"", raOffset)) {
+    return false;
+  }
+
   endCall(baselineCall, stackSpace);
 
   popValueStackBy(numArgs);
@@ -9110,6 +9756,7 @@
   // implemented as callouts.
 
   pushReturnedIfNonVoid(baselineCall, retType);
+  return true;
 }
 
 bool BaseCompiler::emitGrowMemory() {
@@ -9124,10 +9771,8 @@
     return true;
   }
 
-  // infallible
-  emitInstanceCall(lineOrBytecode, SigPI_, ExprType::I32,
-                   SymbolicAddress::GrowMemory);
-  return true;
+  return emitInstanceCall(lineOrBytecode, SigPI_, ExprType::I32,
+                          SymbolicAddress::GrowMemory);
 }
 
 bool BaseCompiler::emitCurrentMemory() {
@@ -9141,10 +9786,8 @@
     return true;
   }
 
-  // infallible
-  emitInstanceCall(lineOrBytecode, SigP_, ExprType::I32,
-                   SymbolicAddress::CurrentMemory);
-  return true;
+  return emitInstanceCall(lineOrBytecode, SigP_, ExprType::I32,
+                          SymbolicAddress::CurrentMemory);
 }
 
 bool BaseCompiler::emitRefNull() {
@@ -9458,12 +10101,16 @@
   // Returns -1 on trap, otherwise nonnegative result.
   switch (type.code()) {
     case ValType::I32:
-      emitInstanceCall(lineOrBytecode, SigPIIL_, ExprType::I32,
-                       SymbolicAddress::WaitI32);
+      if (!emitInstanceCall(lineOrBytecode, SigPIIL_, ExprType::I32,
+                            SymbolicAddress::WaitI32)) {
+        return false;
+      }
       break;
     case ValType::I64:
-      emitInstanceCall(lineOrBytecode, SigPILL_, ExprType::I32,
-                       SymbolicAddress::WaitI64);
+      if (!emitInstanceCall(lineOrBytecode, SigPILL_, ExprType::I32,
+                            SymbolicAddress::WaitI64)) {
+        return false;
+      }
       break;
     default:
       MOZ_CRASH();
@@ -9491,8 +10138,10 @@
   }
 
   // Returns -1 on trap, otherwise nonnegative result.
-  emitInstanceCall(lineOrBytecode, SigPII_, ExprType::I32,
-                   SymbolicAddress::Wake);
+  if (!emitInstanceCall(lineOrBytecode, SigPII_, ExprType::I32,
+                        SymbolicAddress::Wake)) {
+    return false;
+  }
 
   Label ok;
   masm.branchTest32(Assembler::NotSigned, ReturnReg, ReturnReg, &ok);
@@ -9522,13 +10171,17 @@
   if (isMem) {
     MOZ_ASSERT(srcMemOrTableIndex == 0);
     MOZ_ASSERT(dstMemOrTableIndex == 0);
-    emitInstanceCall(lineOrBytecode, SigPIII_, ExprType::Void,
-                     SymbolicAddress::MemCopy);
+    if (!emitInstanceCall(lineOrBytecode, SigPIII_, ExprType::Void,
+                          SymbolicAddress::MemCopy)) {
+      return false;
+    }
   } else {
     pushI32(dstMemOrTableIndex);
     pushI32(srcMemOrTableIndex);
-    emitInstanceCall(lineOrBytecode, SigPIIIII_, ExprType::Void,
-                     SymbolicAddress::TableCopy);
+    if (!emitInstanceCall(lineOrBytecode, SigPIIIII_, ExprType::Void,
+                          SymbolicAddress::TableCopy)) {
+      return false;
+    }
   }
 
   Label ok;
@@ -9557,7 +10210,9 @@
   pushI32(int32_t(segIndex));
   SymbolicAddress callee =
       isMem ? SymbolicAddress::MemDrop : SymbolicAddress::TableDrop;
-  emitInstanceCall(lineOrBytecode, SigPI_, ExprType::Void, callee);
+  if (!emitInstanceCall(lineOrBytecode, SigPI_, ExprType::Void, callee)) {
+    return false;
+  }
 
   Label ok;
   masm.branchTest32(Assembler::NotSigned, ReturnReg, ReturnReg, &ok);
@@ -9580,8 +10235,10 @@
   }
 
   // Returns -1 on trap, otherwise 0.
-  emitInstanceCall(lineOrBytecode, SigPIII_, ExprType::Void,
-                   SymbolicAddress::MemFill);
+  if (!emitInstanceCall(lineOrBytecode, SigPIII_, ExprType::Void,
+                        SymbolicAddress::MemFill)) {
+    return false;
+  }
 
   Label ok;
   masm.branchTest32(Assembler::NotSigned, ReturnReg, ReturnReg, &ok);
@@ -9609,12 +10266,16 @@
   // Returns -1 on trap, otherwise 0.
   pushI32(int32_t(segIndex));
   if (isMem) {
-    emitInstanceCall(lineOrBytecode, SigPIIII_, ExprType::Void,
-                     SymbolicAddress::MemInit);
+    if (!emitInstanceCall(lineOrBytecode, SigPIIII_, ExprType::Void,
+                          SymbolicAddress::MemInit)) {
+      return false;
+    }
   } else {
     pushI32(dstTableIndex);
-    emitInstanceCall(lineOrBytecode, SigPIIIII_, ExprType::Void,
-                     SymbolicAddress::TableInit);
+    if (!emitInstanceCall(lineOrBytecode, SigPIIIII_, ExprType::Void,
+                          SymbolicAddress::TableInit)) {
+      return false;
+    }
   }
 
   Label ok;
@@ -9642,8 +10303,10 @@
   // Returns (void*)-1 for error, this will not be confused with a real ref
   // value.
   pushI32(tableIndex);
-  emitInstanceCall(lineOrBytecode, SigPII_, ExprType::AnyRef,
-                   SymbolicAddress::TableGet);
+  if (!emitInstanceCall(lineOrBytecode, SigPII_, ExprType::AnyRef,
+                        SymbolicAddress::TableGet)) {
+    return false;
+  }
   Label noTrap;
   masm.branchPtr(Assembler::NotEqual, ReturnReg, Imm32(-1), &noTrap);
   trap(Trap::ThrowReported);
@@ -9668,10 +10331,8 @@
   //
   // infallible.
   pushI32(tableIndex);
-  emitInstanceCall(lineOrBytecode, SigPIPI_, ExprType::I32,
-                   SymbolicAddress::TableGrow);
-
-  return true;
+  return emitInstanceCall(lineOrBytecode, SigPIPI_, ExprType::I32,
+                          SymbolicAddress::TableGrow);
 }
 
 MOZ_MUST_USE
@@ -9689,8 +10350,10 @@
   //
   // Returns -1 on range error, otherwise 0 (which is then ignored).
   pushI32(tableIndex);
-  emitInstanceCall(lineOrBytecode, SigPIPI_, ExprType::Void,
-                   SymbolicAddress::TableSet);
+  if (!emitInstanceCall(lineOrBytecode, SigPIPI_, ExprType::Void,
+                        SymbolicAddress::TableSet)) {
+    return false;
+  }
   Label noTrap;
   masm.branchTest32(Assembler::NotSigned, ReturnReg, ReturnReg, &noTrap);
   trap(Trap::ThrowReported);
@@ -9712,9 +10375,8 @@
   //
   // infallible.
   pushI32(tableIndex);
-  emitInstanceCall(lineOrBytecode, SigPI_, ExprType::I32,
-                   SymbolicAddress::TableSize);
-  return true;
+  return emitInstanceCall(lineOrBytecode, SigPI_, ExprType::I32,
+                          SymbolicAddress::TableSize);
 }
 
 bool BaseCompiler::emitStructNew() {
@@ -9738,8 +10400,10 @@
   const StructType& structType = env_.types[typeIndex].structType();
 
   pushI32(structType.moduleIndex_);
-  emitInstanceCall(lineOrBytecode, SigPI_, ExprType::AnyRef,
-                   SymbolicAddress::StructNew);
+  if (!emitInstanceCall(lineOrBytecode, SigPI_, ExprType::AnyRef,
+                        SymbolicAddress::StructNew)) {
+    return false;
+  }
 
   // Null pointer check.
 
@@ -9831,8 +10495,10 @@
         pushRef(rp);  // Save rp across the call
         RegPtr valueAddr = needRef();
         masm.computeEffectiveAddress(Address(rdata, offs), valueAddr);
-        emitPostBarrier(valueAddr);  // Consumes valueAddr
-        popRef(rp);                  // Restore rp
+        if (!emitPostBarrier(valueAddr)) {  // Consumes valueAddr
+          return false;
+        }
+        popRef(rp);  // Restore rp
         if (!structType.isInline_) {
           masm.loadPtr(Address(rp, OutlineTypedObject::offsetOfData()), rdata);
         }
@@ -10011,7 +10677,9 @@
     case ValType::Ref:
     case ValType::AnyRef: {
       masm.computeEffectiveAddress(Address(rp, offs), valueAddr);
-      emitBarrieredStore(Some(rp), valueAddr, rr);  // Consumes valueAddr
+      if (!emitBarrieredStore(Some(rp), valueAddr, rr)) {  // Consumes valueAddr
+        return false;
+      }
       freeRef(rr);
       break;
     }
@@ -10060,13 +10728,13 @@
   pushI32(mustUnboxAnyref);
   pushI32(outputStruct.moduleIndex_);
   pushRef(rp);
-  emitInstanceCall(lineOrBytecode, SigPIIP_, ExprType::AnyRef,
-                   SymbolicAddress::StructNarrow);
-
-  return true;
+  return emitInstanceCall(lineOrBytecode, SigPIIP_, ExprType::AnyRef,
+                          SymbolicAddress::StructNarrow);
 }
 
 bool BaseCompiler::emitBody() {
+  MOZ_ASSERT(smgen_.framePushedAtEntryToBody_.isSome());
+
   if (!iter_.readFunctionStart(funcType().ret())) {
     return false;
   }
@@ -10107,14 +10775,34 @@
 
 #define emitIntDivCallout(doEmit, symbol, type)   \
   iter_.readBinary(type, &unused_a, &unused_b) && \
-      (deadCode_ || (doEmit(symbol, type), true))
+      (deadCode_ || doEmit(symbol, type))
+
+#ifdef DEBUG
+    // Check that the number of ref-typed entries in the operand stack matches
+    // reality.
+#define CHECK_POINTER_COUNT                                  \
+  do {                                                       \
+    MOZ_ASSERT(countMemRefsOnStk() == smgen_.memRefsOnStk_); \
+  } while (0)
+#else
+#define CHECK_POINTER_COUNT \
+  do {                      \
+  } while (0)
+#endif
 
 #define CHECK(E) \
   if (!(E)) return false
-#define NEXT() continue
+#define NEXT()           \
+  {                      \
+    CHECK_POINTER_COUNT; \
+    continue;            \
+  }
 #define CHECK_NEXT(E)     \
   if (!(E)) return false; \
-  continue
+  {                       \
+    CHECK_POINTER_COUNT;  \
+    continue;             \
+  }
 
     // TODO / EVALUATE (bug 1316845): Not obvious that this attempt at
     // reducing overhead is really paying off relative to making the check
@@ -10147,7 +10835,18 @@
       sync();
 
       insertBreakablePoint(CallSiteDesc::Breakpoint);
-    }
+      if (!createStackMap(""debug: per insn"")) {
+        return false;
+      }
+    }
+
+    // Going below framePushedAtEntryToBody_ would imply that we've
+    // popped off the machine stack, part of the frame created by
+    // beginFunction().
+    MOZ_ASSERT(masm.framePushed() >= smgen_.framePushedAtEntryToBody_.value());
+
+    // At this point we're definitely not generating code for a function call.
+    MOZ_ASSERT(smgen_.framePushedBeforePushingCallArgs_.isNothing());
 
     switch (op.b0) {
       case uint16_t(Op::End):
@@ -11039,6 +11738,7 @@
 #undef CHECK
 #undef NEXT
 #undef CHECK_NEXT
+#undef CHECK_POINTER_COUNT
 #undef emitBinary
 #undef emitUnary
 #undef emitComparison
@@ -11053,7 +11753,9 @@
 }
 
 bool BaseCompiler::emitFunction() {
-  beginFunction();
+  if (!beginFunction()) {
+    return false;
+  }
 
   if (!emitBody()) {
     return false;
@@ -11068,9 +11770,12 @@
 
 BaseCompiler::BaseCompiler(const ModuleEnvironment& env,
                            const FuncCompileInput& func,
-                           const ValTypeVector& locals, Decoder& decoder,
+                           const ValTypeVector& locals,
+                           const MachineState& trapExitLayout,
+                           size_t trapExitLayoutNumWords, Decoder& decoder,
                            ExclusiveDeferredValidationState& dvs,
-                           TempAllocator* alloc, MacroAssembler* masm)
+                           TempAllocator* alloc, MacroAssembler* masm,
+                           StackMaps* stackMaps)
     : env_(env),
       iter_(env, decoder, dvs),
       func_(func),
@@ -11086,6 +11791,7 @@
       masm(*masm),
       ra(*this),
       fr(*masm),
+      smgen_(stackMaps, trapExitLayout, trapExitLayoutNumWords, *masm),
       joinRegI32_(RegI32(ReturnReg)),
       joinRegI64_(RegI64(ReturnReg64)),
       joinRegPtr_(RegPtr(ReturnReg)),
@@ -11158,6 +11864,9 @@
   MOZ_ASSERT(done(), ""all bytes must be consumed"");
   MOZ_ASSERT(func_.callSiteLineNums.length() == lastReadCallSite_);
 
+  MOZ_ASSERT(stk_.empty());
+  MOZ_ASSERT(smgen_.memRefsOnStk_ == 0);
+
   masm.flushBuffer();
 
   return offsets_;
@@ -11210,6 +11919,11 @@
     return false;
   }
 
+  // Create a description of the stack layout created by GenerateTrapExit().
+  MachineState trapExitLayout;
+  size_t trapExitLayoutNumWords;
+  GenerateTrapExitMachineState(&trapExitLayout, &trapExitLayoutNumWords);
+
   for (const FuncCompileInput& func : inputs) {
     Decoder d(func.begin, func.end, func.lineOrBytecode, error);
 
@@ -11226,7 +11940,8 @@
 
     // One-pass baseline compilation.
 
-    BaseCompiler f(env, func, locals, d, dvs, &alloc, &masm);
+    BaseCompiler f(env, func, locals, trapExitLayout, trapExitLayoutNumWords, d,
+                   dvs, &alloc, &masm, &code->stackMaps);
     if (!f.init()) {
       return false;
     }
@@ -11247,6 +11962,44 @@
   return code->swap(masm);
 }
 
+#ifdef DEBUG
+bool js::wasm::IsValidStackMapKey(bool debugEnabled, const uint8_t* nextPC) {
+#if defined(JS_CODEGEN_X64) || defined(JS_CODEGEN_X86)
+  const uint8_t* insn = nextPC;
+  return (insn[-2] == 0x0F && insn[-1] == 0x0B) ||  // ud2
+         (insn[-2] == 0xFF && insn[-1] == 0xD0) ||  // call *%{rax,eax}
+         insn[-5] == 0xE8 ||                        // call simm32
+         (debugEnabled && insn[-5] == 0x0F && insn[-4] == 0x1F &&
+          insn[-3] == 0x44 && insn[-2] == 0x00 &&
+          insn[-1] == 0x00);  // nop_five
+
+#elif defined(JS_CODEGEN_ARM)
+  const uint32_t* insn = (const uint32_t*)nextPC;
+  return ((uintptr_t(insn) & 3) == 0) &&              // must be ARM, not Thumb
+         (insn[-1] == 0xe7f000f0 ||                   // udf
+          (insn[-1] & 0xfffffff0) == 0xe12fff30 ||    // blx reg (ARM, enc A1)
+          (insn[-1] & 0xff000000) == 0xeb000000 ||    // bl simm24 (ARM, enc A1)
+          (debugEnabled && insn[-1] == 0xe320f000));  // ""as_nop""
+
+#elif defined(JS_CODEGEN_ARM64)
+#ifdef JS_SIMULATOR_ARM64
+  const uint32_t hltInsn = 0xd45bd600;
+#else
+  const uint32_t hltInsn = 0xd4a00000;
+#endif
+  const uint32_t* insn = (const uint32_t*)nextPC;
+  return ((uintptr_t(insn) & 3) == 0) &&
+         (insn[-1] == hltInsn ||                      // hlt
+          (insn[-1] & 0xfffffc1f) == 0xd63f0000 ||    // blr reg
+          (insn[-1] & 0xfc000000) == 0x94000000 ||    // bl simm26
+          (debugEnabled && insn[-1] == 0xd503201f));  // nop
+
+#else
+  MOZ_CRASH(""IsValidStackMapKey: requires implementation on this platform"");
+#endif
+}
+#endif
+
 #undef RABALDR_INT_DIV_I64_CALLOUT
 #undef RABALDR_I64_TO_FLOAT_CALLOUT
 #undef RABALDR_FLOAT_TO_I64_CALLOUT
diff -r 7e88127111fe -r 5ca49059949b js/src/wasm/WasmBaselineCompile.h
--- a/js/src/wasm/WasmBaselineCompile.h	Tue Dec 11 18:27:01 2018 +0000
+++ b/js/src/wasm/WasmBaselineCompile.h	Fri Dec 14 13:00:44 2018 +0100
@@ -81,6 +81,12 @@
 #endif
 };
 
+#ifdef DEBUG
+// Check whether |nextPC| is a valid code address for a stackmap created by
+// this compiler.
+bool IsValidStackMapKey(bool debugEnabled, const uint8_t* nextPC);
+#endif
+
 }  // namespace wasm
 }  // namespace js
 
diff -r 7e88127111fe -r 5ca49059949b js/src/wasm/WasmCode.cpp
--- a/js/src/wasm/WasmCode.cpp	Tue Dec 11 18:27:01 2018 +0000
+++ b/js/src/wasm/WasmCode.cpp	Fri Dec 14 13:00:44 2018 +0100
@@ -1261,6 +1261,16 @@
   return nullptr;
 }
 
+const StackMap* Code::lookupStackMap(uint8_t* nextPC) const {
+  for (Tier t : tiers()) {
+    const StackMap* result = metadata(t).stackMaps.findMap(nextPC);
+    if (result) {
+      return result;
+    }
+  }
+  return nullptr;
+}
+
 struct TrapSitePCOffset {
   const TrapSiteVector& trapSites;
   explicit TrapSitePCOffset(const TrapSiteVector& trapSites)
diff -r 7e88127111fe -r 5ca49059949b js/src/wasm/WasmCode.h
--- a/js/src/wasm/WasmCode.h	Tue Dec 11 18:27:01 2018 +0000
+++ b/js/src/wasm/WasmCode.h	Fri Dec 14 13:00:44 2018 +0100
@@ -411,6 +411,7 @@
   TrapSiteVectorArray trapSites;
   FuncImportVector funcImports;
   FuncExportVector funcExports;
+  StackMaps stackMaps;
 
   // Debug information, not serialized.
   Uint32Vector debugTrapFarJumpOffsets;
@@ -699,6 +700,7 @@
 
   const CallSite* lookupCallSite(void* returnAddress) const;
   const CodeRange* lookupFuncRange(void* pc) const;
+  const StackMap* lookupStackMap(uint8_t* nextPC) const;
   bool containsCodePC(const void* pc) const;
   bool lookupTrap(void* pc, Trap* trap, BytecodeOffset* bytecode) const;
 
diff -r 7e88127111fe -r 5ca49059949b js/src/wasm/WasmFrameIter.cpp
--- a/js/src/wasm/WasmFrameIter.cpp	Tue Dec 11 18:27:01 2018 +0000
+++ b/js/src/wasm/WasmFrameIter.cpp	Fri Dec 14 13:00:44 2018 +0100
@@ -42,7 +42,8 @@
       unwoundIonCallerFP_(nullptr),
       unwoundIonFrameType_(jit::FrameType(-1)),
       unwind_(Unwind::False),
-      unwoundAddressOfReturnAddress_(nullptr) {
+      unwoundAddressOfReturnAddress_(nullptr),
+      returnAddressToFp_(nullptr) {
   MOZ_ASSERT(fp_);
 
   // When the stack is captured during a trap (viz., to create the .stack
@@ -107,6 +108,7 @@
 void WasmFrameIter::popFrame() {
   Frame* prevFP = fp_;
   fp_ = prevFP->callerFP;
+  returnAddressToFp_ = (uint8_t*)prevFP->returnAddress;
 
   if (uintptr_t(fp_) & ExitOrJitEntryFPTag) {
     // We just unwound a frame pointer which has the low bit set,
@@ -303,6 +305,15 @@
   return unwoundIonFrameType_;
 }
 
+uint8_t* WasmFrameIter::returnAddressToFp() const {
+  if (returnAddressToFp_) {
+    return returnAddressToFp_;
+  }
+  MOZ_ASSERT(activation_->isWasmTrapping());
+  // The next instruction is the instruction following the trap instruction.
+  return (uint8_t*)activation_->wasmTrapData().resumePC;
+}
+
 /*****************************************************************************/
 // Prologue/epilogue code generation
 
diff -r 7e88127111fe -r 5ca49059949b js/src/wasm/WasmFrameIter.h
--- a/js/src/wasm/WasmFrameIter.h	Tue Dec 11 18:27:01 2018 +0000
+++ b/js/src/wasm/WasmFrameIter.h	Fri Dec 14 13:00:44 2018 +0100
@@ -69,6 +69,7 @@
   jit::FrameType unwoundIonFrameType_;
   Unwind unwind_;
   void** unwoundAddressOfReturnAddress_;
+  uint8_t* returnAddressToFp_;
 
   void popFrame();
 
@@ -93,6 +94,11 @@
   DebugFrame* debugFrame() const;
   jit::FrameType unwoundIonFrameType() const;
   uint8_t* unwoundIonCallerFP() const { return unwoundIonCallerFP_; }
+  Frame* frame() const { return fp_; }
+
+  // Returns the return address of the frame above this one (that is, the
+  // return address that returns back to the current frame).
+  uint8_t* returnAddressToFp() const;
 };
 
 enum class SymbolicAddress;
diff -r 7e88127111fe -r 5ca49059949b js/src/wasm/WasmGenerator.cpp
--- a/js/src/wasm/WasmGenerator.cpp	Tue Dec 11 18:27:01 2018 +0000
+++ b/js/src/wasm/WasmGenerator.cpp	Fri Dec 14 13:00:44 2018 +0100
@@ -619,7 +619,7 @@
   return true;
 }
 
-bool ModuleGenerator::linkCompiledCode(const CompiledCode& code) {
+bool ModuleGenerator::linkCompiledCode(CompiledCode& code) {
   // All code offsets in 'code' must be incremented by their position in the
   // overall module when the code was appended.
 
@@ -685,6 +685,17 @@
     }
   }
 
+  for (size_t i = 0; i < code.stackMaps.length(); i++) {
+    StackMaps::Maplet maplet = code.stackMaps.move(i);
+    maplet.offsetBy(offsetInModule);
+    if (!metadataTier_->stackMaps.add(maplet)) {
+      // This function is now the only owner of maplet.map, so we'd better
+      // free it right now.
+      maplet.map->destroy();
+      return false;
+    }
+  }
+
   return true;
 }
 
@@ -910,8 +921,22 @@
 }
 
 bool ModuleGenerator::finishMetadataTier() {
+  // The stack maps aren't yet sorted.  Do so now, since we'll need to
+  // binary-search them at GC time.
+  metadataTier_->stackMaps.sort();
+
+#ifdef DEBUG
+  // Check that the stack map contains no duplicates, since that could lead to
+  // ambiguities about stack slot pointerness.
+  uint8_t* previousNextInsnAddr = nullptr;
+  for (size_t i = 0; i < metadataTier_->stackMaps.length(); i++) {
+    const StackMaps::Maplet& maplet = metadataTier_->stackMaps.get(i);
+    MOZ_ASSERT_IF(i > 0, uintptr_t(maplet.nextInsnAddr) >
+                             uintptr_t(previousNextInsnAddr));
+    previousNextInsnAddr = maplet.nextInsnAddr;
+  }
+
   // Assert all sorted metadata is sorted.
-#ifdef DEBUG
   uint32_t last = 0;
   for (const CodeRange& codeRange : metadataTier_->codeRanges) {
     MOZ_ASSERT(codeRange.begin() >= last);
@@ -1009,6 +1034,17 @@
     return nullptr;
   }
 
+  metadataTier_->stackMaps.offsetBy(uintptr_t(segment->base()));
+
+#ifdef DEBUG
+  // Check that each stack map is associated with a plausible instruction.
+  for (size_t i = 0; i < metadataTier_->stackMaps.length(); i++) {
+    MOZ_ASSERT(IsValidStackMapKey(env_->debugEnabled(),
+                                  metadataTier_->stackMaps.get(i).nextInsnAddr),
+               ""wasm stack map does not reference a valid insn"");
+  }
+#endif
+
   return js::MakeUnique<CodeTier>(std::move(metadataTier_), std::move(segment));
 }
 
diff -r 7e88127111fe -r 5ca49059949b js/src/wasm/WasmGenerator.h
--- a/js/src/wasm/WasmGenerator.h	Tue Dec 11 18:27:01 2018 +0000
+++ b/js/src/wasm/WasmGenerator.h	Fri Dec 14 13:00:44 2018 +0100
@@ -65,6 +65,7 @@
   CallFarJumpVector callFarJumps;
   SymbolicAccessVector symbolicAccesses;
   jit::CodeLabelVector codeLabels;
+  StackMaps stackMaps;
 
   MOZ_MUST_USE bool swap(jit::MacroAssembler& masm);
 
@@ -77,6 +78,7 @@
     callFarJumps.clear();
     symbolicAccesses.clear();
     codeLabels.clear();
+    stackMaps.clear();
     MOZ_ASSERT(empty());
   }
 
@@ -84,7 +86,7 @@
     return bytes.empty() && codeRanges.empty() && callSites.empty() &&
            callSiteTargets.empty() && trapSites.empty() &&
            callFarJumps.empty() && symbolicAccesses.empty() &&
-           codeLabels.empty();
+           codeLabels.empty() && stackMaps.empty();
   }
 
   size_t sizeOfExcludingThis(mozilla::MallocSizeOf mallocSizeOf) const;
@@ -183,7 +185,7 @@
   const CodeRange& funcCodeRange(uint32_t funcIndex) const;
   bool linkCallSites();
   void noteCodeRange(uint32_t codeRangeIndex, const CodeRange& codeRange);
-  bool linkCompiledCode(const CompiledCode& code);
+  bool linkCompiledCode(CompiledCode& code);
   bool locallyCompileCurrentTask();
   bool finishTask(CompileTask* task);
   bool launchBatchCompile();
diff -r 7e88127111fe -r 5ca49059949b js/src/wasm/WasmInstance.cpp
--- a/js/src/wasm/WasmInstance.cpp	Tue Dec 11 18:27:01 2018 +0000
+++ b/js/src/wasm/WasmInstance.cpp	Fri Dec 14 13:00:44 2018 +0100
@@ -27,6 +27,7 @@
 #include ""util/Text.h""
 #include ""wasm/WasmBuiltins.h""
 #include ""wasm/WasmModule.h""
+#include ""wasm/WasmStubs.h""
 
 #include ""gc/StoreBuffer-inl.h""
 #include ""vm/ArrayBufferObject-inl.h""
@@ -1122,6 +1123,80 @@
   TraceEdge(trc, &object_, ""wasm instance object"");
 }
 
+uintptr_t Instance::traceFrame(JSTracer* trc, const wasm::WasmFrameIter& wfi,
+                               uint8_t* nextPC,
+                               uintptr_t highestByteVisitedInPrevFrame) {
+  const StackMap* map = code().lookupStackMap(nextPC);
+  if (!map) {
+    return 0;
+  }
+
+  Frame* frame = wfi.frame();
+
+  // |frame| points somewhere in the middle of the area described by |map|.
+  // We have to calculate |scanStart|, the lowest address that is described by
+  // |map|, by consulting |map->frameOffsetFromTop|.
+
+  const size_t numMappedBytes = map->numMappedWords * sizeof(void*);
+  const uintptr_t scanStart = uintptr_t(frame) +
+                              (map->frameOffsetFromTop * sizeof(void*)) -
+                              numMappedBytes;
+  MOZ_ASSERT(0 == scanStart % sizeof(void*));
+
+  // Do what we can to assert that, for consecutive wasm frames, their stack
+  // maps also abut exactly.  This is a useful sanity check on the sizing of
+  // stack maps.
+  MOZ_ASSERT_IF(highestByteVisitedInPrevFrame != 0,
+                highestByteVisitedInPrevFrame + 1 == scanStart);
+
+  uintptr_t* stackWords = (uintptr_t*)scanStart;
+
+  // If we have some exit stub words, this means the map also covers an area
+  // created by a exit stub, and so the highest word of that should be a
+  // constant created by (code created by) GenerateTrapExit.
+  MOZ_ASSERT_IF(
+      map->numExitStubWords > 0,
+      stackWords[map->numExitStubWords - 1 - TrapExitDummyValueOffsetFromTop] ==
+          TrapExitDummyValue);
+
+  // And actually hand them off to the GC.
+  for (uint32_t i = 0; i < map->numMappedWords; i++) {
+    if (map->getBit(i) == 0) {
+      continue;
+    }
+
+    // This assertion seems at least moderately effective in detecting
+    // discrepancies or misalignments between the map and reality.
+    MOZ_ASSERT(js::gc::IsCellPointerValidOrNull((const void*)stackWords[i]));
+
+    if (stackWords[i]) {
+      TraceRoot(trc, (JSObject**)&stackWords[i],
+                ""Instance::traceWasmFrame: normal word"");
+    }
+  }
+
+  // Finally, deal with a ref-typed DebugFrame if it is present.
+  if (map->hasRefTypedDebugFrame) {
+    DebugFrame* debugFrame = DebugFrame::from(frame);
+    char* debugFrameP = (char*)debugFrame;
+
+    char* resultRefP = debugFrameP + DebugFrame::offsetOfResults();
+    if (*(intptr_t*)resultRefP) {
+      TraceRoot(trc, (JSObject**)resultRefP,
+                ""Instance::traceWasmFrame: DebugFrame::resultRef_"");
+    }
+
+    if (debugFrame->hasCachedReturnJSValue()) {
+      char* cachedReturnJSValueP =
+          debugFrameP + DebugFrame::offsetOfCachedReturnJSValue();
+      TraceRoot(trc, (js::Value*)cachedReturnJSValueP,
+                ""Instance::traceWasmFrame: DebugFrame::cachedReturnJSValue_"");
+    }
+  }
+
+  return scanStart + numMappedBytes - 1;
+}
+
 WasmMemoryObject* Instance::memory() const { return memory_; }
 
 SharedMem<uint8_t*> Instance::memoryBase() const {
diff -r 7e88127111fe -r 5ca49059949b js/src/wasm/WasmInstance.h
--- a/js/src/wasm/WasmInstance.h	Tue Dec 11 18:27:01 2018 +0000
+++ b/js/src/wasm/WasmInstance.h	Fri Dec 14 13:00:44 2018 +0100
@@ -84,6 +84,17 @@
             const ElemSegmentVector& elemSegments);
   void trace(JSTracer* trc);
 
+  // Trace any GC roots on the stack, for the frame associated with |wfi|,
+  // whose next instruction to execute is |nextPC|.
+  //
+  // For consistency checking of StackMap sizes in debug builds, this also
+  // takes |highestByteVisitedInPrevFrame|, which is the address of the
+  // highest byte scanned in the frame below this one on the stack, and in
+  // turn it returns the address of the highest byte scanned in this frame.
+  uintptr_t traceFrame(JSTracer* trc, const wasm::WasmFrameIter& wfi,
+                       uint8_t* nextPC,
+                       uintptr_t highestByteVisitedInPrevFrame);
+
   JS::Realm* realm() const { return realm_; }
   const Code& code() const { return *code_; }
   const CodeTier& code(Tier t) const { return code_->codeTier(t); }
diff -r 7e88127111fe -r 5ca49059949b js/src/wasm/WasmStubs.cpp
--- a/js/src/wasm/WasmStubs.cpp	Tue Dec 11 18:27:01 2018 +0000
+++ b/js/src/wasm/WasmStubs.cpp	Fri Dec 14 13:00:44 2018 +0100
@@ -246,7 +246,8 @@
 template <class Operand>
 static void WasmPush(MacroAssembler& masm, const Operand& op) {
 #ifdef JS_CODEGEN_ARM64
-  // Allocate a pad word so that SP can remain properly aligned.
+  // Allocate a pad word so that SP can remain properly aligned.  |op| will be
+  // written at the lower-addressed of the two words pushed here.
   masm.reserveStack(WasmPushSize);
   masm.storePtr(op, Address(masm.getStackPointer(), 0));
 #else
@@ -273,10 +274,10 @@
 #ifdef ENABLE_WASM_GC
 static void SuppressGC(MacroAssembler& masm, int32_t increment,
                        Register scratch) {
-  masm.loadPtr(Address(WasmTlsReg, offsetof(TlsData, cx)), scratch);
-  masm.add32(Imm32(increment),
-             Address(scratch, offsetof(JSContext, suppressGC) +
-                                  js::ThreadData<int32_t>::offsetOfValue()));
+  // masm.loadPtr(Address(WasmTlsReg, offsetof(TlsData, cx)), scratch);
+  // masm.add32(Imm32(increment),
+  //           Address(scratch, offsetof(JSContext, suppressGC) +
+  //                                js::ThreadData<int32_t>::offsetOfValue()));
 }
 #endif
 
@@ -1778,6 +1779,25 @@
               ""high lanes of SIMD registers need to be saved too"");
 #endif
 
+// Generate a MachineState which describes the locations of the GPRs as saved
+// by GenerateTrapExit.  FP registers are ignored.  Note that the values
+// stored in the MachineState are offsets in words downwards from the top of
+// the save area.  That is, a higher value implies a lower address.
+void wasm::GenerateTrapExitMachineState(MachineState* machine,
+                                        size_t* numWords) {
+  // This is the number of words pushed by the initial WasmPush().
+  *numWords = WasmPushSize / sizeof(void*);
+  MOZ_ASSERT(*numWords == TrapExitDummyValueOffsetFromTop + 1);
+
+  // And these correspond to the PushRegsInMask() that immediately follows.
+  for (GeneralRegisterBackwardIterator iter(RegsToPreserve.gprs()); iter.more();
+       ++iter) {
+    machine->setRegisterLocation(*iter,
+                                 reinterpret_cast<uintptr_t*>(*numWords));
+    (*numWords)++;
+  }
+}
+
 // Generate a stub which calls WasmReportTrap() and can be executed by having
 // the signal handler redirect PC from any trapping instruction.
 static bool GenerateTrapExit(MacroAssembler& masm, Label* throwLabel,
@@ -1794,7 +1814,7 @@
   // that registers are not clobbered, we need to preserve all registers in
   // the trap exit. One simplifying assumption is that flags may be clobbered.
   // Push a dummy word to use as return address below.
-  WasmPush(masm, ImmWord(0));
+  WasmPush(masm, ImmWord(TrapExitDummyValue));
   unsigned framePushedBeforePreserve = masm.framePushed();
   masm.PushRegsInMask(RegsToPreserve);
   unsigned offsetOfReturnWord = masm.framePushed() - framePushedBeforePreserve;
diff -r 7e88127111fe -r 5ca49059949b js/src/wasm/WasmStubs.h
--- a/js/src/wasm/WasmStubs.h	Tue Dec 11 18:27:01 2018 +0000
+++ b/js/src/wasm/WasmStubs.h	Fri Dec 14 13:00:44 2018 +0100
@@ -44,6 +44,23 @@
                                HasGcTypes gcTypesConfigured,
                                CodeRangeVector* codeRanges);
 
+extern void GenerateTrapExitMachineState(jit::MachineState* machine,
+                                         size_t* numWords);
+
+// A value that is written into the trap exit frame, which is useful for
+// cross-checking during garbage collection.
+static constexpr uintptr_t TrapExitDummyValue = 1337;
+
+// And its offset, in words, down from the highest-addressed word of the trap
+// exit frame.  The value is written into the frame using WasmPush.  In the
+// case where WasmPush allocates more than one word, the value will therefore
+// be written at the lowest-addressed word.
+#ifdef JS_CODEGEN_ARM64
+static constexpr size_t TrapExitDummyValueOffsetFromTop = 1;
+#else
+static constexpr size_t TrapExitDummyValueOffsetFromTop = 0;
+#endif
+
 // An argument that will end up on the stack according to the system ABI, to be
 // passed to GenerateDirectCallFromJit. Since the direct JIT call creates its
 // own frame, it is its responsibility to put stack arguments to their expected
diff -r 7e88127111fe -r 5ca49059949b js/src/wasm/WasmTypes.h
--- a/js/src/wasm/WasmTypes.h	Tue Dec 11 18:27:01 2018 +0000
+++ b/js/src/wasm/WasmTypes.h	Fri Dec 14 13:00:44 2018 +0100
@@ -22,6 +22,7 @@
 #include ""mozilla/Alignment.h""
 #include ""mozilla/ArrayUtils.h""
 #include ""mozilla/Atomics.h""
+#include ""mozilla/BinarySearch.h""
 #include ""mozilla/EnumeratedArray.h""
 #include ""mozilla/HashFunctions.h""
 #include ""mozilla/Maybe.h""
@@ -1709,6 +1710,212 @@
 
 typedef Vector<CallSiteTarget, 0, SystemAllocPolicy> CallSiteTargetVector;
 
+typedef Vector<bool, 32, SystemAllocPolicy> ExitStubMapVector;
+
+struct StackMap final {
+  // A StackMap is a bit-array containing numMappedWords bits, one bit per
+  // word of stack.  Bit index zero is for the lowest addressed word in the
+  // range.
+  //
+  // This is a variable-length structure whose size must be known at creation
+  // time.
+  //
+  // Users of the map will know the address of the wasm::Frame that is covered
+  // by this map.  In order that they can calculate the exact address range
+  // covered by the map, the map also stores the offset, from the highest
+  // addressed word of the map, of the embedded wasm::Frame.  This is an
+  // offset down from the highest address, rather than up from the lowest, so
+  // as to limit its range to 11 bits, where
+  // 11 == ceil(log2(MaxParams * sizeof-biggest-param-type-in-words))
+  //
+  // The map may also cover a ref-typed DebugFrame.  If so that can be noted,
+  // since users of the map need to trace pointers in such a DebugFrame.
+  //
+  // Finally, for sanity checking only, for stack maps associated with a wasm
+  // trap exit stub, the number of words used by the trap exit stub save area
+  // is also noted.  This is used in Instance::traceFrame to check that the
+  // TrapExitDummyValue is in the expected place in the frame.
+
+  // The total number of stack words covered by the map ..
+  uint32_t numMappedWords : 30;
+
+  // .. of which this many are ""exit stub"" extras
+  uint32_t numExitStubWords : 6;
+
+  // Where is Frame* relative to the top?  This is an offset in words.
+  uint32_t frameOffsetFromTop : 11;
+
+  // Notes the presence of a ref-typed DebugFrame.
+  uint32_t hasRefTypedDebugFrame : 1;
+
+ private:
+  static constexpr uint32_t maxMappedWords = (1 << 30) - 1;
+  static constexpr uint32_t maxExitStubWords = (1 << 6) - 1;
+  static constexpr uint32_t maxFrameOffsetFromTop = (1 << 11) - 1;
+
+  uint32_t bitmap[1];
+
+  explicit StackMap(uint32_t numMappedWords)
+      : numMappedWords(numMappedWords),
+        numExitStubWords(0),
+        frameOffsetFromTop(0),
+        hasRefTypedDebugFrame(0) {
+    const uint32_t nBitmap = calcNBitmap(numMappedWords);
+    memset(bitmap, 0, nBitmap * sizeof(bitmap[0]));
+  }
+
+ public:
+  static StackMap* create(uint32_t numMappedWords) {
+    uint32_t nBitmap = calcNBitmap(numMappedWords);
+    char* buf =
+        (char*)js_malloc(sizeof(StackMap) + (nBitmap - 1) * sizeof(bitmap[0]));
+    if (!buf) {
+      return nullptr;
+    }
+    return ::new (buf) StackMap(numMappedWords);
+  }
+
+  void destroy() { js_free((char*)this); }
+
+  // Record the number of words in the map used as a wasm trap exit stub
+  // save area.  See comment above.
+  void setExitStubWords(uint32_t nWords) {
+    MOZ_ASSERT(numExitStubWords == 0);
+    MOZ_RELEASE_ASSERT(nWords <= maxExitStubWords);
+    MOZ_ASSERT(nWords <= numMappedWords);
+    numExitStubWords = nWords;
+  }
+
+  // Record the offset from the highest-addressed word of the map, that the
+  // wasm::Frame lives at.  See comment above.
+  void setFrameOffsetFromTop(uint32_t nWords) {
+    MOZ_ASSERT(frameOffsetFromTop == 0);
+    MOZ_RELEASE_ASSERT(nWords <= maxFrameOffsetFromTop);
+    MOZ_ASSERT(frameOffsetFromTop < numMappedWords);
+    frameOffsetFromTop = nWords;
+  }
+
+  // If the frame described by this StackMap includes a DebugFrame for a
+  // ref-typed return value, call here to record that fact.
+  void setHasRefTypedDebugFrame() {
+    MOZ_ASSERT(hasRefTypedDebugFrame == 0);
+    hasRefTypedDebugFrame = 1;
+  }
+
+  inline void setBit(uint32_t bitIndex) {
+    MOZ_ASSERT(bitIndex < numMappedWords);
+    uint32_t wordIndex = bitIndex / wordsPerBitmapElem;
+    uint32_t wordOffset = bitIndex % wordsPerBitmapElem;
+    bitmap[wordIndex] |= (1 << wordOffset);
+  }
+
+  inline uint32_t getBit(uint32_t bitIndex) const {
+    MOZ_ASSERT(bitIndex < numMappedWords);
+    uint32_t wordIndex = bitIndex / wordsPerBitmapElem;
+    uint32_t wordOffset = bitIndex % wordsPerBitmapElem;
+    return (bitmap[wordIndex] >> wordOffset) & 1;
+  }
+
+ private:
+  static constexpr uint32_t wordsPerBitmapElem = sizeof(bitmap[0]) * 8;
+
+  static uint32_t calcNBitmap(uint32_t numMappedWords) {
+    MOZ_RELEASE_ASSERT(numMappedWords <= maxMappedWords);
+    uint32_t nBitmap =
+        (numMappedWords + wordsPerBitmapElem - 1) / wordsPerBitmapElem;
+    return nBitmap == 0 ? 1 : nBitmap;
+  }
+};
+
+// This is the expected size for a map that covers 32 or fewer words.
+static_assert(sizeof(StackMap) == 12, ""wasm::StackMap has unexpected size"");
+
+class StackMaps {
+ public:
+  // A Maplet holds a single code-address-to-map binding.  Note that the
+  // code address is the lowest address of the instruction immediately
+  // following the instruction of interest, not of the instruction of
+  // interest itself.  In practice (at least for the Wasm Baseline compiler)
+  // this means that |nextInsnAddr| points either immediately after a call
+  // instruction, after a trap instruction or after a no-op.
+  struct Maplet {
+    uint8_t* nextInsnAddr;
+    StackMap* map;
+    Maplet(uint8_t* nextInsnAddr, StackMap* map)
+        : nextInsnAddr(nextInsnAddr), map(map) {}
+    void offsetBy(uintptr_t delta) { nextInsnAddr += delta; }
+    bool operator<(const Maplet& other) const {
+      return uintptr_t(nextInsnAddr) < uintptr_t(other.nextInsnAddr);
+    }
+  };
+
+ private:
+  bool sorted_;
+  Vector<Maplet, 0, SystemAllocPolicy> mapping_;
+
+ public:
+  StackMaps() : sorted_(false) {}
+  ~StackMaps() {
+    for (size_t i = 0; i < mapping_.length(); i++) {
+      mapping_[i].map->destroy();
+      mapping_[i].map = nullptr;
+    }
+  }
+  MOZ_MUST_USE bool add(uint8_t* nextInsnAddr, StackMap* map) {
+    MOZ_ASSERT(!sorted_);
+    return mapping_.append(Maplet(nextInsnAddr, map));
+  }
+  MOZ_MUST_USE bool add(const Maplet& maplet) {
+    return add(maplet.nextInsnAddr, maplet.map);
+  }
+  void clear() {
+    for (size_t i = 0; i < mapping_.length(); i++) {
+      mapping_[i].nextInsnAddr = nullptr;
+      mapping_[i].map = nullptr;
+    }
+    mapping_.clear();
+  }
+  bool empty() const { return mapping_.empty(); }
+  size_t length() const { return mapping_.length(); }
+  Maplet get(size_t i) const { return mapping_[i]; }
+  Maplet move(size_t i) {
+    Maplet m = mapping_[i];
+    mapping_[i].map = nullptr;
+    return m;
+  }
+  void offsetBy(uintptr_t delta) {
+    for (size_t i = 0; i < mapping_.length(); i++) mapping_[i].offsetBy(delta);
+  }
+  void sort() {
+    MOZ_ASSERT(!sorted_);
+    std::sort(mapping_.begin(), mapping_.end());
+    sorted_ = true;
+  }
+  const StackMap* findMap(uint8_t* nextInsnAddr) const {
+    struct Comparator {
+      int operator()(Maplet aVal) const {
+        if (uintptr_t(mTarget) < uintptr_t(aVal.nextInsnAddr)) {
+          return -1;
+        }
+        if (uintptr_t(mTarget) > uintptr_t(aVal.nextInsnAddr)) {
+          return 1;
+        }
+        return 0;
+      }
+      explicit Comparator(uint8_t* aTarget) : mTarget(aTarget) {}
+      const uint8_t* mTarget;
+    };
+
+    size_t result;
+    if (BinarySearchIf(mapping_, 0, mapping_.length(), Comparator(nextInsnAddr),
+                       &result)) {
+      return mapping_[result].map;
+    }
+
+    return nullptr;
+  }
+};
+
 // A wasm::SymbolicAddress represents a pointer to a well-known function that is
 // embedded in wasm code. Since wasm code is serialized and later deserialized
 // into a different address space, symbolic addresses must be used for *all*
@@ -2253,6 +2460,7 @@
   // results union into cachedReturnJSValue_ by updateReturnJSValue() before
   // returnValue() can return a Handle to it.
 
+  bool hasCachedReturnJSValue() const { return hasCachedReturnJSValue_; }
   void updateReturnJSValue();
   HandleValue returnValue() const;
   void clearReturnJSValue();
@@ -2291,6 +2499,9 @@
   static constexpr size_t offsetOfResults() {
     return offsetof(DebugFrame, resultI32_);
   }
+  static constexpr size_t offsetOfCachedReturnJSValue() {
+    return offsetof(DebugFrame, cachedReturnJSValue_);
+  }
   static constexpr size_t offsetOfFlagsWord() {
     return offsetof(DebugFrame, flagsWord_);
   }
","diff -r bfa40b415420 -r d551e573d4ce js/src/wasm/WasmBaselineCompile.cpp
--- a/js/src/wasm/WasmBaselineCompile.cpp	Tue Sep 03 18:29:19 2019 +0300
+++ b/js/src/wasm/WasmBaselineCompile.cpp	Tue Sep 03 12:20:36 2019 +0000
@@ -2386,6 +2386,7 @@
 
     // Add the completed map to the running collection thereof.
     if (!stackMaps_->add((uint8_t*)(uintptr_t)assemblerOffset, stackMap)) {
+      stackMap->destroy();
       return false;
     }
 
",1476251,5ca49059949b3c73db196be7280cfd9472631492,"Bug 1476251 - Generate stack maps in the Wasm Baseline compiler.  r=lth.

This is a first implementation of stack map generation and usage for wasm
baseline.  It is intended to be a relatively simple starting point for testing
and refinement.  With the patch in place, it is possible to run Wasm test
cases that involve GC objects and garbage collection.

The general way the patch works is:

* During compilation, all state to do with generating stack maps is held in a
  new struct, StackMapGenerator.  The BaseCompiler updates various fields in
  StackMapGenerator as it goes, and can call StackMapGenerator::createStackMap
  to create a map.

  The StackMapGenerator holds various integer and Maybe-integer fields, but
  most importantly it maintains a MachineStackTracker, which is a vector of
  booleans which track the pointerness of each word in the current frame
  except for pointers corresponding to stack-resident ref-typed entries in the
  compiler's evaluation stack.

  When we want to create a stack map, BaseCompiler calls one of its four
  different ::createStackMap functions.  These are simple wrappers which add
  various default and other parameters and call onwards to
  StackMapGenerator::createStackMap, which does the actual work.

* StackMapGenerator::createStackMap works by augmenting the
  MachineStackTracker with pointers that are implied to exist as a result of
  stack-resident ref-typed entries in the compiler's evaluation stack
  (BaseCompiler::stk_).  The resulting entries are then copied off into a bit
  vector (a wasm::StackMap) for storage.  Extra entries may be added for the
  case where a trap exit stub's not-really-a-frame may be pushed over the
  current frame.  The presence of a ref-typed DebugFrame, if any, in the map,
  is also noted.

* All stack maps created also cover those words above the current frame's
  return address, that are used to pass parameters in memory to this function.
  In other words, the incoming argument area for a function is covered by that
  function's stackmap.  The alignment padding that may be above that area
  *isn't* however included; that belongs (logically) to the caller.

* For places where a function may invoke the wasm trap exit stub (by executing
  an illegal instruction), a composite map is created.  This contains entries
  for the stack entries that would exist in the absence of the stub, but also
  contains extra entries for the save area that the stub will push ""on top"" of
  the normal frame.  To describe the layout of the save area, a new routine,
  wasm::GenerateTrapExitMachineState, generates a description of the area from
  which the stackmap component for the save area is computed.

* Completed stackmaps are temporarily stored in BaseCompiler::stackMaps_.
  They are further processed in WasmGenerator.cpp:
  - ModuleGenerator::linkCompiledCode biases them by the module offset
    and moves them to the metadataTier_.
  - ModuleGenerator::finishMetadata sorts and sanity checks them
  - ModuleGenerator::finish biases them again, so as to give them their
    final code addresses, and checks (in debug builds) that they are
    associated with plausible instructions.

* When it comes to GC time, TraceJitActivations iterates over activations, and
  TraceJitActivation iterates over individual frames.  The latter calculates,
  in each frame, the address of the next instruction to be executed in that
  frame.  It hands this, and, effectively, the stack pointer value, to new
  function Instance::traceFrame.

* Instance::traceFrame does what you'd expect -- looks up the map, using
  Code::lookupStackMap.  Then it scans the frame, doing as many sanity checks
  as it reasonably can on the way.  There are heuristic (but safe) checks to
  ensure that the maps sync with the actual stack values, and also that the
  map sizes are correct.

* There are 3 new test files:
  stackmaps1.js -- tests unwinding w/ maps, for direct/indirect calls only.
  stackmaps2.js -- as stackmaps1.js but in the presence of many interrupts
  stackmaps3.js -- tries hard to generate many cells which are held live
                   only from the stack, whilst dealing with interrupts

* New types:
  MachineStackTracker   -- as described above
  StackMapGenerator     -- as described above
  struct wasm::StackMap -- a single stack map -- basically a bit vector
  class wasm::StackMaps -- a mapping from code addr to wasm::StackMap

* The zero value pushed by GenerateTrapExit has been changed to 1337 and had
  been given a symbolic name.  This isn't entirely frivolous: detecting the
  zero in Instance::traceFrame is a useful sanity check, but zeroes occur
  relatively frequently in the stack.  1337 is much less likely to randomly
  appear.  It's not pointer aligned and denotes ""page zero"" so seems
  relatively safe.

Supporting changes:

* JitFrameIter and WasmFrameIter have a new method, returnAddressToFp(), which
  produces the address of the next instruction to be executed for both JS and
  Wasm frames.

* For all call instructions generated, the relevant MacroAssembler routines
  have been modified so as to return a CodeOffset to guarantees to refer to
  the first byte of the instruction immediately following the call.  This is
  so as to ensure that the stack map refers to the correct instruction even in
  the case where the MacroAssembler routine adds further instruction after the
  actual call instruction.

* Stackmap generation can fail due to lack of memory.  So all call chains that
  can lead to a call to StackMapGenerator::createStackMap now return a
  MOZ_MUST_USE bool and must detect and handle OOMs in the normal way.

* struct BaseCompiler::Stk (evaluation stack elements) has been lifted out to
  the top level and placed above struct StackMapGenerator, since
  StackMapGenerator needs to be able to inspect stack entries.",1567040,"Bug 1567040 - Destroy stackMap if we fail to append it to stackMaps_ due to OOM. r=jseward

Differential Revision: https://phabricator.services.mozilla.com/D42430",2018-12-14T13:00:00+01:00,Generate stack maps in the Wasm Baseline compiler,"In order to support GCable things in Wasm, we'll need to generate some kind
of information that tells the GC which stack slots contain GC pointers, at
the following points:

* interrupt checks

* call insns",LeakSanitizer: [@ js::wasm::StackMap::create],"The following testcase crashes on mozilla-central revision b6d154b23098 (build with --enable-debug --enable-address-sanitizer, run with --fuzzing-safe --no-threads --no-baseline --no-ion --wasm-compiler=baseline and the environment variables ASAN_OPTIONS=detect_leaks=1 LSAN_OPTIONS=max_leaks=1):

    // Adapted from randomly chosen test: js/src/jit-test/tests/wasm/regress/oom-masm-baseline.js
    oomTest(function() {
        return new WebAssembly.Module(wasmTextToBinary(""(module (func i32.const 0))""));
    });

Backtrace:

```
Direct leak of 12 byte(s) in 1 object(s) allocated from:
    #0 0x55ead0c059f3 in __interceptor_malloc (/home/ubuntu/shell-cache/js-dbg-64-asan-linux-x86_64-b6d154b23098/js-dbg-64-asan-linux-x86_64-b6d154b23098+0x262c9f3)
    #1 0x55ead3406155 in js_arena_malloc(unsigned long, unsigned long) /home/ubuntu/shell-cache/js-dbg-64-asan-linux-x86_64-b6d154b23098/objdir-js/dist/include/js/Utility.h:392:10
    #2 0x55ead3406155 in js_malloc(unsigned long) /home/ubuntu/shell-cache/js-dbg-64-asan-linux-x86_64-b6d154b23098/objdir-js/dist/include/js/Utility.h:396
    #3 0x55ead3406155 in js::wasm::StackMap::create(unsigned int) js/src/wasm/WasmGC.h:89
    #4 0x55ead3bd34b3 in js::wasm::StackMapGenerator::createStackMap(char const*, mozilla::Vector<bool, 32ul, js::SystemAllocPolicy> const&, unsigned int, js::wasm::HasRefTypedDebugFrame, mozilla::Vector<js::wasm::Stk, 0ul, js::SystemAllocPolicy> const&) js/src/wasm/WasmBaselineCompile.cpp:2346:26
    #5 0x55ead3babe0c in js::wasm::BaseCompiler::createStackMap(char const*, mozilla::Vector<bool, 32ul, js::SystemAllocPolicy> const&, unsigned int, js::wasm::HasRefTypedDebugFrame) js/src/wasm/WasmBaselineCompile.cpp:3296:31
/snip
```

For detailed crash information, see attachment."
10264d61e5448bce5e43c197301c84f0e3712eaf,2019-07-18T13:10:00+00:00,"diff -r c8100315938b -r 238a8eb35207 devtools/client/application/src/components/Worker.js
--- a/devtools/client/application/src/components/Worker.js	Wed Jul 17 11:42:13 2019 +0000
+++ b/devtools/client/application/src/components/Worker.js	Wed Jul 17 10:35:44 2019 +0000
@@ -58,6 +58,8 @@
         active: PropTypes.bool,
         name: PropTypes.string.isRequired,
         scope: PropTypes.string.isRequired,
+        lastUpdateTime: PropTypes.number.isRequired,
+        url: PropTypes.string.isRequired,
         // registrationFront can be missing in e10s.
         registrationFront: PropTypes.object,
         workerTargetFront: PropTypes.object,
diff -r c8100315938b -r 238a8eb35207 devtools/client/shared/components/List.js
--- a/devtools/client/shared/components/List.js	Wed Jul 17 11:42:13 2019 +0000
+++ b/devtools/client/shared/components/List.js	Wed Jul 17 10:35:44 2019 +0000
@@ -42,6 +42,7 @@
       current: PropTypes.bool,
       onClick: PropTypes.func,
       item: PropTypes.shape({
+        key: PropTypes.string,
         component: PropTypes.object,
         componentProps: PropTypes.object,
         className: PropTypes.string,
diff -r c8100315938b -r 238a8eb35207 devtools/client/shared/components/tree/TreeRow.js
--- a/devtools/client/shared/components/tree/TreeRow.js	Wed Jul 17 11:42:13 2019 +0000
+++ b/devtools/client/shared/components/tree/TreeRow.js	Wed Jul 17 10:35:44 2019 +0000
@@ -59,6 +59,7 @@
           hidden: PropTypes.bool,
           selected: PropTypes.bool,
           active: PropTypes.bool,
+          loading: PropTypes.bool,
         }),
         decorator: PropTypes.object,
         renderCell: PropTypes.object,
diff -r c8100315938b -r 238a8eb35207 devtools/client/shared/components/tree/TreeView.js
--- a/devtools/client/shared/components/tree/TreeView.js	Wed Jul 17 11:42:13 2019 +0000
+++ b/devtools/client/shared/components/tree/TreeView.js	Wed Jul 17 10:35:44 2019 +0000
@@ -98,6 +98,7 @@
           getLabel: PropTypes.func,
           getValue: PropTypes.func,
           getKey: PropTypes.func,
+          getLevel: PropTypes.func,
           getType: PropTypes.func,
         }).isRequired,
         // Tree decorator (see also the interface above)
diff -r c8100315938b -r 238a8eb35207 devtools/client/webconsole/components/Output/Message.js
--- a/devtools/client/webconsole/components/Output/Message.js	Wed Jul 17 11:42:13 2019 +0000
+++ b/devtools/client/webconsole/components/Output/Message.js	Wed Jul 17 10:35:44 2019 +0000
@@ -82,12 +82,16 @@
       timestampsVisible: PropTypes.bool.isRequired,
       serviceContainer: PropTypes.shape({
         emitNewMessage: PropTypes.func.isRequired,
+        onViewSource: PropTypes.func.isRequired,
         onViewSourceInDebugger: PropTypes.func,
         onViewSourceInScratchpad: PropTypes.func,
         onViewSourceInStyleEditor: PropTypes.func,
         openContextMenu: PropTypes.func.isRequired,
         openLink: PropTypes.func.isRequired,
         sourceMapService: PropTypes.any,
+        canRewind: PropTypes.func.isRequired,
+        jumpToExecutionPoint: PropTypes.func.isRequired,
+        onMessageHover: PropTypes.func.isRequired,
       }),
       notes: PropTypes.arrayOf(
         PropTypes.shape({
diff -r c8100315938b -r 238a8eb35207 package-lock.json
--- a/package-lock.json	Wed Jul 17 11:42:13 2019 +0000
+++ b/package-lock.json	Wed Jul 17 10:35:44 2019 +0000
@@ -695,18 +695,20 @@
       }
     },
     ""eslint-plugin-react"": {
-      ""version"": ""7.12.4"",
-      ""resolved"": ""https://registry.npmjs.org/eslint-plugin-react/-/eslint-plugin-react-7.12.4.tgz"",
-      ""integrity"": ""sha512-1puHJkXJY+oS1t467MjbqjvX53uQ05HXwjqDgdbGBqf5j9eeydI54G3KwiJmWciQ0HTBacIKw2jgwSBSH3yfgQ=="",
+      ""version"": ""7.14.2"",
+      ""resolved"": ""https://registry.npmjs.org/eslint-plugin-react/-/eslint-plugin-react-7.14.2.tgz"",
+      ""integrity"": ""sha512-jZdnKe3ip7FQOdjxks9XPN0pjUKZYq48OggNMd16Sk+8VXx6JOvXmlElxROCgp7tiUsTsze3jd78s/9AFJP2mA=="",
       ""dev"": true,
       ""requires"": {
         ""array-includes"": ""^3.0.3"",
         ""doctrine"": ""^2.1.0"",
         ""has"": ""^1.0.3"",
-        ""jsx-ast-utils"": ""^2.0.1"",
+        ""jsx-ast-utils"": ""^2.1.0"",
+        ""object.entries"": ""^1.1.0"",
         ""object.fromentries"": ""^2.0.0"",
-        ""prop-types"": ""^15.6.2"",
-        ""resolve"": ""^1.9.0""
+        ""object.values"": ""^1.1.0"",
+        ""prop-types"": ""^15.7.2"",
+        ""resolve"": ""^1.10.1""
       },
       ""dependencies"": {
         ""doctrine"": {
@@ -1304,6 +1306,18 @@
         ""object-keys"": ""^1.0.11""
       }
     },
+    ""object.entries"": {
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/object.entries/-/object.entries-1.1.0.tgz"",
+      ""integrity"": ""sha512-l+H6EQ8qzGRxbkHOd5I/aHRhHDKoQXQ8g0BYt4uSweQU1/J6dZUOyWh9a2Vky35YCKjzmgxOzta2hH6kf9HuXA=="",
+      ""dev"": true,
+      ""requires"": {
+        ""define-properties"": ""^1.1.3"",
+        ""es-abstract"": ""^1.12.0"",
+        ""function-bind"": ""^1.1.1"",
+        ""has"": ""^1.0.3""
+      }
+    },
     ""object.fromentries"": {
       ""version"": ""2.0.0"",
       ""resolved"": ""https://registry.npmjs.org/object.fromentries/-/object.fromentries-2.0.0.tgz"",
@@ -1316,6 +1330,18 @@
         ""has"": ""^1.0.1""
       }
     },
+    ""object.values"": {
+      ""version"": ""1.1.0"",
+      ""resolved"": ""https://registry.npmjs.org/object.values/-/object.values-1.1.0.tgz"",
+      ""integrity"": ""sha512-8mf0nKLAoFX6VlNVdhGj31SVYpaNFtUnuoOXWyFEstsWRgU837AK+JYM0iAxwkSzGRbwn8cbFmgbyxj1j4VbXg=="",
+      ""dev"": true,
+      ""requires"": {
+        ""define-properties"": ""^1.1.3"",
+        ""es-abstract"": ""^1.12.0"",
+        ""function-bind"": ""^1.1.1"",
+        ""has"": ""^1.0.3""
+      }
+    },
     ""once"": {
       ""version"": ""1.4.0"",
       ""resolved"": ""https://registry.npmjs.org/once/-/once-1.4.0.tgz"",
diff -r c8100315938b -r 238a8eb35207 package.json
--- a/package.json	Wed Jul 17 11:42:13 2019 +0000
+++ b/package.json	Wed Jul 17 10:35:44 2019 +0000
@@ -11,6 +11,7 @@
     ""eslint"": ""5.16.0"",
     ""eslint-config-prettier"": ""4.2.0"",
     ""eslint-plugin-babel"": ""5.3.0"",
+    ""eslint-plugin-fetch-options"": ""0.0.5"",
     ""eslint-plugin-file-header"": ""0.0.1"",
     ""eslint-plugin-flowtype"": ""3.6.0"",
     ""eslint-plugin-html"": ""5.0.3"",
@@ -20,8 +21,7 @@
     ""eslint-plugin-mozilla"": ""file:tools/lint/eslint/eslint-plugin-mozilla"",
     ""eslint-plugin-no-unsanitized"": ""3.0.2"",
     ""eslint-plugin-prettier"": ""3.0.1"",
-    ""eslint-plugin-fetch-options"": ""0.0.5"",
-    ""eslint-plugin-react"": ""7.12.4"",
+    ""eslint-plugin-react"": ""7.14.2"",
     ""eslint-plugin-spidermonkey-js"": ""file:tools/lint/eslint/eslint-plugin-spidermonkey-js"",
     ""prettier"": ""1.17.0""
   },
","diff -r 836ae9b15fe3 -r 10264d61e544 package-lock.json
--- a/package-lock.json	Thu Jul 18 13:15:16 2019 +0000
+++ b/package-lock.json	Thu Jul 18 13:10:40 2019 +0000
@@ -4,23 +4,23 @@
   ""lockfileVersion"": 1,
   ""dependencies"": {
     ""@babel/code-frame"": {
-      ""version"": ""7.0.0"",
-      ""resolved"": ""https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.0.0.tgz"",
-      ""integrity"": ""sha512-OfC2uemaknXr87bdLUkWog7nYuliM9Ij5HUcajsVcMCpQrcLmtxRbVFTIqmcSkSeYRBFBRxs2FiUqFJDLdiebA=="",
+      ""version"": ""7.5.5"",
+      ""resolved"": ""https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.5.5.tgz"",
+      ""integrity"": ""sha512-27d4lZoomVyo51VegxI20xZPuSHusqbQag/ztrBC7wegWoQ1nLREPVSKSW8byhTlzTKyNE4ifaTA6lCp7JjpFw=="",
       ""dev"": true,
       ""requires"": {
         ""@babel/highlight"": ""^7.0.0""
       }
     },
     ""@babel/generator"": {
-      ""version"": ""7.5.0"",
-      ""resolved"": ""https://registry.npmjs.org/@babel/generator/-/generator-7.5.0.tgz"",
-      ""integrity"": ""sha512-1TTVrt7J9rcG5PMjvO7VEG3FrEoEJNHxumRq66GemPmzboLWtIjjcJgk8rokuAS7IiRSpgVSu5Vb9lc99iJkOA=="",
+      ""version"": ""7.5.5"",
+      ""resolved"": ""https://registry.npmjs.org/@babel/generator/-/generator-7.5.5.tgz"",
+      ""integrity"": ""sha512-ETI/4vyTSxTzGnU2c49XHv2zhExkv9JHLTwDAFz85kmcwuShvYG2H08FwgIguQf4JC75CBnXAUM5PqeF4fj0nQ=="",
       ""dev"": true,
       ""requires"": {
-        ""@babel/types"": ""^7.5.0"",
+        ""@babel/types"": ""^7.5.5"",
         ""jsesc"": ""^2.5.1"",
-        ""lodash"": ""^4.17.11"",
+        ""lodash"": ""^4.17.13"",
         ""source-map"": ""^0.5.0"",
         ""trim-right"": ""^1.0.1""
       }
@@ -66,9 +66,9 @@
       }
     },
     ""@babel/parser"": {
-      ""version"": ""7.5.0"",
-      ""resolved"": ""https://registry.npmjs.org/@babel/parser/-/parser-7.5.0.tgz"",
-      ""integrity"": ""sha512-I5nW8AhGpOXGCCNYGc+p7ExQIBxRFnS2fd/d862bNOKvmoEPjYPcfIjsfdy0ujagYOIYPczKgD9l3FsgTkAzKA=="",
+      ""version"": ""7.5.5"",
+      ""resolved"": ""https://registry.npmjs.org/@babel/parser/-/parser-7.5.5.tgz"",
+      ""integrity"": ""sha512-E5BN68cqR7dhKan1SfqgPGhQ178bkVKpXTPEXnFJBrEt8/DKRZlybmy+IgYLTeN7tp1R5Ccmbm2rBk17sHYU3g=="",
       ""dev"": true
     },
     ""@babel/template"": {
@@ -83,30 +83,30 @@
       }
     },
     ""@babel/traverse"": {
-      ""version"": ""7.5.0"",
-      ""resolved"": ""https://registry.npmjs.org/@babel/traverse/-/traverse-7.5.0.tgz"",
-      ""integrity"": ""sha512-SnA9aLbyOCcnnbQEGwdfBggnc142h/rbqqsXcaATj2hZcegCl903pUD/lfpsNBlBSuWow/YDfRyJuWi2EPR5cg=="",
+      ""version"": ""7.5.5"",
+      ""resolved"": ""https://registry.npmjs.org/@babel/traverse/-/traverse-7.5.5.tgz"",
+      ""integrity"": ""sha512-MqB0782whsfffYfSjH4TM+LMjrJnhCNEDMDIjeTpl+ASaUvxcjoiVCo/sM1GhS1pHOXYfWVCYneLjMckuUxDaQ=="",
       ""dev"": true,
       ""requires"": {
-        ""@babel/code-frame"": ""^7.0.0"",
-        ""@babel/generator"": ""^7.5.0"",
+        ""@babel/code-frame"": ""^7.5.5"",
+        ""@babel/generator"": ""^7.5.5"",
         ""@babel/helper-function-name"": ""^7.1.0"",
         ""@babel/helper-split-export-declaration"": ""^7.4.4"",
-        ""@babel/parser"": ""^7.5.0"",
-        ""@babel/types"": ""^7.5.0"",
+        ""@babel/parser"": ""^7.5.5"",
+        ""@babel/types"": ""^7.5.5"",
         ""debug"": ""^4.1.0"",
         ""globals"": ""^11.1.0"",
-        ""lodash"": ""^4.17.11""
+        ""lodash"": ""^4.17.13""
       }
     },
     ""@babel/types"": {
-      ""version"": ""7.5.0"",
-      ""resolved"": ""https://registry.npmjs.org/@babel/types/-/types-7.5.0.tgz"",
-      ""integrity"": ""sha512-UFpDVqRABKsW01bvw7/wSUe56uy6RXM5+VJibVVAybDGxEW25jdwiFJEf7ASvSaC7sN7rbE/l3cLp2izav+CtQ=="",
+      ""version"": ""7.5.5"",
+      ""resolved"": ""https://registry.npmjs.org/@babel/types/-/types-7.5.5.tgz"",
+      ""integrity"": ""sha512-s63F9nJioLqOlW3UkyMd+BYhXt44YuaFm/VV0VwuteqjYwRrObkU7ra9pY4wAJR3oXi8hJrMcrcJdO/HH33vtw=="",
       ""dev"": true,
       ""requires"": {
         ""esutils"": ""^2.0.2"",
-        ""lodash"": ""^4.17.11"",
+        ""lodash"": ""^4.17.13"",
         ""to-fast-properties"": ""^2.0.0""
       }
     },
@@ -1766,13 +1766,13 @@
       }
     },
     ""table"": {
-      ""version"": ""5.4.1"",
-      ""resolved"": ""https://registry.npmjs.org/table/-/table-5.4.1.tgz"",
-      ""integrity"": ""sha512-E6CK1/pZe2N75rGZQotFOdmzWQ1AILtgYbMAbAjvms0S1l5IDB47zG3nCnFGB/w+7nB3vKofbLXCH7HPBo864w=="",
+      ""version"": ""5.4.4"",
+      ""resolved"": ""https://registry.npmjs.org/table/-/table-5.4.4.tgz"",
+      ""integrity"": ""sha512-IIfEAUx5QlODLblLrGTTLJA7Tk0iLSGBvgY8essPRVNGHAzThujww1YqHLs6h3HfTg55h++RzLHH5Xw/rfv+mg=="",
       ""dev"": true,
       ""requires"": {
-        ""ajv"": ""^6.9.1"",
-        ""lodash"": ""^4.17.11"",
+        ""ajv"": ""^6.10.2"",
+        ""lodash"": ""^4.17.14"",
         ""slice-ansi"": ""^2.1.0"",
         ""string-width"": ""^3.0.0""
       },
diff -r 836ae9b15fe3 -r 10264d61e544 tools/lint/eslint/manifest.tt
--- a/tools/lint/eslint/manifest.tt	Thu Jul 18 13:15:16 2019 +0000
+++ b/tools/lint/eslint/manifest.tt	Thu Jul 18 13:10:40 2019 +0000
@@ -4,7 +4,7 @@
     ""visibility"": ""public"",
     ""filename"": ""eslint.tar.gz"",
     ""unpack"": true,
-    ""digest"": ""b0de496a5a570c48e97512204cb12ba676da36f31065320cce542a1a720a1cb1f7d96d72c326f77d4e8bffff8c4e0c8d14e22d4071a33d3989e75b0f9e0ce9b6"",
-    ""size"": 8634504
+    ""digest"": ""6eec652b1d94c69a0de1328eccff823319df1bf3318cab09a9ef8679c4b342237e207c186901272d07661a25bd2964908bea53087d9616d24a8203b1a90ed63e"",
+    ""size"": 8656984
   }
 ]
\ No newline at end of file
",1564138,238a8eb35207e07a52db336b8440776f987fca8f,"Bug 1564138 - Fix DevTools PropTypes errors when updating eslint. r=Ola.

Differential Revision: https://phabricator.services.mozilla.com/D38093",1567134,"Bug 1567134 - Update the node modules packages for the builders. r=ahal

Differential Revision: https://phabricator.services.mozilla.com/D38473",2019-07-17T10:35:00+00:00,Prop-types failures in devtools when upgrading to the latest eslint-plugin-react,"I'm currently working on upgrading to ESLint 6. As part of that, I am upgrading eslint-plugin-react to the latest (7.14.2) and I'm seeing the new errors.

It seems that probably the 7.14.0 release has added some new things for prop type validation.

```
devtools/client/application/src/components/Worker.js
  199:32  error  'worker.lastUpdateTime' is missing in props validation  react/prop-types (eslint)
  206:27  error  'worker.lastUpdateTime' is missing in props validation  react/prop-types (eslint)
  236:38  error  'worker.url' is missing in props validation             react/prop-types (eslint)

devtools/client/shared/components/List.js
  150:18  error  'item.key' is missing in props validation  react/prop-types (eslint)

devtools/client/shared/components/tree/TreeRow.js
  260:18  error  'member.loading' is missing in props validation  react/prop-types (eslint)

devtools/client/shared/components/tree/TreeView.js
  561:27  error  'provider.getLevel' is missing in props validation  react/prop-types (eslint)
  561:47  error  'provider.getLevel' is missing in props validation  react/prop-types (eslint)

devtools/client/webconsole/components/Output/Message.js
  176:26  error  'serviceContainer.canRewind' is missing in props validation             react/prop-types (eslint)
  177:24  error  'serviceContainer.onMessageHover' is missing in props validation        react/prop-types (eslint)
  198:26  error  'serviceContainer.canRewind' is missing in props validation             react/prop-types (eslint)
  200:32  error  'serviceContainer.jumpToExecutionPoint' is missing in props validation  react/prop-types (eslint)
  323:30  error  'serviceContainer.onViewSource' is missing in props validation          react/prop-types (eslint)
  326:30  error  'serviceContainer.onViewSource' is missing in props validation          react/prop-types (eslint)
  327:42  error  'serviceContainer.onViewSource' is missing in props validation          react/prop-types (eslint)
  360:40  error  'serviceContainer.onViewSource' is missing in props validation          react/prop-types (eslint)
  385:28  error  'serviceContainer.onViewSource' is missing in props validation          react/prop-types (eslint)
  389:28  error  'serviceContainer.onViewSource' is missing in props validation          react/prop-types (eslint)
  395:28  error  'serviceContainer.onViewSource' is missing in props validation          react/prop-types (eslint)
  431:24  error  'serviceContainer.canRewind' is missing in props validation             react/prop-types (eslint)
```",ESLint builders are downloading modules from npm,"I just noticed that bug 1564138 changed the top-level package.json, and that's caused the ESLint builders to download directly from npm.

We should fix the fundamental issue, for which I've filed bug 1567132. I probably won't have time for that for a couple of weeks.

In the meantime, I'll post the quick patch to update the builders properly and get us in a good state again."
d08515469bc72769a8d6888878146d81fee1815d,2019-07-22T07:57:00+00:00,"diff -r bc634ddca05b -r a931afa2c4bd browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js	Thu Jul 11 04:03:44 2019 +0000
+++ b/browser/app/profile/firefox.js	Thu Jul 11 10:29:17 2019 +0000
@@ -1186,7 +1186,6 @@
 // uncompromised Sync-connected devices.
 pref(""services.sync.prefs.sync.browser.contentblocking.category"", true);
 pref(""services.sync.prefs.sync.browser.contentblocking.features.strict"", true);
-pref(""services.sync.prefs.sync.browser.contentblocking.introCount"", true);
 pref(""services.sync.prefs.sync.browser.crashReports.unsubmittedCheck.autoSubmit2"", true);
 pref(""services.sync.prefs.sync.browser.ctrlTab.recentlyUsedOrder"", true);
 pref(""services.sync.prefs.sync.browser.discovery.enabled"", true);
@@ -1614,19 +1613,11 @@
 
 pref(""browser.contentblocking.reportBreakage.url"", ""https://tracking-protection-issues.herokuapp.com/new"");
 
-pref(""browser.contentblocking.introCount"", 0);
-
-pref(""browser.contentblocking.maxIntroCount"", 5);
-// 1800 = 30 min in seconds
-pref(""browser.contentblocking.introDelaySeconds"", 1800);
-
 // Enables the new Protections Panel.
 #ifdef NIGHTLY_BUILD
 pref(""browser.protections_panel.enabled"", true);
 #endif
 
-pref(""privacy.trackingprotection.introURL"", ""https://www.mozilla.org/%LOCALE%/firefox/%VERSION%/content-blocking/start/"");
-
 // Always enable newtab segregation using containers
 pref(""privacy.usercontext.about_newtab_segregation.enabled"", true);
 // Enable Contextual Identity Containers
diff -r bc634ddca05b -r a931afa2c4bd browser/base/content/browser-contentblocking.js
--- a/browser/base/content/browser-contentblocking.js	Thu Jul 11 04:03:44 2019 +0000
+++ b/browser/base/content/browser-contentblocking.js	Thu Jul 11 10:29:17 2019 +0000
@@ -907,25 +907,16 @@
 };
 
 var ContentBlocking = {
-  // If the user ignores the doorhanger, we stop showing it after some time.
-  MAX_INTROS: Services.prefs.getIntPref(
-    ""browser.contentblocking.maxIntroCount""
-  ),
   PREF_ANIMATIONS_ENABLED: ""toolkit.cosmeticAnimations.enabled"",
   PREF_REPORT_BREAKAGE_ENABLED:
     ""browser.contentblocking.reportBreakage.enabled"",
   PREF_REPORT_BREAKAGE_URL: ""browser.contentblocking.reportBreakage.url"",
-  PREF_INTRO_COUNT_CB: ""browser.contentblocking.introCount"",
   PREF_CB_CATEGORY: ""browser.contentblocking.category"",
   PREF_SHOW_ALLOWED_LABELS:
     ""browser.contentblocking.control-center.ui.showAllowedLabels"",
   PREF_SHOW_BLOCKED_LABELS:
     ""browser.contentblocking.control-center.ui.showBlockedLabels"",
 
-  get prefIntroCount() {
-    return this.PREF_INTRO_COUNT_CB;
-  },
-
   get content() {
     delete this.content;
     return (this.content = document.getElementById(
@@ -1425,30 +1416,6 @@
       // of the shield based on this onSecurityChange be determined afterwards).
     } else if (anyBlocking && !this.iconBox.hasAttribute(""active"")) {
       this.iconBox.setAttribute(""animate"", ""true"");
-
-      let isBrowserPrivate = PrivateBrowsingUtils.isBrowserPrivate(
-        gBrowser.selectedBrowser
-      );
-      if (!isBrowserPrivate) {
-        let introCount = Services.prefs.getIntPref(this.prefIntroCount);
-        let installStamp = Services.prefs.getIntPref(
-          ""browser.laterrun.bookkeeping.profileCreationTime"",
-          Date.now() / 1000
-        );
-        let delayLength = Services.prefs.getIntPref(
-          ""browser.contentblocking.introDelaySeconds""
-        );
-        let delayFulfilled = delayLength < Date.now() / 1000 - installStamp;
-        if (
-          introCount < this.MAX_INTROS &&
-          !this.anyOtherWindowHasTour() &&
-          delayFulfilled
-        ) {
-          Services.prefs.setIntPref(this.prefIntroCount, ++introCount);
-          Services.prefs.savePrefFile(null);
-          this.showIntroPanel();
-        }
-      }
     }
 
     // We consider the shield state ""active"" when some kind of blocking activity
@@ -1509,16 +1476,6 @@
     }
   },
 
-  // Check if any existing window has a UItour initiated, both showing and hidden.
-  anyOtherWindowHasTour() {
-    for (let win of BrowserWindowTracker.orderedWindows) {
-      if (win != window && UITour.tourBrowsersByWindow.has(win)) {
-        return true;
-      }
-    }
-    return false;
-  },
-
   disableForCurrentPage() {
     ContentBlockingAllowList.add(gBrowser.selectedBrowser);
 
@@ -1530,83 +1487,4 @@
 
     this.hideIdentityPopupAndReload();
   },
-
-  dontShowIntroPanelAgain() {
-    if (!PrivateBrowsingUtils.isBrowserPrivate(gBrowser.selectedBrowser)) {
-      Services.prefs.setIntPref(this.prefIntroCount, this.MAX_INTROS);
-      Services.prefs.savePrefFile(null);
-    }
-  },
-
-  async showIntroPanel() {
-    let brandBundle = document.getElementById(""bundle_brand"");
-    let brandShortName = brandBundle.getString(""brandShortName"");
-
-    let introTitle = gNavigatorBundle.getFormattedString(
-      ""contentBlocking.intro.title"",
-      [brandShortName]
-    );
-    let introDescription;
-    // This will be sent to the onboarding website to let them know which
-    // UI variation we're showing.
-    let variation;
-    // We show a different UI tour variation for users that already have TP
-    // enabled globally.
-    if (TrackingProtection.enabledGlobally) {
-      introDescription = gNavigatorBundle.getString(
-        ""contentBlocking.intro.v2.description""
-      );
-      variation = 2;
-    } else {
-      introDescription = gNavigatorBundle.getFormattedString(
-        ""contentBlocking.intro.v1.description"",
-        [brandShortName]
-      );
-      variation = 1;
-    }
-
-    let openStep2 = () => {
-      // When the user proceeds in the tour, adjust the counter to indicate that
-      // the user doesn't need to see the intro anymore.
-      this.dontShowIntroPanelAgain();
-
-      let nextURL =
-        Services.urlFormatter.formatURLPref(
-          ""privacy.trackingprotection.introURL""
-        ) + `?step=2&newtab=true&variation=${variation}`;
-      switchToTabHavingURI(nextURL, true, {
-        // Ignore the fragment in case the intro is shown on the tour page
-        // (e.g. if the user manually visited the tour or clicked the link from
-        // about:privatebrowsing) so we can avoid a reload.
-        ignoreFragment: ""whenComparingAndReplace"",
-        triggeringPrincipal: Services.scriptSecurityManager.getSystemPrincipal(),
-      });
-    };
-
-    let buttons = [
-      {
-        label: gNavigatorBundle.getString(""trackingProtection.intro.step1of3""),
-        style: ""text"",
-      },
-      {
-        callback: openStep2,
-        label: gNavigatorBundle.getString(
-          ""trackingProtection.intro.nextButton.label""
-        ),
-        style: ""primary"",
-      },
-    ];
-
-    let panelTarget = await UITour.getTarget(window, ""trackingProtection"");
-    UITour.initForBrowser(gBrowser.selectedBrowser, window);
-    UITour.showInfo(
-      window,
-      panelTarget,
-      introTitle,
-      introDescription,
-      undefined,
-      buttons,
-      { closeButtonCallback: () => this.dontShowIntroPanelAgain() }
-    );
-  },
 };
diff -r bc634ddca05b -r a931afa2c4bd browser/base/content/test/trackingUI/browser_trackingUI_animation_2.js
--- a/browser/base/content/test/trackingUI/browser_trackingUI_animation_2.js	Thu Jul 11 04:03:44 2019 +0000
+++ b/browser/base/content/test/trackingUI/browser_trackingUI_animation_2.js	Thu Jul 11 10:29:17 2019 +0000
@@ -24,7 +24,6 @@
   Services.prefs.clearUserPref(TP_PB_PREF);
   Services.prefs.clearUserPref(NCB_PREF);
   Services.prefs.clearUserPref(DTSCBN_PREF);
-  Services.prefs.clearUserPref(ContentBlocking.prefIntroCount);
 });
 
 async function testTrackingProtectionAnimation(tabbrowser) {
@@ -195,10 +194,6 @@
     ThirdPartyCookies.enabled,
     ""ThirdPartyCookies is enabled after setting the pref""
   );
-  Services.prefs.setIntPref(
-    ContentBlocking.prefIntroCount,
-    ContentBlocking.MAX_INTROS
-  );
 
   await testTrackingProtectionAnimation(gBrowser);
 });
@@ -226,10 +221,6 @@
     ThirdPartyCookies.enabled,
     ""ThirdPartyCookies is enabled after setting the pref""
   );
-  Services.prefs.setIntPref(
-    ContentBlocking.prefIntroCount,
-    ContentBlocking.MAX_INTROS
-  );
 
   await testTrackingProtectionAnimation(tabbrowser);
 
diff -r bc634ddca05b -r a931afa2c4bd browser/base/content/test/trackingUI/browser_trackingUI_background_tabs.js
--- a/browser/base/content/test/trackingUI/browser_trackingUI_background_tabs.js	Thu Jul 11 04:03:44 2019 +0000
+++ b/browser/base/content/test/trackingUI/browser_trackingUI_background_tabs.js	Thu Jul 11 10:29:17 2019 +0000
@@ -16,10 +16,7 @@
   );
 
   await SpecialPowers.pushPrefEnv({
-    set: [
-      [ContentBlocking.prefIntroCount, ContentBlocking.MAX_INTROS],
-      [TP_PREF, true],
-    ],
+    set: [[TP_PREF, true]],
   });
   await UrlClassifierTestUtils.addTestTrackers();
 
diff -r bc634ddca05b -r a931afa2c4bd browser/base/content/test/trackingUI/browser_trackingUI_cookies_subview.js
--- a/browser/base/content/test/trackingUI/browser_trackingUI_cookies_subview.js	Thu Jul 11 04:03:44 2019 +0000
+++ b/browser/base/content/test/trackingUI/browser_trackingUI_cookies_subview.js	Thu Jul 11 10:29:17 2019 +0000
@@ -16,10 +16,6 @@
   let oldCanRecord = Services.telemetry.canRecordExtended;
   Services.telemetry.canRecordExtended = true;
 
-  // Avoid the content blocking tour interfering with our tests by popping up.
-  await SpecialPowers.pushPrefEnv({
-    set: [[ContentBlocking.prefIntroCount, ContentBlocking.MAX_INTROS]],
-  });
   await UrlClassifierTestUtils.addTestTrackers();
 
   registerCleanupFunction(() => {
diff -r bc634ddca05b -r a931afa2c4bd browser/base/content/test/trackingUI/browser_trackingUI_cryptominers.js
--- a/browser/base/content/test/trackingUI/browser_trackingUI_cryptominers.js	Thu Jul 11 04:03:44 2019 +0000
+++ b/browser/base/content/test/trackingUI/browser_trackingUI_cryptominers.js	Thu Jul 11 10:29:17 2019 +0000
@@ -14,7 +14,6 @@
 add_task(async function setup() {
   await SpecialPowers.pushPrefEnv({
     set: [
-      [ContentBlocking.prefIntroCount, ContentBlocking.MAX_INTROS],
       [
         ""urlclassifier.features.cryptomining.blacklistHosts"",
         ""cryptomining.example.com"",
diff -r bc634ddca05b -r a931afa2c4bd browser/base/content/test/trackingUI/browser_trackingUI_fingerprinters.js
--- a/browser/base/content/test/trackingUI/browser_trackingUI_fingerprinters.js	Thu Jul 11 04:03:44 2019 +0000
+++ b/browser/base/content/test/trackingUI/browser_trackingUI_fingerprinters.js	Thu Jul 11 10:29:17 2019 +0000
@@ -14,7 +14,6 @@
 add_task(async function setup() {
   await SpecialPowers.pushPrefEnv({
     set: [
-      [ContentBlocking.prefIntroCount, ContentBlocking.MAX_INTROS],
       [
         ""urlclassifier.features.fingerprinting.blacklistHosts"",
         ""fingerprinting.example.com"",
diff -r bc634ddca05b -r a931afa2c4bd browser/base/content/test/trackingUI/browser_trackingUI_report_breakage.js
--- a/browser/base/content/test/trackingUI/browser_trackingUI_report_breakage.js	Thu Jul 11 04:03:44 2019 +0000
+++ b/browser/base/content/test/trackingUI/browser_trackingUI_report_breakage.js	Thu Jul 11 10:29:17 2019 +0000
@@ -47,7 +47,6 @@
 
   await SpecialPowers.pushPrefEnv({
     set: [
-      [ContentBlocking.prefIntroCount, ContentBlocking.MAX_INTROS],
       [""privacy.trackingprotection.fingerprinting.annotate.enabled"", true],
       [
         ""urlclassifier.features.fingerprinting.blacklistHosts"",
diff -r bc634ddca05b -r a931afa2c4bd browser/base/content/test/trackingUI/browser_trackingUI_trackers_subview.js
--- a/browser/base/content/test/trackingUI/browser_trackingUI_trackers_subview.js	Thu Jul 11 04:03:44 2019 +0000
+++ b/browser/base/content/test/trackingUI/browser_trackingUI_trackers_subview.js	Thu Jul 11 10:29:17 2019 +0000
@@ -13,10 +13,6 @@
   let oldCanRecord = Services.telemetry.canRecordExtended;
   Services.telemetry.canRecordExtended = true;
 
-  // Avoid the content blocking tour interfering with our tests by popping up.
-  await SpecialPowers.pushPrefEnv({
-    set: [[ContentBlocking.prefIntroCount, ContentBlocking.MAX_INTROS]],
-  });
   await UrlClassifierTestUtils.addTestTrackers();
 
   registerCleanupFunction(() => {
diff -r bc634ddca05b -r a931afa2c4bd browser/components/preferences/in-content/privacy.inc.xul
--- a/browser/components/preferences/in-content/privacy.inc.xul	Thu Jul 11 04:03:44 2019 +0000
+++ b/browser/components/preferences/in-content/privacy.inc.xul	Thu Jul 11 10:29:17 2019 +0000
@@ -208,7 +208,6 @@
                     </hbox>
                     <description class=""indent"">
                       <html:span class=""tail-with-learn-more"" data-l10n-id=""content-blocking-warning-description""></html:span>
-                      <label class=""content-blocking-warning-learn-how"" data-l10n-id=""content-blocking-learn-how"" is=""text-link""/>
                     </description>
                   </vbox>
                 </vbox>
@@ -323,7 +322,6 @@
                   </hbox>
                   <description class=""indent"">
                     <html:span class=""tail-with-learn-more"" data-l10n-id=""content-blocking-warning-description""></html:span>
-                    <label class=""content-blocking-warning-learn-how"" data-l10n-id=""content-blocking-learn-how"" is=""text-link""/>
                   </description>
                 </vbox>
               </vbox>
diff -r bc634ddca05b -r a931afa2c4bd browser/components/preferences/in-content/privacy.js
--- a/browser/components/preferences/in-content/privacy.js	Thu Jul 11 04:03:44 2019 +0000
+++ b/browser/components/preferences/in-content/privacy.js	Thu Jul 11 10:29:17 2019 +0000
@@ -709,17 +709,6 @@
       Services.urlFormatter.formatURLPref(""app.support.baseURL"") +
       ""content-blocking"";
     link.setAttribute(""href"", contentBlockingUrl);
-
-    let contentBlockingTour =
-      Services.urlFormatter.formatURLPref(
-        ""privacy.trackingprotection.introURL""
-      ) + `?step=3&newtab=true`;
-    let warningLinks = document.getElementsByClassName(
-      ""content-blocking-warning-learn-how""
-    );
-    for (let warningLink of warningLinks) {
-      warningLink.setAttribute(""href"", contentBlockingTour);
-    }
   },
 
   populateCategoryContents() {
diff -r bc634ddca05b -r a931afa2c4bd browser/components/uitour/UITour-lib.js
--- a/browser/components/uitour/UITour-lib.js	Thu Jul 11 04:03:44 2019 +0000
+++ b/browser/components/uitour/UITour-lib.js	Thu Jul 11 10:29:17 2019 +0000
@@ -101,8 +101,6 @@
    * <li>appMenu
    * <li>backForward
    * <li>bookmarks
-   * <li>controlCenter-trackingUnblock
-   * <li>controlCenter-trackingBlock
    * <li>customize
    * <li>devtools
    * <li>forget
@@ -123,7 +121,6 @@
    * <li>searchIcon
    * <li>searchPrefsLink
    * <li>selectedTabIcon
-   * <li>trackingProtection
    * <li>urlbar
    * <li>webide
    * </ul>
@@ -319,7 +316,6 @@
    * Valid values:<ul>
    * <li>appMenu
    * <li>bookmarks
-   * <li>controlCenter
    * <li>pocket
    * </ul>
    *
diff -r bc634ddca05b -r a931afa2c4bd browser/components/uitour/UITour.jsm
--- a/browser/components/uitour/UITour.jsm	Thu Jul 11 04:03:44 2019 +0000
+++ b/browser/components/uitour/UITour.jsm	Thu Jul 11 10:29:17 2019 +0000
@@ -36,11 +36,6 @@
 );
 ChromeUtils.defineModuleGetter(
   this,
-  ""PrivateBrowsingUtils"",
-  ""resource://gre/modules/PrivateBrowsingUtils.jsm""
-);
-ChromeUtils.defineModuleGetter(
-  this,
   ""ProfileAge"",
   ""resource://gre/modules/ProfileAge.jsm""
 );
@@ -147,8 +142,6 @@
     ],
     [""backForward"", { query: ""#back-button"" }],
     [""bookmarks"", { query: ""#bookmarks-menu-button"" }],
-    [""controlCenter-trackingUnblock"", controlCenterTrackingToggleTarget(true)],
-    [""controlCenter-trackingBlock"", controlCenterTrackingToggleTarget(false)],
     [
       ""customize"",
       {
@@ -247,24 +240,6 @@
       },
     ],
     [
-      ""trackingProtection"",
-      {
-        query: aDocument => {
-          if (
-            Services.prefs.getBoolPref(
-              ""toolkit.cosmeticAnimations.enabled"",
-              false
-            )
-          ) {
-            return aDocument.getElementById(
-              ""tracking-protection-icon-animatable-box""
-            );
-          }
-          return aDocument.getElementById(""tracking-protection-icon"");
-        },
-      },
-    ],
-    [
       ""urlbar"",
       {
         query: ""#urlbar"",
@@ -928,14 +903,6 @@
           [""ViewShowing"", this.onPageActionPanelSubviewShowing],
         ],
       },
-      {
-        name: ""controlCenter"",
-        node: aWindow.gIdentityHandler._identityPopup,
-        events: [
-          [""popuphidden"", this.onPanelHidden],
-          [""popuphiding"", this.onControlCenterHiding],
-        ],
-      },
     ];
     for (let panel of panels) {
       // Ensure the menu panel is hidden and clean up panel listeners after calling hideMenu.
@@ -1536,31 +1503,6 @@
     } else if (aMenuName == ""bookmarks"") {
       let menuBtn = aWindow.document.getElementById(""bookmarks-menu-button"");
       openMenuButton(menuBtn);
-    } else if (aMenuName == ""controlCenter"") {
-      let popup = aWindow.gIdentityHandler._identityPopup;
-
-      // Add the listener even if the panel is already open since it will still
-      // only get registered once even if it was UITour that opened it.
-      popup.addEventListener(""popuphiding"", this.onControlCenterHiding);
-      popup.addEventListener(""popuphidden"", this.onPanelHidden);
-
-      popup.setAttribute(""noautohide"", ""true"");
-      this.clearAvailableTargetsCache();
-
-      if (popup.state == ""open"") {
-        if (aOpenCallback) {
-          aOpenCallback();
-        }
-        return;
-      }
-
-      this.recreatePopup(popup);
-
-      // Open the control center
-      if (aOpenCallback) {
-        popup.addEventListener(""popupshown"", aOpenCallback, { once: true });
-      }
-      aWindow.document.getElementById(""identity-box"").click();
     } else if (aMenuName == ""pocket"") {
       let pageAction = PageActions.actionForID(""pocket"");
       if (!pageAction) {
@@ -1615,9 +1557,6 @@
     } else if (aMenuName == ""bookmarks"") {
       let menuBtn = aWindow.document.getElementById(""bookmarks-menu-button"");
       closeMenuButton(menuBtn);
-    } else if (aMenuName == ""controlCenter"") {
-      let panel = aWindow.gIdentityHandler._identityPopup;
-      panel.hidePopup();
     } else if (aMenuName == ""urlbar"") {
       aWindow.gURLBar.view.close();
     } else if (aMenuName == ""pageActionPanel"") {
@@ -1703,12 +1642,6 @@
     );
   },
 
-  onControlCenterHiding(aEvent) {
-    UITour._hideAnnotationsForPanel(aEvent, true, aTarget => {
-      return aTarget.targetName.startsWith(""controlCenter-"");
-    });
-  },
-
   onPanelHidden(aEvent) {
     aEvent.target.removeAttribute(""noautohide"");
     UITour.recreatePopup(aEvent.target);
@@ -2022,30 +1955,6 @@
   },
 };
 
-function controlCenterTrackingToggleTarget(aUnblock) {
-  return {
-    infoPanelPosition: ""rightcenter topleft"",
-    query(aDocument) {
-      let popup = aDocument.defaultView.gIdentityHandler._identityPopup;
-      if (popup.state != ""open"") {
-        return null;
-      }
-      let buttonId = null;
-      if (aUnblock) {
-        if (PrivateBrowsingUtils.isWindowPrivate(aDocument.defaultView)) {
-          buttonId = ""tracking-action-unblock-private"";
-        } else {
-          buttonId = ""tracking-action-unblock"";
-        }
-      } else {
-        buttonId = ""tracking-action-block"";
-      }
-      let element = aDocument.getElementById(buttonId);
-      return UITour.isElementVisible(element) ? element : null;
-    },
-  };
-}
-
 this.UITour.init();
 
 /**
diff -r bc634ddca05b -r a931afa2c4bd browser/components/uitour/test/browser.ini
--- a/browser/components/uitour/test/browser.ini	Thu Jul 11 04:03:44 2019 +0000
+++ b/browser/components/uitour/test/browser.ini	Thu Jul 11 10:29:17 2019 +0000
@@ -8,23 +8,13 @@
 [browser_backgroundTab.js]
 [browser_closeTab.js]
 skip-if = (verify && !debug && (os == 'linux'))
-[browser_contentBlocking.js]
 [browser_fxa.js]
 skip-if = debug || asan # updateUI leaks
 [browser_no_tabs.js]
 [browser_openPreferences.js]
 [browser_openSearchPanel.js]
 skip-if = true # Bug 1113038 - Intermittent ""Popup was opened""
-[browser_trackingProtection.js]
-skip-if = os == ""linux"" # Intermittent NS_ERROR_NOT_AVAILABLE [nsIUrlClassifierDBService.beginUpdate]
-tag = trackingprotection
-support-files =
-  !/browser/base/content/test/trackingUI/benignPage.html
-  !/browser/base/content/test/trackingUI/trackingPage.html
-[browser_trackingProtection_tour.js]
-tag = trackingprotection
 [browser_showMenu.js]
-tag = trackingprotection
 [browser_UITour.js]
 skip-if = os == ""linux"" || verify # Intermittent failures, bug 951965
 [browser_UITour2.js]
diff -r bc634ddca05b -r a931afa2c4bd browser/components/uitour/test/browser_UITour_availableTargets.js
--- a/browser/components/uitour/test/browser_UITour_availableTargets.js	Thu Jul 11 04:03:44 2019 +0000
+++ b/browser/components/uitour/test/browser_UITour_availableTargets.js	Thu Jul 11 10:29:17 2019 +0000
@@ -30,7 +30,6 @@
     ...(hasQuit ? [""quit""] : []),
     ""readerMode-urlBar"",
     ""screenshots"",
-    ""trackingProtection"",
     ""urlbar"",
   ];
 }
diff -r bc634ddca05b -r a931afa2c4bd browser/components/uitour/test/browser_contentBlocking.js
--- a/browser/components/uitour/test/browser_contentBlocking.js	Thu Jul 11 04:03:44 2019 +0000
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,119 +0,0 @@
-""use strict"";
-
-const PREF_INTRO_DELAY = ""browser.contentblocking.introDelaySeconds"";
-const PREF_INTRO_COUNT = ""browser.contentblocking.introCount"";
-const PREF_TP_ENABLED = ""privacy.trackingprotection.enabled"";
-const BENIGN_PAGE =
-  ""http://tracking.example.org/browser/browser/base/content/test/trackingUI/benignPage.html"";
-const TRACKING_PAGE =
-  ""http://tracking.example.org/browser/browser/base/content/test/trackingUI/trackingPage.html"";
-const TOOLTIP_PANEL = document.getElementById(""UITourTooltip"");
-const TOOLTIP_ANCHOR = document.getElementById(
-  ""tracking-protection-icon-animatable-box""
-);
-
-var { UrlClassifierTestUtils } = ChromeUtils.import(
-  ""resource://testing-common/UrlClassifierTestUtils.jsm""
-);
-
-registerCleanupFunction(function() {
-  UrlClassifierTestUtils.cleanupTestTrackers();
-  Services.prefs.clearUserPref(PREF_TP_ENABLED);
-  Services.prefs.clearUserPref(PREF_INTRO_COUNT);
-  Services.prefs.clearUserPref(PREF_INTRO_DELAY);
-});
-
-function allowOneIntro() {
-  Services.prefs.setIntPref(
-    PREF_INTRO_COUNT,
-    window.ContentBlocking.MAX_INTROS - 1
-  );
-}
-
-add_task(async function setup_test() {
-  Services.prefs.setBoolPref(PREF_TP_ENABLED, true);
-  Services.prefs.setIntPref(PREF_INTRO_DELAY, 0);
-  await UrlClassifierTestUtils.addTestTrackers();
-});
-
-add_task(async function test_benignPage() {
-  info(""Load a test page not containing tracking elements"");
-  allowOneIntro();
-  await BrowserTestUtils.withNewTab(BENIGN_PAGE, async function() {
-    await Assert.rejects(
-      waitForConditionPromise(() => {
-        return BrowserTestUtils.is_visible(TOOLTIP_PANEL);
-      }, ""timeout""),
-      /timeout/,
-      ""Info panel shouldn't appear on a benign page""
-    );
-  });
-});
-
-add_task(async function test_tracking() {
-  info(""Load a test page containing tracking elements"");
-  allowOneIntro();
-  await BrowserTestUtils.withNewTab(
-    { gBrowser, url: TRACKING_PAGE },
-    async function() {
-      await new Promise((resolve, reject) => {
-        waitForPopupAtAnchor(
-          TOOLTIP_PANEL,
-          TOOLTIP_ANCHOR,
-          resolve,
-          ""Intro panel should appear""
-        );
-      });
-
-      is(
-        Services.prefs.getIntPref(PREF_INTRO_COUNT),
-        window.ContentBlocking.MAX_INTROS,
-        ""Check intro count increased""
-      );
-
-      let step2URL =
-        Services.urlFormatter.formatURLPref(
-          ""privacy.trackingprotection.introURL""
-        ) + ""?step=2&newtab=true&variation=2"";
-      let buttons = document.getElementById(""UITourTooltipButtons"");
-
-      info(""Click the step text and nothing should happen"");
-      let tabCount = gBrowser.tabs.length;
-      await EventUtils.synthesizeMouseAtCenter(buttons.children[0], {});
-      is(gBrowser.tabs.length, tabCount, ""Same number of tabs should be open"");
-
-      info(
-        ""Resetting count to test that viewing the tour prevents future panels""
-      );
-      allowOneIntro();
-
-      let panelHiddenPromise = promisePanelElementHidden(window, TOOLTIP_PANEL);
-      let tabPromise = BrowserTestUtils.waitForNewTab(gBrowser, step2URL);
-      info(""Clicking the main button"");
-      EventUtils.synthesizeMouseAtCenter(buttons.children[1], {});
-      let tab = await tabPromise;
-      is(
-        Services.prefs.getIntPref(PREF_INTRO_COUNT),
-        window.ContentBlocking.MAX_INTROS,
-        ""Check intro count is at the max after opening step 2""
-      );
-      is(gBrowser.tabs.length, tabCount + 1, ""Tour step 2 tab opened"");
-      await panelHiddenPromise;
-      ok(true, ""Panel hid when the button was clicked"");
-      BrowserTestUtils.removeTab(tab);
-    }
-  );
-
-  info(
-    ""Open another tracking page and make sure we don't show the panel again""
-  );
-  await BrowserTestUtils.withNewTab(TRACKING_PAGE, async function() {
-    await Assert.rejects(
-      waitForConditionPromise(() => {
-        return BrowserTestUtils.is_visible(TOOLTIP_PANEL);
-      }, ""timeout""),
-      /timeout/,
-      ""Info panel shouldn't appear more than MAX_INTROS""
-    );
-  });
-});
diff -r bc634ddca05b -r a931afa2c4bd browser/components/uitour/test/browser_showMenu.js
--- a/browser/components/uitour/test/browser_showMenu.js	Thu Jul 11 04:03:44 2019 +0000
+++ b/browser/components/uitour/test/browser_showMenu.js	Thu Jul 11 10:29:17 2019 +0000
@@ -1,8 +1,5 @@
 ""use strict"";
 
-const CONTROL_CENTER_PANEL = gIdentityHandler._identityPopup;
-const CONTROL_CENTER_MENU_NAME = ""controlCenter"";
-
 const { UrlbarTestUtils } = ChromeUtils.import(
   ""resource://testing-common/UrlbarTestUtils.jsm""
 );
@@ -13,63 +10,6 @@
 
 add_task(setup_UITourTest);
 
-add_UITour_task(async function test_showMenu_controlCenter() {
-  is_element_hidden(CONTROL_CENTER_PANEL, ""Panel should initially be hidden"");
-  await showMenuPromise(CONTROL_CENTER_MENU_NAME);
-  is_element_visible(
-    CONTROL_CENTER_PANEL,
-    ""Panel should be visible after showMenu""
-  );
-
-  await gURLBar.focus();
-  is_element_visible(
-    CONTROL_CENTER_PANEL,
-    ""Panel should remain visible after focus outside""
-  );
-
-  await showMenuPromise(CONTROL_CENTER_MENU_NAME);
-  is_element_visible(
-    CONTROL_CENTER_PANEL,
-    ""Panel should remain visible and callback called after a 2nd showMenu""
-  );
-
-  await BrowserTestUtils.withNewTab(
-    {
-      gBrowser,
-      url: ""about:blank"",
-    },
-    function() {
-      ok(true, ""Tab opened"");
-    }
-  );
-
-  is_element_hidden(CONTROL_CENTER_PANEL, ""Panel should hide upon tab switch"");
-});
-
-add_UITour_task(async function test_hideMenu_controlCenter() {
-  is_element_hidden(CONTROL_CENTER_PANEL, ""Panel should initially be hidden"");
-  await showMenuPromise(CONTROL_CENTER_MENU_NAME);
-  is_element_visible(
-    CONTROL_CENTER_PANEL,
-    ""Panel should be visible after showMenu""
-  );
-  let hidePromise = promisePanelElementHidden(window, CONTROL_CENTER_PANEL);
-  await gContentAPI.hideMenu(CONTROL_CENTER_MENU_NAME);
-  await hidePromise;
-
-  is_element_hidden(CONTROL_CENTER_PANEL, ""Panel should hide after hideMenu"");
-});
-
-add_UITour_task(async function test_showMenu_hideMenu_urlbarPopup() {
-  await UrlbarTestUtils.promisePopupOpen(window, () =>
-    showMenuPromise(""urlbar"")
-  );
-  is(gURLBar.value, ""Firefox"", ""Search string is Firefox"");
-  await UrlbarTestUtils.promisePopupClose(window, () =>
-    gContentAPI.hideMenu(""urlbar"")
-  );
-});
-
 add_UITour_task(async function test_showMenu_hideMenu_pageActionPanel() {
   let pageActionPanel = BrowserPageActions.panelNode;
   let shownPromise = promisePanelElementShown(window, pageActionPanel);
diff -r bc634ddca05b -r a931afa2c4bd browser/components/uitour/test/browser_trackingProtection.js
--- a/browser/components/uitour/test/browser_trackingProtection.js	Thu Jul 11 04:03:44 2019 +0000
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,129 +0,0 @@
-""use strict"";
-
-const PREF_INTRO_DELAY = ""browser.contentblocking.introDelaySeconds"";
-const PREF_INTRO_COUNT = ""browser.contentblocking.introCount"";
-const PREF_TP_ENABLED = ""privacy.trackingprotection.enabled"";
-const BENIGN_PAGE =
-  ""http://tracking.example.org/browser/browser/base/content/test/trackingUI/benignPage.html"";
-const TRACKING_PAGE =
-  ""http://tracking.example.org/browser/browser/base/content/test/trackingUI/trackingPage.html"";
-const TOOLTIP_PANEL = document.getElementById(""UITourTooltip"");
-const TOOLTIP_ANCHOR = document.getElementById(
-  ""tracking-protection-icon-animatable-box""
-);
-
-var { UrlClassifierTestUtils } = ChromeUtils.import(
-  ""resource://testing-common/UrlClassifierTestUtils.jsm""
-);
-
-registerCleanupFunction(function() {
-  UrlClassifierTestUtils.cleanupTestTrackers();
-  Services.prefs.clearUserPref(PREF_TP_ENABLED);
-  Services.prefs.clearUserPref(PREF_INTRO_DELAY);
-});
-
-function allowOneIntro() {
-  Services.prefs.setIntPref(
-    PREF_INTRO_COUNT,
-    window.ContentBlocking.MAX_INTROS - 1
-  );
-}
-
-add_task(async function setup_test() {
-  Services.prefs.setBoolPref(PREF_TP_ENABLED, true);
-  Services.prefs.setIntPref(PREF_INTRO_DELAY, 0);
-  await UrlClassifierTestUtils.addTestTrackers();
-});
-
-add_task(async function test_benignPage() {
-  info(""Load a test page not containing tracking elements"");
-  allowOneIntro();
-  await BrowserTestUtils.withNewTab(
-    { gBrowser, url: BENIGN_PAGE },
-    async function() {
-      await waitForConditionPromise(() => {
-        return BrowserTestUtils.is_visible(TOOLTIP_PANEL);
-      }, ""Info panel shouldn't appear on a benign page"").then(
-        () => ok(false, ""Info panel shouldn't appear""),
-        () => {
-          ok(true, ""Info panel didn't appear on a benign page"");
-        }
-      );
-    }
-  );
-});
-
-add_task(async function test_trackingPages() {
-  info(""Load a test page containing tracking elements"");
-  allowOneIntro();
-  await BrowserTestUtils.withNewTab(
-    { gBrowser, url: TRACKING_PAGE },
-    async function() {
-      await new Promise((resolve, reject) => {
-        waitForPopupAtAnchor(
-          TOOLTIP_PANEL,
-          TOOLTIP_ANCHOR,
-          resolve,
-          ""Intro panel should appear""
-        );
-      });
-
-      is(
-        Services.prefs.getIntPref(PREF_INTRO_COUNT),
-        window.ContentBlocking.MAX_INTROS,
-        ""Check intro count increased""
-      );
-
-      let step2URL =
-        Services.urlFormatter.formatURLPref(
-          ""privacy.trackingprotection.introURL""
-        ) + ""?step=2&newtab=true&variation=2"";
-      let buttons = document.getElementById(""UITourTooltipButtons"");
-
-      info(""Click the step text and nothing should happen"");
-      let tabCount = gBrowser.tabs.length;
-      await EventUtils.synthesizeMouseAtCenter(buttons.children[0], {});
-      is(gBrowser.tabs.length, tabCount, ""Same number of tabs should be open"");
-
-      info(
-        ""Resetting count to test that viewing the tour prevents future panels""
-      );
-      allowOneIntro();
-
-      let panelHiddenPromise = promisePanelElementHidden(window, TOOLTIP_PANEL);
-      let tabPromise = BrowserTestUtils.waitForNewTab(gBrowser, step2URL);
-      info(""Clicking the main button"");
-      EventUtils.synthesizeMouseAtCenter(buttons.children[1], {});
-      let tab = await tabPromise;
-      is(
-        Services.prefs.getIntPref(PREF_INTRO_COUNT),
-        window.ContentBlocking.MAX_INTROS,
-        ""Check intro count is at the max after opening step 2""
-      );
-      is(gBrowser.tabs.length, tabCount + 1, ""Tour step 2 tab opened"");
-      await panelHiddenPromise;
-      ok(true, ""Panel hid when the button was clicked"");
-      BrowserTestUtils.removeTab(tab);
-    }
-  );
-
-  info(
-    ""Open another tracking page and make sure we don't show the panel again""
-  );
-  await BrowserTestUtils.withNewTab(
-    { gBrowser, url: TRACKING_PAGE },
-    async function() {
-      await waitForConditionPromise(() => {
-        return BrowserTestUtils.is_visible(TOOLTIP_PANEL);
-      }, ""Info panel shouldn't appear more than MAX_INTROS"").then(
-        () => ok(false, ""Info panel shouldn't appear again""),
-        () => {
-          ok(
-            true,
-            ""Info panel didn't appear more than MAX_INTROS on tracking pages""
-          );
-        }
-      );
-    }
-  );
-});
diff -r bc634ddca05b -r a931afa2c4bd browser/components/uitour/test/browser_trackingProtection_tour.js
--- a/browser/components/uitour/test/browser_trackingProtection_tour.js	Thu Jul 11 04:03:44 2019 +0000
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,97 +0,0 @@
-""use strict"";
-
-var gTestTab;
-var gContentAPI;
-var gContentWindow;
-
-const { UrlClassifierTestUtils } = ChromeUtils.import(
-  ""resource://testing-common/UrlClassifierTestUtils.jsm""
-);
-
-const PREF_INTRO_DELAY = ""browser.contentblocking.introDelaySeconds"";
-const TP_ENABLED_PREF = ""privacy.trackingprotection.enabled"";
-
-add_task(setup_UITourTest);
-
-add_task(async function test_setup() {
-  Services.prefs.setBoolPref(""privacy.trackingprotection.enabled"", true);
-  Services.prefs.setIntPref(PREF_INTRO_DELAY, 0);
-  await UrlClassifierTestUtils.addTestTrackers();
-
-  registerCleanupFunction(function() {
-    UrlClassifierTestUtils.cleanupTestTrackers();
-    Services.prefs.clearUserPref(""privacy.trackingprotection.enabled"");
-    Services.prefs.clearUserPref(PREF_INTRO_DELAY);
-  });
-});
-
-add_UITour_task(async function test_unblock_target() {
-  await checkToggleTarget(""controlCenter-trackingUnblock"");
-});
-
-add_UITour_task(function setup_block_target() {
-  // Preparation for test_block_target. These are separate since the reload
-  // interferes with UITour as it does a teardown. All we really care about
-  // is the permission manager entry but UITour tests shouldn't rely on that
-  // implementation detail.
-  window.ContentBlocking.disableForCurrentPage();
-});
-
-add_UITour_task(async function test_block_target() {
-  await checkToggleTarget(""controlCenter-trackingBlock"");
-  window.ContentBlocking.enableForCurrentPage();
-});
-
-async function checkToggleTarget(targetID) {
-  let popup = document.getElementById(""UITourTooltip"");
-
-  let trackerOpened = new Promise(function(resolve, reject) {
-    Services.obs.addObserver(function onopen(subject) {
-      let asciiSpec = subject.QueryInterface(Ci.nsIHttpChannel).URI.asciiSpec;
-      if (asciiSpec === ""https://tracking.example.com/"") {
-        Services.obs.removeObserver(onopen, ""http-on-opening-request"");
-        resolve();
-      }
-    }, ""http-on-opening-request"");
-  });
-
-  await ContentTask.spawn(gBrowser.selectedBrowser, {}, function() {
-    let doc = content.document;
-    let iframe = doc.createElement(""iframe"");
-    iframe.setAttribute(""id"", ""tracking-element"");
-    iframe.setAttribute(""src"", ""https://tracking.example.com/"");
-    doc.body.insertBefore(iframe, doc.body.firstElementChild);
-  });
-
-  await trackerOpened;
-
-  let testTargetAvailability = async function(expectedAvailable) {
-    let data = await getConfigurationPromise(""availableTargets"");
-    let available = data.targets.includes(targetID);
-    is(available, expectedAvailable, ""Target has expected availability."");
-  };
-  await testTargetAvailability(false);
-  await showMenuPromise(""controlCenter"");
-  await testTargetAvailability(true);
-
-  await showInfoPromise(
-    targetID,
-    ""This is "" + targetID,
-    ""My arrow should be on the side""
-  );
-  is(popup.alignmentPosition, ""end_before"", ""Check "" + targetID + "" position"");
-
-  let hideMenuPromise = promisePanelElementHidden(
-    window,
-    gIdentityHandler._identityPopup
-  );
-  await gContentAPI.hideMenu(""controlCenter"");
-  await hideMenuPromise;
-
-  ok(!BrowserTestUtils.is_visible(popup), ""The tooltip should now be hidden."");
-  await testTargetAvailability(false);
-
-  await ContentTask.spawn(gBrowser.selectedBrowser, {}, function() {
-    content.document.getElementById(""tracking-element"").remove();
-  });
-}
diff -r bc634ddca05b -r a931afa2c4bd browser/locales/en-US/browser/preferences/preferences.ftl
--- a/browser/locales/en-US/browser/preferences/preferences.ftl	Thu Jul 11 04:03:44 2019 +0000
+++ b/browser/locales/en-US/browser/preferences/preferences.ftl	Thu Jul 11 10:29:17 2019 +0000
@@ -915,7 +915,6 @@
 
 content-blocking-warning-title = Heads up!
 content-blocking-warning-description = Blocking content can cause some websites to break. Itâ€™s easy to disable blocking for sites you trust.
-content-blocking-learn-how = Learn how
 
 content-blocking-reload-description = You will need to reload your tabs to apply these changes.
 content-blocking-reload-tabs-button =
diff -r bc634ddca05b -r a931afa2c4bd browser/locales/en-US/chrome/browser/browser.properties
--- a/browser/locales/en-US/chrome/browser/browser.properties	Thu Jul 11 04:03:44 2019 +0000
+++ b/browser/locales/en-US/chrome/browser/browser.properties	Thu Jul 11 10:29:17 2019 +0000
@@ -623,15 +623,6 @@
 #   ""[Firefox is] Blocking [cryptominers when they get loaded.]""
 contentBlocking.cryptominers.blocking.label=Blocking
 
-# LOCALIZATION NOTE (contentBlocking.intro.title): %S is brandShortName.
-contentBlocking.intro.title=New in %S: Content Blocking
-# LOCALIZATION NOTE (contentBlocking.v1.intro.description): %S is brandShortName.
-contentBlocking.intro.v1.description=When you see the shield, %S is blocking parts of the page that can slow your browsing or track you online.
-contentBlocking.intro.v2.description=The privacy benefits of Tracking Protection are now just one part of content blocking. When you see the shield, content blocking is on.
-# LOCALIZATION NOTE (trackingProtection.intro.step1of3): Indicates that the intro panel is step one of three in a tour.
-trackingProtection.intro.step1of3=1 of 3
-trackingProtection.intro.nextButton.label=Next
-
 trackingProtection.icon.activeTooltip=Tracking attempts blocked
 trackingProtection.icon.disabledTooltip=Tracking content detected
 
diff -r bc634ddca05b -r a931afa2c4bd browser/tools/mozscreenshots/mozscreenshots/extension/configurations/ControlCenter.jsm
--- a/browser/tools/mozscreenshots/mozscreenshots/extension/configurations/ControlCenter.jsm	Thu Jul 11 04:03:44 2019 +0000
+++ b/browser/tools/mozscreenshots/mozscreenshots/extension/configurations/ControlCenter.jsm	Thu Jul 11 10:29:17 2019 +0000
@@ -35,10 +35,7 @@
 const TRACKING_PAGE = `http://tracking.example.org/${RESOURCE_PATH}/tracking.html`;
 
 var ControlCenter = {
-  init(libDir) {
-    // Disable the FTU tours.
-    Services.prefs.setIntPref(""browser.contentblocking.introCount"", 5);
-  },
+  init(libDir) {},
 
   configurations: {
     about: {
diff -r bc634ddca05b -r a931afa2c4bd testing/marionette/client/marionette_driver/geckoinstance.py
--- a/testing/marionette/client/marionette_driver/geckoinstance.py	Thu Jul 11 04:03:44 2019 +0000
+++ b/testing/marionette/client/marionette_driver/geckoinstance.py	Thu Jul 11 10:29:17 2019 +0000
@@ -527,10 +527,6 @@
         # when this Firefox version is no longer supported by the client !!!
         ""app.update.auto"": False,
 
-        # Don't show the content blocking introduction panel
-        # We use a larger number than the default 22 to have some buffer
-        ""browser.contentblocking.introCount"": 99,
-
         # Enable output for dump() and chrome console API
         ""browser.dom.window.dump.enabled"": True,
         ""devtools.console.stdout.chrome"": True,
diff -r bc634ddca05b -r a931afa2c4bd testing/marionette/components/marionette.js
--- a/testing/marionette/components/marionette.js	Thu Jul 11 04:03:44 2019 +0000
+++ b/testing/marionette/components/marionette.js	Thu Jul 11 10:29:17 2019 +0000
@@ -86,10 +86,6 @@
   // (bug 1176798, bug 1177018, bug 1210465)
   [""apz.content_response_timeout"", 60000],
 
-  // Don't show the content blocking introduction panel.
-  // We use a larger number than the default 22 to have some buffer
-  [""browser.contentblocking.introCount"", 99],
-
   // Indicate that the download panel has been shown once so that
   // whichever download test runs first doesn't show the popup
   // inconsistently.
diff -r bc634ddca05b -r a931afa2c4bd toolkit/components/antitracking/test/browser/antitracking_head.js
--- a/toolkit/components/antitracking/test/browser/antitracking_head.js	Thu Jul 11 04:03:44 2019 +0000
+++ b/toolkit/components/antitracking/test/browser/antitracking_head.js	Thu Jul 11 10:29:17 2019 +0000
@@ -288,7 +288,6 @@
           ""privacy.trackingprotection.annotate_channels"",
           cookieBehavior != BEHAVIOR_ACCEPT,
         ],
-        [win.ContentBlocking.prefIntroCount, win.ContentBlocking.MAX_INTROS],
         [
           ""privacy.restrict3rdpartystorage.userInteractionRequiredForHosts"",
           ""tracking.example.com,tracking.example.org"",
diff -r bc634ddca05b -r a931afa2c4bd toolkit/components/antitracking/test/browser/browser_addonHostPermissionIgnoredInTP.js
--- a/toolkit/components/antitracking/test/browser/browser_addonHostPermissionIgnoredInTP.js	Thu Jul 11 04:03:44 2019 +0000
+++ b/toolkit/components/antitracking/test/browser/browser_addonHostPermissionIgnoredInTP.js	Thu Jul 11 10:29:17 2019 +0000
@@ -5,11 +5,7 @@
 
   await SpecialPowers.flushPrefEnv();
   await SpecialPowers.pushPrefEnv({
-    set: [
-      [""privacy.trackingprotection.enabled"", true],
-      // prevent the content blocking on-boarding UI to start mid-way through the test!
-      [ContentBlocking.prefIntroCount, ContentBlocking.MAX_INTROS],
-    ],
+    set: [[""privacy.trackingprotection.enabled"", true]],
   });
 
   await UrlClassifierTestUtils.addTestTrackers();
diff -r bc634ddca05b -r a931afa2c4bd toolkit/components/antitracking/test/browser/browser_onBeforeRequestNotificationForTrackingResources.js
--- a/toolkit/components/antitracking/test/browser/browser_onBeforeRequestNotificationForTrackingResources.js	Thu Jul 11 04:03:44 2019 +0000
+++ b/toolkit/components/antitracking/test/browser/browser_onBeforeRequestNotificationForTrackingResources.js	Thu Jul 11 10:29:17 2019 +0000
@@ -60,8 +60,6 @@
       [""privacy.trackingprotection.pbmode.enabled"", false],
       // tracking annotations aren't needed in this test, only TP is needed
       [""privacy.trackingprotection.annotate_channels"", false],
-      // prevent the content blocking on-boarding UI to start mid-way through the test!
-      [ContentBlocking.prefIntroCount, ContentBlocking.MAX_INTROS],
       [
         ""privacy.restrict3rdpartystorage.userInteractionRequiredForHosts"",
         ""tracking.example.com,tracking.example.org"",
diff -r bc634ddca05b -r a931afa2c4bd toolkit/components/antitracking/test/browser/browser_onModifyRequestNotificationForTrackingResources.js
--- a/toolkit/components/antitracking/test/browser/browser_onModifyRequestNotificationForTrackingResources.js	Thu Jul 11 04:03:44 2019 +0000
+++ b/toolkit/components/antitracking/test/browser/browser_onModifyRequestNotificationForTrackingResources.js	Thu Jul 11 10:29:17 2019 +0000
@@ -57,8 +57,6 @@
       [""privacy.trackingprotection.pbmode.enabled"", false],
       // tracking annotations aren't needed in this test, only TP is needed
       [""privacy.trackingprotection.annotate_channels"", false],
-      // prevent the content blocking on-boarding UI to start mid-way through the test!
-      [ContentBlocking.prefIntroCount, ContentBlocking.MAX_INTROS],
       [
         ""privacy.restrict3rdpartystorage.userInteractionRequiredForHosts"",
         ""tracking.example.com,tracking.example.org"",
diff -r bc634ddca05b -r a931afa2c4bd toolkit/components/antitracking/test/browser/browser_storageAccessDoorHanger.js
--- a/toolkit/components/antitracking/test/browser/browser_storageAccessDoorHanger.js	Thu Jul 11 04:03:44 2019 +0000
+++ b/toolkit/components/antitracking/test/browser/browser_storageAccessDoorHanger.js	Thu Jul 11 10:29:17 2019 +0000
@@ -33,7 +33,6 @@
     set: [
       [""browser.contentblocking.allowlist.annotations.enabled"", true],
       [""browser.contentblocking.allowlist.storage.enabled"", true],
-      [ContentBlocking.prefIntroCount, ContentBlocking.MAX_INTROS],
       [""dom.storage_access.auto_grants"", true],
       [""dom.storage_access.auto_grants.delayed"", false],
       [""dom.storage_access.enabled"", true],
diff -r bc634ddca05b -r a931afa2c4bd toolkit/components/antitracking/test/browser/browser_workerPropagation.js
--- a/toolkit/components/antitracking/test/browser/browser_workerPropagation.js	Thu Jul 11 04:03:44 2019 +0000
+++ b/toolkit/components/antitracking/test/browser/browser_workerPropagation.js	Thu Jul 11 10:29:17 2019 +0000
@@ -11,7 +11,6 @@
     set: [
       [""browser.contentblocking.allowlist.annotations.enabled"", true],
       [""browser.contentblocking.allowlist.storage.enabled"", true],
-      [ContentBlocking.prefIntroCount, ContentBlocking.MAX_INTROS],
       [""dom.storage_access.auto_grants"", true],
       [""dom.storage_access.auto_grants.delayed"", false],
       [""dom.storage_access.enabled"", true],
","diff -r db8f3ee41bdf -r d08515469bc7 testing/marionette/client/marionette_driver/geckoinstance.py
--- a/testing/marionette/client/marionette_driver/geckoinstance.py	Mon Jul 22 09:27:29 2019 +0300
+++ b/testing/marionette/client/marionette_driver/geckoinstance.py	Mon Jul 22 07:57:25 2019 +0000
@@ -527,6 +527,11 @@
         # when this Firefox version is no longer supported by the client !!!
         ""app.update.auto"": False,
 
+        # Don't show the content blocking introduction panel
+        # We use a larger number than the default 22 to have some buffer
+        # This can be removed once Firefox 69 and 68 ESR and are no longer supported.
+        ""browser.contentblocking.introCount"": 99,
+
         # Enable output for dump() and chrome console API
         ""browser.dom.window.dump.enabled"": True,
         ""devtools.console.stdout.chrome"": True,
diff -r db8f3ee41bdf -r d08515469bc7 testing/marionette/components/marionette.js
--- a/testing/marionette/components/marionette.js	Mon Jul 22 09:27:29 2019 +0300
+++ b/testing/marionette/components/marionette.js	Mon Jul 22 07:57:25 2019 +0000
@@ -86,6 +86,11 @@
   // (bug 1176798, bug 1177018, bug 1210465)
   [""apz.content_response_timeout"", 60000],
 
+  // Don't show the content blocking introduction panel.
+  // We use a larger number than the default 22 to have some buffer
+  // This can be removed once Firefox 69 and 68 ESR and are no longer supported.
+  [""browser.contentblocking.introCount"", 99],
+
   // Indicate that the download panel has been shown once so that
   // whichever download test runs first doesn't show the popup
   // inconsistently.
",1564367,a931afa2c4bdaf1da2f657e1c3af2e41d4c73834,"Bug 1564367 - Remove the content blocking UI tour. r=MattN,fluent-reviewers,flod

Differential Revision: https://phabricator.services.mozilla.com/D37384",1567824,"Bug 1567824 - Add browser.contentblocking.introCount back to marionette.js and geckoinstance.py. r=whimboo

Differential Revision: https://phabricator.services.mozilla.com/D38841",2019-07-11T10:29:00+00:00,Remove the content blocking UI tour,It's time to say goodbye.,Add browser.contentblocking.introCount back to marionette.js and geckoinstance.py,"This was removed too early, apparently."
1da5a37de0fd1695e96a9d5e7f59fbd84d8759b2,2019-07-24T13:33:00+00:00,"diff -r d8f487edf311 -r 805e1d6269d9 gfx/layers/composite/GPUVideoTextureHost.cpp
--- a/gfx/layers/composite/GPUVideoTextureHost.cpp	Fri Jul 12 00:34:08 2019 +0000
+++ b/gfx/layers/composite/GPUVideoTextureHost.cpp	Fri Jul 12 00:39:49 2019 +0000
@@ -12,9 +12,9 @@
 namespace mozilla {
 namespace layers {
 
-GPUVideoTextureHost::GPUVideoTextureHost(TextureFlags aFlags,
-                                         TextureHost* aWrappedTextureHost)
-    : TextureHost(aFlags), mWrappedTextureHost(aWrappedTextureHost) {
+GPUVideoTextureHost::GPUVideoTextureHost(
+    TextureFlags aFlags, const SurfaceDescriptorGPUVideo& aDescriptor)
+    : TextureHost(aFlags), mDescriptor(aDescriptor) {
   MOZ_COUNT_CTOR(GPUVideoTextureHost);
 }
 
@@ -24,52 +24,57 @@
 
 GPUVideoTextureHost* GPUVideoTextureHost::CreateFromDescriptor(
     TextureFlags aFlags, const SurfaceDescriptorGPUVideo& aDescriptor) {
+  return new GPUVideoTextureHost(aFlags, aDescriptor);
+}
+
+TextureHost* GPUVideoTextureHost::EnsureWrappedTextureHost() {
+  if (mWrappedTextureHost) {
+    return mWrappedTextureHost;
+  }
+
   // In the future when the RDD process has a PVideoBridge connection,
   // then there might be two VideoBridgeParents (one within the GPU process,
   // one from RDD). We'll need to flag which one to use to lookup our
   // descriptor, or just try both.
-  TextureHost* wrappedTextureHost =
-      VideoBridgeParent::GetSingleton()->LookupTexture(aDescriptor.handle());
-  if (!wrappedTextureHost) {
-    return nullptr;
-  }
-  return new GPUVideoTextureHost(aFlags, wrappedTextureHost);
+  mWrappedTextureHost =
+      VideoBridgeParent::GetSingleton()->LookupTexture(mDescriptor.handle());
+  return mWrappedTextureHost;
 }
 
 bool GPUVideoTextureHost::Lock() {
-  if (!mWrappedTextureHost) {
+  if (!EnsureWrappedTextureHost()) {
     return false;
   }
-  return mWrappedTextureHost->Lock();
+  return EnsureWrappedTextureHost()->Lock();
 }
 
 void GPUVideoTextureHost::Unlock() {
-  if (!mWrappedTextureHost) {
+  if (!EnsureWrappedTextureHost()) {
     return;
   }
-  mWrappedTextureHost->Unlock();
+  EnsureWrappedTextureHost()->Unlock();
 }
 
 bool GPUVideoTextureHost::BindTextureSource(
     CompositableTextureSourceRef& aTexture) {
-  if (!mWrappedTextureHost) {
+  if (!EnsureWrappedTextureHost()) {
     return false;
   }
-  return mWrappedTextureHost->BindTextureSource(aTexture);
+  return EnsureWrappedTextureHost()->BindTextureSource(aTexture);
 }
 
 bool GPUVideoTextureHost::AcquireTextureSource(
     CompositableTextureSourceRef& aTexture) {
-  if (!mWrappedTextureHost) {
+  if (!EnsureWrappedTextureHost()) {
     return false;
   }
-  return mWrappedTextureHost->AcquireTextureSource(aTexture);
+  return EnsureWrappedTextureHost()->AcquireTextureSource(aTexture);
 }
 
 void GPUVideoTextureHost::SetTextureSourceProvider(
     TextureSourceProvider* aProvider) {
-  if (mWrappedTextureHost) {
-    mWrappedTextureHost->SetTextureSourceProvider(aProvider);
+  if (EnsureWrappedTextureHost()) {
+    EnsureWrappedTextureHost()->SetTextureSourceProvider(aProvider);
   }
 }
 
@@ -96,43 +101,62 @@
 
 bool GPUVideoTextureHost::HasIntermediateBuffer() const {
   MOZ_ASSERT(mWrappedTextureHost);
+  if (!mWrappedTextureHost) {
+    return false;
+  }
 
   return mWrappedTextureHost->HasIntermediateBuffer();
 }
 
 void GPUVideoTextureHost::CreateRenderTexture(
     const wr::ExternalImageId& aExternalImageId) {
-  MOZ_ASSERT(mWrappedTextureHost);
+  MOZ_ASSERT(EnsureWrappedTextureHost());
+  if (!EnsureWrappedTextureHost()) {
+    return;
+  }
 
-  mWrappedTextureHost->CreateRenderTexture(aExternalImageId);
+  EnsureWrappedTextureHost()->CreateRenderTexture(aExternalImageId);
 }
 
 uint32_t GPUVideoTextureHost::NumSubTextures() const {
   MOZ_ASSERT(mWrappedTextureHost);
+  if (!mWrappedTextureHost) {
+    return 0;
+  }
   return mWrappedTextureHost->NumSubTextures();
 }
 
 void GPUVideoTextureHost::PushResourceUpdates(
     wr::TransactionBuilder& aResources, ResourceUpdateOp aOp,
     const Range<wr::ImageKey>& aImageKeys, const wr::ExternalImageId& aExtID) {
-  MOZ_ASSERT(mWrappedTextureHost);
-  mWrappedTextureHost->PushResourceUpdates(aResources, aOp, aImageKeys, aExtID);
+  MOZ_ASSERT(EnsureWrappedTextureHost());
+  if (!EnsureWrappedTextureHost()) {
+    return;
+  }
+  EnsureWrappedTextureHost()->PushResourceUpdates(aResources, aOp, aImageKeys,
+                                                  aExtID);
 }
 
 void GPUVideoTextureHost::PushDisplayItems(
     wr::DisplayListBuilder& aBuilder, const wr::LayoutRect& aBounds,
     const wr::LayoutRect& aClip, wr::ImageRendering aFilter,
     const Range<wr::ImageKey>& aImageKeys) {
-  MOZ_ASSERT(mWrappedTextureHost);
+  MOZ_ASSERT(EnsureWrappedTextureHost());
   MOZ_ASSERT(aImageKeys.length() > 0);
+  if (!EnsureWrappedTextureHost()) {
+    return;
+  }
 
-  mWrappedTextureHost->PushDisplayItems(aBuilder, aBounds, aClip, aFilter,
-                                        aImageKeys);
+  EnsureWrappedTextureHost()->PushDisplayItems(aBuilder, aBounds, aClip,
+                                               aFilter, aImageKeys);
 }
 
 bool GPUVideoTextureHost::SupportsWrNativeTexture() {
-  MOZ_ASSERT(mWrappedTextureHost);
-  return mWrappedTextureHost->SupportsWrNativeTexture();
+  MOZ_ASSERT(EnsureWrappedTextureHost());
+  if (!EnsureWrappedTextureHost()) {
+    return false;
+  }
+  return EnsureWrappedTextureHost()->SupportsWrNativeTexture();
 }
 
 }  // namespace layers
diff -r d8f487edf311 -r 805e1d6269d9 gfx/layers/composite/GPUVideoTextureHost.h
--- a/gfx/layers/composite/GPUVideoTextureHost.h	Fri Jul 12 00:34:08 2019 +0000
+++ b/gfx/layers/composite/GPUVideoTextureHost.h	Fri Jul 12 00:39:49 2019 +0000
@@ -65,9 +65,13 @@
   bool SupportsWrNativeTexture() override;
 
  protected:
-  GPUVideoTextureHost(TextureFlags aFlags, TextureHost* aWrappedTextureHost);
+  GPUVideoTextureHost(TextureFlags aFlags,
+                      const SurfaceDescriptorGPUVideo& aDescriptor);
+
+  TextureHost* EnsureWrappedTextureHost();
 
   RefPtr<TextureHost> mWrappedTextureHost;
+  SurfaceDescriptorGPUVideo mDescriptor;
 };
 
 }  // namespace layers
","diff -r 94afeea9ca07 -r 1da5a37de0fd gfx/layers/composite/GPUVideoTextureHost.cpp
--- a/gfx/layers/composite/GPUVideoTextureHost.cpp	Tue Jul 23 23:02:39 2019 +0000
+++ b/gfx/layers/composite/GPUVideoTextureHost.cpp	Wed Jul 24 13:33:57 2019 +0000
@@ -118,12 +118,12 @@
   EnsureWrappedTextureHost()->CreateRenderTexture(aExternalImageId);
 }
 
-uint32_t GPUVideoTextureHost::NumSubTextures() const {
-  MOZ_ASSERT(mWrappedTextureHost);
-  if (!mWrappedTextureHost) {
+uint32_t GPUVideoTextureHost::NumSubTextures() {
+  MOZ_ASSERT(EnsureWrappedTextureHost());
+  if (!EnsureWrappedTextureHost()) {
     return 0;
   }
-  return mWrappedTextureHost->NumSubTextures();
+  return EnsureWrappedTextureHost()->NumSubTextures();
 }
 
 void GPUVideoTextureHost::PushResourceUpdates(
diff -r 94afeea9ca07 -r 1da5a37de0fd gfx/layers/composite/GPUVideoTextureHost.h
--- a/gfx/layers/composite/GPUVideoTextureHost.h	Tue Jul 23 23:02:39 2019 +0000
+++ b/gfx/layers/composite/GPUVideoTextureHost.h	Wed Jul 24 13:33:57 2019 +0000
@@ -50,7 +50,7 @@
   void CreateRenderTexture(
       const wr::ExternalImageId& aExternalImageId) override;
 
-  uint32_t NumSubTextures() const override;
+  uint32_t NumSubTextures() override;
 
   void PushResourceUpdates(wr::TransactionBuilder& aResources,
                            ResourceUpdateOp aOp,
diff -r 94afeea9ca07 -r 1da5a37de0fd gfx/layers/composite/TextureHost.cpp
--- a/gfx/layers/composite/TextureHost.cpp	Tue Jul 23 23:02:39 2019 +0000
+++ b/gfx/layers/composite/TextureHost.cpp	Wed Jul 24 13:33:57 2019 +0000
@@ -574,7 +574,7 @@
                                                  texture.forget());
 }
 
-uint32_t BufferTextureHost::NumSubTextures() const {
+uint32_t BufferTextureHost::NumSubTextures() {
   if (GetFormat() == gfx::SurfaceFormat::YUV) {
     return 3;
   }
diff -r 94afeea9ca07 -r 1da5a37de0fd gfx/layers/composite/TextureHost.h
--- a/gfx/layers/composite/TextureHost.h	Tue Jul 23 23:02:39 2019 +0000
+++ b/gfx/layers/composite/TextureHost.h	Wed Jul 24 13:33:57 2019 +0000
@@ -642,7 +642,7 @@
 
   /// Returns the number of actual textures that will be used to render this.
   /// For example in a lot of YUV cases it will be 3
-  virtual uint32_t NumSubTextures() const { return 1; }
+  virtual uint32_t NumSubTextures() { return 1; }
 
   enum ResourceUpdateOp {
     ADD_IMAGE,
@@ -777,7 +777,7 @@
   void CreateRenderTexture(
       const wr::ExternalImageId& aExternalImageId) override;
 
-  uint32_t NumSubTextures() const override;
+  uint32_t NumSubTextures() override;
 
   void PushResourceUpdates(wr::TransactionBuilder& aResources,
                            ResourceUpdateOp aOp,
diff -r 94afeea9ca07 -r 1da5a37de0fd gfx/layers/d3d11/TextureD3D11.cpp
--- a/gfx/layers/d3d11/TextureD3D11.cpp	Tue Jul 23 23:02:39 2019 +0000
+++ b/gfx/layers/d3d11/TextureD3D11.cpp	Wed Jul 24 13:33:57 2019 +0000
@@ -983,7 +983,7 @@
                                                  texture.forget());
 }
 
-uint32_t DXGITextureHostD3D11::NumSubTextures() const {
+uint32_t DXGITextureHostD3D11::NumSubTextures() {
   switch (GetFormat()) {
     case gfx::SurfaceFormat::R8G8B8X8:
     case gfx::SurfaceFormat::R8G8B8A8:
@@ -1243,7 +1243,7 @@
                                                  texture.forget());
 }
 
-uint32_t DXGIYCbCrTextureHostD3D11::NumSubTextures() const {
+uint32_t DXGIYCbCrTextureHostD3D11::NumSubTextures() {
   // ycbcr use 3 sub textures.
   return 3;
 }
diff -r 94afeea9ca07 -r 1da5a37de0fd gfx/layers/d3d11/TextureD3D11.h
--- a/gfx/layers/d3d11/TextureD3D11.h	Tue Jul 23 23:02:39 2019 +0000
+++ b/gfx/layers/d3d11/TextureD3D11.h	Wed Jul 24 13:33:57 2019 +0000
@@ -342,7 +342,7 @@
   void CreateRenderTexture(
       const wr::ExternalImageId& aExternalImageId) override;
 
-  uint32_t NumSubTextures() const override;
+  uint32_t NumSubTextures() override;
 
   void PushResourceUpdates(wr::TransactionBuilder& aResources,
                            ResourceUpdateOp aOp,
@@ -409,7 +409,7 @@
   void CreateRenderTexture(
       const wr::ExternalImageId& aExternalImageId) override;
 
-  uint32_t NumSubTextures() const override;
+  uint32_t NumSubTextures() override;
 
   void PushResourceUpdates(wr::TransactionBuilder& aResources,
                            ResourceUpdateOp aOp,
diff -r 94afeea9ca07 -r 1da5a37de0fd gfx/layers/opengl/MacIOSurfaceTextureHostOGL.cpp
--- a/gfx/layers/opengl/MacIOSurfaceTextureHostOGL.cpp	Tue Jul 23 23:02:39 2019 +0000
+++ b/gfx/layers/opengl/MacIOSurfaceTextureHostOGL.cpp	Wed Jul 24 13:33:57 2019 +0000
@@ -131,7 +131,7 @@
                                                  texture.forget());
 }
 
-uint32_t MacIOSurfaceTextureHostOGL::NumSubTextures() const {
+uint32_t MacIOSurfaceTextureHostOGL::NumSubTextures() {
   switch (GetFormat()) {
     case gfx::SurfaceFormat::R8G8B8X8:
     case gfx::SurfaceFormat::R8G8B8A8:
diff -r 94afeea9ca07 -r 1da5a37de0fd gfx/layers/opengl/MacIOSurfaceTextureHostOGL.h
--- a/gfx/layers/opengl/MacIOSurfaceTextureHostOGL.h	Tue Jul 23 23:02:39 2019 +0000
+++ b/gfx/layers/opengl/MacIOSurfaceTextureHostOGL.h	Wed Jul 24 13:33:57 2019 +0000
@@ -66,7 +66,7 @@
   void CreateRenderTexture(
       const wr::ExternalImageId& aExternalImageId) override;
 
-  uint32_t NumSubTextures() const override;
+  uint32_t NumSubTextures() override;
 
   void PushResourceUpdates(wr::TransactionBuilder& aResources,
                            ResourceUpdateOp aOp,
diff -r 94afeea9ca07 -r 1da5a37de0fd gfx/layers/wr/AsyncImagePipelineManager.cpp
--- a/gfx/layers/wr/AsyncImagePipelineManager.cpp	Tue Jul 23 23:02:39 2019 +0000
+++ b/gfx/layers/wr/AsyncImagePipelineManager.cpp	Wed Jul 24 13:33:57 2019 +0000
@@ -223,8 +223,9 @@
     return Nothing();
   }
 
-  if (!texture) {
-    // We don't have a new texture, there isn't much we can do.
+  if (!texture || texture->NumSubTextures() == 0) {
+    // We don't have a new texture or texture does not have SubTextures, there
+    // isn't much we can do.
     aKeys = aPipeline->mKeys;
     return Nothing();
   }
@@ -243,6 +244,7 @@
   // The non-external image code path falls back to converting the texture into
   // an rgb image.
   auto numKeys = useExternalImage ? texture->NumSubTextures() : 1;
+  MOZ_ASSERT(numKeys > 0);
 
   // If we already had a texture and the format hasn't changed, better to reuse
   // the image keys than create new ones.
diff -r 94afeea9ca07 -r 1da5a37de0fd gfx/layers/wr/WebRenderTextureHost.cpp
--- a/gfx/layers/wr/WebRenderTextureHost.cpp	Tue Jul 23 23:02:39 2019 +0000
+++ b/gfx/layers/wr/WebRenderTextureHost.cpp	Wed Jul 24 13:33:57 2019 +0000
@@ -201,7 +201,7 @@
   return mWrappedTextureHost->HasIntermediateBuffer();
 }
 
-uint32_t WebRenderTextureHost::NumSubTextures() const {
+uint32_t WebRenderTextureHost::NumSubTextures() {
   MOZ_ASSERT(mWrappedTextureHost);
   return mWrappedTextureHost->NumSubTextures();
 }
diff -r 94afeea9ca07 -r 1da5a37de0fd gfx/layers/wr/WebRenderTextureHost.h
--- a/gfx/layers/wr/WebRenderTextureHost.h	Tue Jul 23 23:02:39 2019 +0000
+++ b/gfx/layers/wr/WebRenderTextureHost.h	Wed Jul 24 13:33:57 2019 +0000
@@ -69,7 +69,7 @@
 
   bool HasIntermediateBuffer() const override;
 
-  uint32_t NumSubTextures() const override;
+  uint32_t NumSubTextures() override;
 
   void PushResourceUpdates(wr::TransactionBuilder& aResources,
                            ResourceUpdateOp aOp,
",1562616,805e1d6269d999b8976d7a36417e707b0ca4553f,"Bug 1562616 - Don't fail to create a GPUVideoTextureHost if the dependent texture isn't available, since that crashes the compositor. r=sotaro

Depends on D37781

Differential Revision: https://phabricator.services.mozilla.com/D37782",1568419,"Bug 1568419 - Handle a case that NumSubTextures() returns 0 in AsyncImagePipelineManager::UpdateImageKeys() r=nical

GPUVideoTextureHost::NumSubTextures() returns 0 when wrapped TextureHost does not exist. In this case, we do not have a content of GPUVideoTextureHost for WR render. And EnsureWrappedTextureHost() calling is added in GPUVideoTextureHost::NumSubTextures(), since GPUVideoTextureHost is not explicit about when a wrapped TextureHost is created.

Differential Revision: https://phabricator.services.mozilla.com/D39137",2019-07-12T00:39:00+00:00,Crash in [@ mozilla::ipc::FatalError | mozilla::ipc::IProtocol::HandleFatalError | mozilla::ipc::ReadIPDLParam<T>],"This bug is for crash report bp-8688e7fb-c841-4264-99c8-ea8e60190629.

Seen while reviewing nightly crashes. These crashes started in 20190628161248: https://bit.ly/302JP8m. Many of the URLS are youtube.com, but there are some others.

Possible regression range based on build id: https://hg.mozilla.org/mozilla-central/pushloghtml?fromchange=9ee669c657c79b26a6ec0df246cc5bfe2b1d9a9a&tochange=8537d24d8aa8c0c2189c308d5835def2feec313c

Bug 1547218 touched some code in this area when it landed, ni on nika

```
Top 10 frames of crashing thread:

0 XUL mozilla::ipc::FatalError ipc/glue/ProtocolUtils.cpp:259
1 XUL mozilla::ipc::IProtocol::HandleFatalError const ipc/glue/ProtocolUtils.cpp:495
2 XUL bool mozilla::ipc::ReadIPDLParam<mozilla::layers::TimedTexture> ipc/glue/IPDLParamTraits.h:61
3 XUL bool mozilla::ipc::ReadIPDLParam<nsTArray<mozilla::layers::TimedTexture> > ipc/glue/IPDLParamTraits.h:61
4 XUL bool mozilla::ipc::ReadIPDLParam<mozilla::layers::OpUseTexture> ipc/glue/IPDLParamTraits.h:61
5 XUL bool mozilla::ipc::ReadIPDLParam<mozilla::layers::CompositableOperationDetail> ipc/glue/IPDLParamTraits.h:61
6 XUL mozilla::ipc::IPDLParamTraits<mozilla::layers::CompositableOperation>::Read ipc/ipdl/LayersMessages.cpp:10713
7 XUL mozilla::ipc::IPDLParamTraits<nsTArray<mozilla::layers::CompositableOperation> >::Read ipc/glue/IPDLParamTraits.h:182
8 XUL mozilla::layers::PImageBridgeParent::OnMessageReceived ipc/ipdl/PImageBridgeParent.cpp:349
9 XUL mozilla::ipc::MessageChannel::DispatchMessage ipc/glue/MessageChannel.cpp:2158

```",Handle a case that NumSubTextures() returns 0 in AsyncImagePipelineManager::UpdateImageKeys(),"Created by Bug 1567737 Comment 6.

Since Bug 1562616 fix, GPUVideoTextureHost::NumSubTextures() could return 0, if mWrappedTextureHost does not exist. This case is not handled correctly in AsyncImagePipelineManager::UpdateImageKeys(). It could cause a crash by InvalidArrayIndex_CRASH()."
d67ebe52bbc145d022d90a322ffbc2a4458a75dc,2020-12-22T23:13:00+00:00,"diff -r 90a95d56b18d -r 841e248130ae browser/components/urlbar/UrlbarView.jsm
--- a/browser/components/urlbar/UrlbarView.jsm	Thu Apr 18 18:26:41 2019 +0300
+++ b/browser/components/urlbar/UrlbarView.jsm	Thu Apr 18 08:29:18 2019 +0000
@@ -353,7 +353,6 @@
     // icon if it's not too far from the edge of the window.  We define
     // ""too far"" as ""more than 30% of the window's width AND more than
     // 250px"".
-    let contentWidth = width;
     let boundToCheck = this.window.RTL_UI ? ""right"" : ""left"";
     let inputRect = this._getBoundsWithoutFlushing(this.input.textbox);
     let startOffset = Math.abs(inputRect[boundToCheck] - documentRect[boundToCheck]);
@@ -377,12 +376,10 @@
 
       this.panel.style.setProperty(""--item-padding-start"", px(start));
       this.panel.style.setProperty(""--item-padding-end"", px(endOffset));
-      contentWidth -= start + endOffset;
     } else {
       this.panel.style.removeProperty(""--item-padding-start"");
       this.panel.style.removeProperty(""--item-padding-end"");
     }
-    this.panel.style.setProperty(""--item-content-width"", px(contentWidth));
 
     // Align the panel with the input's parent toolbar.
     let toolbarRect =
@@ -683,13 +680,15 @@
   }
 
   _on_overflow(event) {
-    if (event.target.classList.contains(""urlbarView-row-inner"")) {
+    if (event.target.classList.contains(""urlbarView-url"") ||
+        event.target.classList.contains(""urlbarView-title"")) {
       event.target.toggleAttribute(""overflow"", true);
     }
   }
 
   _on_underflow(event) {
-    if (event.target.classList.contains(""urlbarView-row-inner"")) {
+    if (event.target.classList.contains(""urlbarView-url"") ||
+        event.target.classList.contains(""urlbarView-title"")) {
       event.target.toggleAttribute(""overflow"", false);
     }
   }
diff -r 90a95d56b18d -r 841e248130ae browser/themes/shared/urlbar-autocomplete.inc.css
--- a/browser/themes/shared/urlbar-autocomplete.inc.css	Thu Apr 18 18:26:41 2019 +0300
+++ b/browser/themes/shared/urlbar-autocomplete.inc.css	Thu Apr 18 08:29:18 2019 +0000
@@ -49,27 +49,30 @@
   border-radius: 2px;
   fill: currentColor;
   fill-opacity: .6;
-  padding-top: 5px;
-  padding-bottom: 5px;
+  padding-top: 6px;
+  padding-bottom: 6px;
   padding-inline-start: calc(var(--item-padding-start, calc(5px + @urlbarViewFaviconOffset@)) - @urlbarViewFaviconOffset@);
   padding-inline-end: var(--item-padding-end, 5px);
 }
 
 :root[uidensity=touch] .urlbarView-row {
-  padding-top: 10px;
-  padding-bottom: 10px;
+  padding-top: 11px;
+  padding-bottom: 11px;
 }
 
 .urlbarView-row-inner {
-  overflow: hidden;
-  display: block;
+  display: flex;
+  flex-wrap: nowrap;
+  align-items: end;
+  justify-content: start;
 }
 
-.urlbarView-row-inner[overflow] {
+.urlbarView-title[overflow],
+.urlbarView-url[overflow] {
   mask-image: linear-gradient(to left, transparent, black 2em);
 }
 
-.urlbarView-row-inner[overflow]:-moz-locale-dir(rtl) {
+.urlbarView-title[overflow]:-moz-locale-dir(rtl) {
   mask-image: linear-gradient(to right, transparent, black 2em);
 }
 
@@ -87,8 +90,7 @@
 .urlbarView-favicon {
   display: inline-block;
   vertical-align: middle;
-  transform: translateY(-2px);
-  width: 16px;
+  min-width: 16px;
   height: 16px;
   margin-inline-end: @urlbarViewIconMarginEnd@;
   background-repeat: no-repeat;
@@ -117,8 +119,10 @@
   vertical-align: text-bottom;
   overflow: hidden;
   white-space: nowrap;
-  text-overflow: ellipsis;
-  max-width: calc(var(--item-content-width) * .7 - 2 * (16px + @urlbarViewIconMarginEnd@));
+  /* We prioritize the title over the url, so it can grow freely, but it should
+     never crop the url completely */
+  flex-shrink: 0;
+  max-width: calc(70% - 2 * (16px + @urlbarViewIconMarginEnd@));
 }
 
 .urlbarView-title-separator::before {
@@ -148,6 +152,7 @@
 }
 
 .urlbarView-url {
+  overflow: hidden;
   color: var(--urlbar-popup-url-color);
 }
 
@@ -172,6 +177,7 @@
 
 .urlbarView-tags {
   display: inline-block;
+  overflow: hidden;
 }
 
 .urlbarView-tag {
","diff -r 249c57822ca3 -r d67ebe52bbc1 browser/themes/shared/urlbarView.inc.css
--- a/browser/themes/shared/urlbarView.inc.css	Tue Dec 22 23:06:50 2020 +0000
+++ b/browser/themes/shared/urlbarView.inc.css	Tue Dec 22 23:13:54 2020 +0000
@@ -199,11 +199,13 @@
 /* Favicon */
 
 .urlbarView-favicon {
-  min-width: @urlbarViewFaviconWidth@;
+  width: @urlbarViewFaviconWidth@;
   height: @urlbarViewFaviconWidth@;
   margin-inline-end: calc(@urlbarViewIconMarginEnd@);
   background-repeat: no-repeat;
   background-size: contain;
+  object-fit: contain;
+  flex-shrink: 0;
   -moz-context-properties: fill, fill-opacity;
 }
 
@@ -214,12 +216,11 @@
 }
 
 .urlbarView-row[type=tip] > .urlbarView-row-inner > .urlbarView-favicon {
-  min-width: 24px;
+  width: 24px;
   height: 24px;
   margin-inline-end: 12px;
   flex-basis: 24px;
   flex-grow:  0;
-  flex-shrink: 0;
 }
 
 .urlbarView-row[tail-suggestion] > .urlbarView-row-inner > .urlbarView-no-wrap > .urlbarView-favicon {
@@ -249,7 +250,7 @@
 
 .urlbarView-type-icon {
   position: absolute;
-  min-width: 12px;
+  width: 12px;
   height: 12px;
   margin-bottom: -4px;
   margin-inline-start: 8px;
",1534738,841e248130aeed83a650c3a2049310946279efa8,"Bug 1534738 - Title and url in RTL mode are not properly overflowing in Quantum Bar. r=dao

Moves the mask to the url and title elements, uses a flex layout to ensure
elements properly overflow, and fixes alignments and paddings because the new
layout would be more compact. rows are slightly taller than before, but they were
smaller than the legacy bar, so in the end we should be good.

Differential Revision: https://phabricator.services.mozilla.com/D27868",1570195,"Bug 1570195 - Update favicon to have width to avoid column overflow. r=harry,ntim

Differential Revision: https://phabricator.services.mozilla.com/D100259",2019-04-18T08:29:00+00:00,[RTL] Quantumbar autocomplete urls are shown from the end of the URL instead of its beginning,"Created attachment 9050406
Screenshot

See attached.
This works okay in non-quantumbar.",Urlbar icon is too large when non square SVG is used,"Created attachment 9081836
Screenshot

See the 3rd row in the screenshot.

Icon is at: https://janitor.technology/img/janitor.svg"
56888fc83da39147b3d41579315055498b0d1b7c,2021-06-21T12:03:00+00:00,"diff -r b52b2eb81d1e -r c10e876269a9 caps/ContentPrincipal.cpp
--- a/caps/ContentPrincipal.cpp	Sun Apr 15 16:38:45 2018 +1200
+++ b/caps/ContentPrincipal.cpp	Wed May 09 18:21:24 2018 +0200
@@ -36,16 +36,6 @@
 
 using namespace mozilla;
 
-static bool URIIsImmutable(nsIURI* aURI)
-{
-  nsCOMPtr<nsIMutable> mutableObj(do_QueryInterface(aURI));
-  bool isMutable;
-  return
-    mutableObj &&
-    NS_SUCCEEDED(mutableObj->GetMutable(&isMutable)) &&
-    !isMutable;
-}
-
 static inline ExtensionPolicyService&
 EPS()
 {
@@ -63,8 +53,6 @@
 
 ContentPrincipal::ContentPrincipal()
   : BasePrincipal(eCodebasePrincipal)
-  , mCodebaseImmutable(false)
-  , mDomainImmutable(false)
 {
 }
 
@@ -96,9 +84,7 @@
                                        &hasFlag)) &&
       !hasFlag);
 
-  mCodebase = NS_TryToMakeImmutable(aCodebase);
-  mCodebaseImmutable = URIIsImmutable(mCodebase);
-
+  mCodebase = aCodebase;
   FinishInit(aOriginNoSuffix, aOriginAttributes);
 
   return NS_OK;
@@ -278,17 +264,8 @@
 NS_IMETHODIMP
 ContentPrincipal::GetURI(nsIURI** aURI)
 {
-  if (mCodebaseImmutable) {
-    NS_ADDREF(*aURI = mCodebase);
-    return NS_OK;
-  }
-
-  if (!mCodebase) {
-    *aURI = nullptr;
-    return NS_OK;
-  }
-
-  return NS_EnsureSafeToReturn(mCodebase, aURI);
+  NS_ADDREF(*aURI = mCodebase);
+  return NS_OK;
 }
 
 bool
@@ -344,19 +321,14 @@
     return NS_OK;
   }
 
-  if (mDomainImmutable) {
-    NS_ADDREF(*aDomain = mDomain);
-    return NS_OK;
-  }
-
-  return NS_EnsureSafeToReturn(mDomain, aDomain);
+  NS_ADDREF(*aDomain = mDomain);
+  return NS_OK;
 }
 
 NS_IMETHODIMP
 ContentPrincipal::SetDomain(nsIURI* aDomain)
 {
-  mDomain = NS_TryToMakeImmutable(aDomain);
-  mDomainImmutable = URIIsImmutable(mDomain);
+  mDomain = aDomain;
   SetHasExplicitDomain();
 
   // Recompute all wrappers between compartments using this principal and other
@@ -516,8 +488,5 @@
     return rv;
   }
 
-  // mCodebaseImmutable and mDomainImmutable will be recomputed based
-  // on the deserialized URIs in Read().
-
   return NS_OK;
 }
diff -r b52b2eb81d1e -r c10e876269a9 caps/ContentPrincipal.h
--- a/caps/ContentPrincipal.h	Sun Apr 15 16:38:45 2018 +1200
+++ b/caps/ContentPrincipal.h	Wed May 09 18:21:24 2018 +0200
@@ -47,9 +47,6 @@
 
   nsCOMPtr<nsIURI> mDomain;
   nsCOMPtr<nsIURI> mCodebase;
-  // If mCodebaseImmutable is true, mCodebase is non-null and immutable
-  bool mCodebaseImmutable;
-  bool mDomainImmutable;
 
 protected:
   virtual ~ContentPrincipal();
diff -r b52b2eb81d1e -r c10e876269a9 caps/NullPrincipal.cpp
--- a/caps/NullPrincipal.cpp	Sun Apr 15 16:38:45 2018 +1200
+++ b/caps/NullPrincipal.cpp	Wed May 09 18:21:24 2018 +0200
@@ -160,13 +160,17 @@
 NS_IMETHODIMP
 NullPrincipal::GetURI(nsIURI** aURI)
 {
-  return NS_EnsureSafeToReturn(mURI, aURI);
+  nsCOMPtr<nsIURI> uri = mURI;
+  uri.forget(aURI);
+  return NS_OK;
 }
 
 NS_IMETHODIMP
 NullPrincipal::GetDomain(nsIURI** aDomain)
 {
-  return NS_EnsureSafeToReturn(mURI, aDomain);
+  nsCOMPtr<nsIURI> uri = mURI;
+  uri.forget(aDomain);
+  return NS_OK;
 }
 
 NS_IMETHODIMP
diff -r b52b2eb81d1e -r c10e876269a9 chrome/nsChromeProtocolHandler.cpp
--- a/chrome/nsChromeProtocolHandler.cpp	Sun Apr 15 16:38:45 2018 +1200
+++ b/chrome/nsChromeProtocolHandler.cpp	Wed May 09 18:21:24 2018 +0200
@@ -97,8 +97,6 @@
     if (NS_FAILED(rv))
         return rv;
 
-    NS_TryToSetImmutable(surl);
-
     surl.forget(result);
     return NS_OK;
 }
diff -r b52b2eb81d1e -r c10e876269a9 docshell/base/nsDocShell.cpp
--- a/docshell/base/nsDocShell.cpp	Sun Apr 15 16:38:45 2018 +1200
+++ b/docshell/base/nsDocShell.cpp	Wed May 09 18:21:24 2018 +0200
@@ -1430,7 +1430,7 @@
     return false;
   }
 
-  mCurrentURI = NS_TryToMakeImmutable(aURI);
+  mCurrentURI = aURI;
 
   if (!NS_IsAboutBlank(mCurrentURI)) {
     mHasLoadedNonBlankURI = true;
@@ -5192,11 +5192,8 @@
 {
   NS_ENSURE_ARG_POINTER(aURI);
 
-  if (mCurrentURI) {
-    return NS_EnsureSafeToReturn(mCurrentURI, aURI);
-  }
-
-  *aURI = nullptr;
+  nsCOMPtr<nsIURI> uri = mCurrentURI;
+  uri.forget(aURI);
   return NS_OK;
 }
 
diff -r b52b2eb81d1e -r c10e876269a9 dom/base/nsContentUtils.cpp
--- a/dom/base/nsContentUtils.cpp	Sun Apr 15 16:38:45 2018 +1200
+++ b/dom/base/nsContentUtils.cpp	Wed May 09 18:21:24 2018 +0200
@@ -3695,9 +3695,6 @@
   NS_ASSERTION(loadGroup || IsFontTableURI(documentURI),
                ""Could not get loadgroup; onload may fire too early"");
 
-  // Make the URI immutable so people won't change it under us
-  NS_TryToSetImmutable(aURI);
-
   // XXXbz using ""documentURI"" for the initialDocumentURI is not quite
   // right, but the best we can do here...
   return imgLoader->LoadImage(aURI,                 /* uri to load */
diff -r b52b2eb81d1e -r c10e876269a9 dom/base/nsDocument.cpp
--- a/dom/base/nsDocument.cpp	Sun Apr 15 16:38:45 2018 +1200
+++ b/dom/base/nsDocument.cpp	Wed May 09 18:21:24 2018 +0200
@@ -3014,7 +3014,7 @@
 nsIDocument::SetDocumentURI(nsIURI* aURI)
 {
   nsCOMPtr<nsIURI> oldBase = GetDocBaseURI();
-  mDocumentURI = NS_TryToMakeImmutable(aURI);
+  mDocumentURI = aURI;
   nsIURI* newBase = GetDocBaseURI();
 
   bool equalBases = false;
@@ -3629,11 +3629,7 @@
     }
   }
 
-  if (aURI) {
-    mDocumentBaseURI = NS_TryToMakeImmutable(aURI);
-  } else {
-    mDocumentBaseURI = nullptr;
-  }
+  mDocumentBaseURI = aURI;
   RefreshLinkHrefs();
 }
 
diff -r b52b2eb81d1e -r c10e876269a9 dom/base/nsImageLoadingContent.cpp
--- a/dom/base/nsImageLoadingContent.cpp	Sun Apr 15 16:38:45 2018 +1200
+++ b/dom/base/nsImageLoadingContent.cpp	Wed May 09 18:21:24 2018 +0200
@@ -732,11 +732,8 @@
   nsCOMPtr<nsIURI> uri;
   if (mCurrentRequest) {
     mCurrentRequest->GetURI(getter_AddRefs(uri));
-  } else if (mCurrentURI) {
-    nsresult rv = NS_EnsureSafeToReturn(mCurrentURI, getter_AddRefs(uri));
-    if (NS_FAILED(rv)) {
-      aError.Throw(rv);
-    }
+  } else {
+    uri = mCurrentURI;
   }
 
   return uri.forget();
@@ -872,8 +869,6 @@
   NS_ENSURE_SUCCESS(rv, rv);
   // XXXbiesi fire onerror if that failed?
 
-  NS_TryToSetImmutable(imageURI);
-
   return LoadImage(imageURI, aForce, aNotify, aImageLoadType, false, doc,
                    nsIRequest::LOAD_NORMAL, aTriggeringPrincipal);
 }
diff -r b52b2eb81d1e -r c10e876269a9 dom/base/nsObjectLoadingContent.cpp
--- a/dom/base/nsObjectLoadingContent.cpp	Sun Apr 15 16:38:45 2018 +1200
+++ b/dom/base/nsObjectLoadingContent.cpp	Wed May 09 18:21:24 2018 +0200
@@ -1603,9 +1603,7 @@
                                                    codebaseStr,
                                                    thisElement->OwnerDoc(),
                                                    docBaseURI);
-    if (NS_SUCCEEDED(rv)) {
-      NS_TryToSetImmutable(newBaseURI);
-    } else {
+    if (NS_FAILED(rv)) {
       // Malformed URI
       LOG((""OBJLC [%p]: Could not parse plugin's codebase as a URI, ""
            ""will use document baseURI instead"", this));
@@ -1656,9 +1654,7 @@
       newMime = NS_LITERAL_CSTRING(""text/html"");
     }
 
-    if (NS_SUCCEEDED(rv)) {
-      NS_TryToSetImmutable(newURI);
-    } else {
+    if (NS_FAILED(rv)) {
       stateInvalid = true;
     }
   }
diff -r b52b2eb81d1e -r c10e876269a9 dom/html/nsHTMLDocument.cpp
--- a/dom/html/nsHTMLDocument.cpp	Sun Apr 15 16:38:45 2018 +1200
+++ b/dom/html/nsHTMLDocument.cpp	Wed May 09 18:21:24 2018 +0200
@@ -1041,7 +1041,6 @@
     return;
   }
 
-  NS_TryToSetImmutable(newURI);
   rv = NodePrincipal()->SetDomain(newURI);
 }
 
diff -r b52b2eb81d1e -r c10e876269a9 ipc/glue/URIParams.ipdlh
--- a/ipc/glue/URIParams.ipdlh	Sun Apr 15 16:38:45 2018 +1200
+++ b/ipc/glue/URIParams.ipdlh	Wed May 09 18:21:24 2018 +0200
@@ -16,7 +16,6 @@
   nsCString path;
   nsCString ref;
   nsCString query;
-  bool isMutable;
 };
 
 struct StandardURLSegment
@@ -43,7 +42,6 @@
   StandardURLSegment extension;
   StandardURLSegment query;
   StandardURLSegment ref;
-  bool isMutable;
   bool supportsFileURL;
 };
 
diff -r b52b2eb81d1e -r c10e876269a9 modules/libjar/nsJARURI.cpp
--- a/modules/libjar/nsJARURI.cpp	Sun Apr 15 16:38:45 2018 +1200
+++ b/modules/libjar/nsJARURI.cpp	Wed May 09 18:21:24 2018 +0200
@@ -407,8 +407,6 @@
                         aBaseURL, getter_AddRefs(mJARFile));
     if (NS_FAILED(rv)) return rv;
 
-    NS_TryToSetImmutable(mJARFile);
-
     // skip over any extra '/' chars
     while (*delim_end == '/')
         ++delim_end;
@@ -922,8 +920,6 @@
     rv = jarFile->Clone(getter_AddRefs(newJARFile));
     if (NS_FAILED(rv)) return rv;
 
-    NS_TryToSetImmutable(newJARFile);
-
     nsCOMPtr<nsIURI> newJAREntryURI;
     if (refHandlingMode == eHonorRef) {
       rv = mJAREntry->Clone(getter_AddRefs(newJAREntryURI));
@@ -949,9 +945,11 @@
 ////////////////////////////////////////////////////////////////////////////////
 
 NS_IMETHODIMP
-nsJARURI::GetInnerURI(nsIURI **uri)
+nsJARURI::GetInnerURI(nsIURI **aURI)
 {
-    return NS_EnsureSafeToReturn(mJARFile, uri);
+    nsCOMPtr<nsIURI> uri = mJARFile;
+    uri.forget(aURI);
+    return NS_OK;
 }
 
 NS_IMETHODIMP
diff -r b52b2eb81d1e -r c10e876269a9 netwerk/base/nsINetUtil.idl
--- a/netwerk/base/nsINetUtil.idl	Sun Apr 15 16:38:45 2018 +1200
+++ b/netwerk/base/nsINetUtil.idl	Wed May 09 18:21:24 2018 +0200
@@ -75,14 +75,6 @@
    */
   boolean URIChainHasFlags(in nsIURI aURI, in unsigned long aFlags);
 
-  /**
-   * Take aURI and produce an immutable version of it for the caller.  If aURI
-   * is immutable this will be aURI itself; otherwise this will be a clone,
-   * marked immutable if possible.  Passing null to this method is allowed; in
-   * that case it will return null.
-   */
-  nsIURI toImmutableURI(in nsIURI aURI);
-
   /** Escape every character with its %XX-escaped equivalent */
   const unsigned long ESCAPE_ALL = 0;
 
diff -r b52b2eb81d1e -r c10e876269a9 netwerk/base/nsIOService.cpp
--- a/netwerk/base/nsIOService.cpp	Sun Apr 15 16:38:45 2018 +1200
+++ b/netwerk/base/nsIOService.cpp	Wed May 09 18:21:24 2018 +0200
@@ -1601,21 +1601,6 @@
 }
 
 NS_IMETHODIMP
-nsIOService::ToImmutableURI(nsIURI* uri, nsIURI** result)
-{
-    if (!uri) {
-        *result = nullptr;
-        return NS_OK;
-    }
-
-    nsresult rv = NS_EnsureSafeToReturn(uri, result);
-    NS_ENSURE_SUCCESS(rv, rv);
-
-    NS_TryToSetImmutable(*result);
-    return NS_OK;
-}
-
-NS_IMETHODIMP
 nsIOService::SetManageOfflineStatus(bool aManage)
 {
     LOG((""nsIOService::SetManageOfflineStatus aManage=%d\n"", aManage));
diff -r b52b2eb81d1e -r c10e876269a9 netwerk/base/nsIStandardURL.idl
--- a/netwerk/base/nsIStandardURL.idl	Sun Apr 15 16:38:45 2018 +1200
+++ b/netwerk/base/nsIStandardURL.idl	Wed May 09 18:21:24 2018 +0200
@@ -3,7 +3,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-#include ""nsIMutable.idl""
+#include ""nsISupports.idl""
 
 interface nsIURI;
 interface nsIURIMutator;
@@ -15,7 +15,7 @@
  * some customization on how URLs are normalized.
  */
 [scriptable, builtinclass, uuid(babd6cca-ebe7-4329-967c-d6b9e33caa81)]
-interface nsIStandardURL : nsIMutable
+interface nsIStandardURL : nsISupports
 {
     /**
      * blah:foo/bar    => blah://foo/bar
diff -r b52b2eb81d1e -r c10e876269a9 netwerk/base/nsNetUtil.cpp
--- a/netwerk/base/nsNetUtil.cpp	Sun Apr 15 16:38:45 2018 +1200
+++ b/netwerk/base/nsNetUtil.cpp	Wed May 09 18:21:24 2018 +0200
@@ -2343,66 +2343,6 @@
     return NS_DoImplGetInnermostURI(nestedURI, result);
 }
 
-nsresult
-NS_EnsureSafeToReturn(nsIURI *uri, nsIURI **result)
-{
-    MOZ_ASSERT(uri, ""Must have a URI"");
-
-    // Assume mutable until told otherwise
-    bool isMutable = true;
-    nsCOMPtr<nsIMutable> mutableObj(do_QueryInterface(uri));
-    if (mutableObj) {
-        nsresult rv = mutableObj->GetMutable(&isMutable);
-        isMutable = NS_FAILED(rv) || isMutable;
-    }
-
-    if (!isMutable) {
-        NS_ADDREF(*result = uri);
-        return NS_OK;
-    }
-
-    nsresult rv = uri->Clone(result);
-    if (NS_SUCCEEDED(rv) && !*result) {
-        NS_ERROR(""nsIURI.clone contract was violated"");
-        return NS_ERROR_UNEXPECTED;
-    }
-
-    return rv;
-}
-
-void
-NS_TryToSetImmutable(nsIURI *uri)
-{
-    nsCOMPtr<nsIMutable> mutableObj(do_QueryInterface(uri));
-    if (mutableObj) {
-        mutableObj->SetMutable(false);
-    }
-}
-
-already_AddRefed<nsIURI>
-NS_TryToMakeImmutable(nsIURI *uri,
-                      nsresult *outRv /* = nullptr */)
-{
-    nsresult rv;
-    nsCOMPtr<nsINetUtil> util = do_GetNetUtil(&rv);
-
-    nsCOMPtr<nsIURI> result;
-    if (NS_SUCCEEDED(rv)) {
-        NS_ASSERTION(util, ""do_GetNetUtil lied"");
-        rv = util->ToImmutableURI(uri, getter_AddRefs(result));
-    }
-
-    if (NS_FAILED(rv)) {
-        result = uri;
-    }
-
-    if (outRv) {
-        *outRv = rv;
-    }
-
-    return result.forget();
-}
-
 already_AddRefed<nsIURI>
 NS_GetInnermostURI(nsIURI *aURI)
 {
diff -r b52b2eb81d1e -r c10e876269a9 netwerk/base/nsNetUtil.h
--- a/netwerk/base/nsNetUtil.h	Sun Apr 15 16:38:45 2018 +1200
+++ b/netwerk/base/nsNetUtil.h	Wed May 09 18:21:24 2018 +0200
@@ -794,26 +794,6 @@
 nsresult NS_ImplGetInnermostURI(nsINestedURI *nestedURI, nsIURI **result);
 
 /**
- * Helper function that ensures that |result| is a URI that's safe to
- * return.  If |uri| is immutable, just returns it, otherwise returns
- * a clone.  |uri| must not be null.
- */
-nsresult NS_EnsureSafeToReturn(nsIURI *uri, nsIURI **result);
-
-/**
- * Helper function that tries to set the argument URI to be immutable
- */
-void NS_TryToSetImmutable(nsIURI *uri);
-
-/**
- * Helper function for calling ToImmutableURI.  If all else fails, returns
- * the input URI.  The optional second arg indicates whether we had to fall
- * back to the input URI.  Passing in a null URI is ok.
- */
-already_AddRefed<nsIURI> NS_TryToMakeImmutable(nsIURI *uri,
-                                               nsresult *outRv = nullptr);
-
-/**
  * Helper function for testing whether the given URI, or any of its
  * inner URIs, has all the given protocol flags.
  */
diff -r b52b2eb81d1e -r c10e876269a9 netwerk/base/nsSimpleNestedURI.cpp
--- a/netwerk/base/nsSimpleNestedURI.cpp	Sun Apr 15 16:38:45 2018 +1200
+++ b/netwerk/base/nsSimpleNestedURI.cpp	Wed May 09 18:21:24 2018 +0200
@@ -22,7 +22,6 @@
     : mInnerURI(innerURI)
 {
     NS_ASSERTION(innerURI, ""Must have inner URI"");
-    NS_TryToSetImmutable(innerURI);
 }
 
 // nsISerializable
@@ -40,8 +39,6 @@
     nsresult rv = nsSimpleURI::ReadPrivate(aStream);
     if (NS_FAILED(rv)) return rv;
 
-    NS_ASSERTION(!mMutable, ""How did that happen?"");
-
     nsCOMPtr<nsISupports> supports;
     rv = aStream->ReadObject(true, getter_AddRefs(supports));
     if (NS_FAILED(rv)) return rv;
@@ -49,8 +46,6 @@
     mInnerURI = do_QueryInterface(supports, &rv);
     if (NS_FAILED(rv)) return rv;
 
-    NS_TryToSetImmutable(mInnerURI);
-
     return rv;
 }
 
@@ -103,19 +98,19 @@
         return false;
 
     mInnerURI = DeserializeURI(params.innerURI());
-
-    NS_TryToSetImmutable(mInnerURI);
     return true;
 }
 
 // nsINestedURI
 
 NS_IMETHODIMP
-nsSimpleNestedURI::GetInnerURI(nsIURI** uri)
+nsSimpleNestedURI::GetInnerURI(nsIURI** aURI)
 {
     NS_ENSURE_TRUE(mInnerURI, NS_ERROR_NOT_INITIALIZED);
 
-    return NS_EnsureSafeToReturn(mInnerURI, uri);
+    nsCOMPtr<nsIURI> uri = mInnerURI;
+    uri.forget(aURI);
+    return NS_OK;
 }
 
 NS_IMETHODIMP
@@ -177,7 +172,6 @@
 
     nsSimpleNestedURI* url = new nsSimpleNestedURI(innerClone);
     SetRefOnClone(url, refHandlingMode, newRef);
-    url->SetMutable(false);
 
     return url;
 }
@@ -208,9 +202,6 @@
     if (NS_FAILED(rv)) {
         return rv;
     }
-    // StartClone calls SetMutable(false) but we need the mutator clone
-    // to be mutable
-    mutator->ResetMutable();
     mutator.forget(aMutator);
     return NS_OK;
 }
diff -r b52b2eb81d1e -r c10e876269a9 netwerk/base/nsSimpleNestedURI.h
--- a/netwerk/base/nsSimpleNestedURI.h	Sun Apr 15 16:38:45 2018 +1200
+++ b/netwerk/base/nsSimpleNestedURI.h	Wed May 09 18:21:24 2018 +0200
@@ -6,11 +6,7 @@
 /**
  * URI class to be used for cases when a simple URI actually resolves to some
  * other sort of URI, with the latter being what's loaded when the load
- * happens.  All objects of this class should always be immutable, so that the
- * inner URI and this URI don't get out of sync.  The Clone() implementation
- * will guarantee this for the clone, but it's up to the protocol handlers
- * creating these URIs to ensure that in the first place.  The innerURI passed
- * to this URI will be set immutable if possible.
+ * happens.
  */
 
 #ifndef nsSimpleNestedURI_h__
@@ -100,7 +96,6 @@
         MOZ_MUST_USE NS_IMETHOD
         Finalize(nsIURI** aURI) override
         {
-            mURI->mMutable = false;
             mURI.forget(aURI);
             return NS_OK;
         }
@@ -121,13 +116,6 @@
             return NS_OK;
         }
 
-        void ResetMutable()
-        {
-            if (mURI) {
-                mURI->mMutable = true;
-            }
-        }
-
         friend class nsSimpleNestedURI;
     };
 
diff -r b52b2eb81d1e -r c10e876269a9 netwerk/base/nsSimpleURI.cpp
--- a/netwerk/base/nsSimpleURI.cpp	Sun Apr 15 16:38:45 2018 +1200
+++ b/netwerk/base/nsSimpleURI.cpp	Wed May 09 18:21:24 2018 +0200
@@ -49,8 +49,7 @@
 // nsSimpleURI methods:
 
 nsSimpleURI::nsSimpleURI()
-    : mMutable(true)
-    , mIsRefValid(false)
+    : mIsRefValid(false)
     , mIsQueryValid(false)
 {
 }
@@ -59,7 +58,7 @@
 NS_IMPL_RELEASE(nsSimpleURI)
 NS_INTERFACE_TABLE_HEAD(nsSimpleURI)
 NS_INTERFACE_TABLE(nsSimpleURI, nsIURI, nsISerializable,
-                   nsIClassInfo, nsIMutable, nsIIPCSerializableURI)
+                   nsIClassInfo, nsIIPCSerializableURI)
 NS_INTERFACE_TABLE_TO_MAP_SEGUE
   if (aIID.Equals(kThisSimpleURIImplementationCID))
     foundInterface = static_cast<nsIURI*>(this);
@@ -85,7 +84,7 @@
     bool isMutable;
     rv = aStream->ReadBoolean(&isMutable);
     if (NS_FAILED(rv)) return rv;
-    mMutable = isMutable;
+    Unused << isMutable;
 
     rv = aStream->ReadCString(mScheme);
     if (NS_FAILED(rv)) return rv;
@@ -125,7 +124,7 @@
 {
     nsresult rv;
 
-    rv = aStream->WriteBoolean(mMutable);
+    rv = aStream->WriteBoolean(false); // former mMutable
     if (NS_FAILED(rv)) return rv;
 
     rv = aStream->WriteStringZ(mScheme.get());
@@ -176,8 +175,6 @@
       params.query().SetIsVoid(true);
     }
 
-    params.isMutable() = mMutable;
-
     aParams = params;
 }
 
@@ -210,8 +207,6 @@
         mIsQueryValid = true;
     }
 
-    mMutable = params.isMutable();
-
     return true;
 }
 
@@ -293,8 +288,6 @@
 nsresult
 nsSimpleURI::SetSpecInternal(const nsACString &aSpec)
 {
-    NS_ENSURE_STATE(mMutable);
-
     nsresult rv = net_ExtractURLScheme(aSpec, mScheme);
     if (NS_FAILED(rv)) {
         return rv;
@@ -323,8 +316,6 @@
 nsresult
 nsSimpleURI::SetScheme(const nsACString &scheme)
 {
-    NS_ENSURE_STATE(mMutable);
-
     const nsPromiseFlatCString &flat = PromiseFlatCString(scheme);
     if (!net_IsValidScheme(flat)) {
         NS_WARNING(""the given url scheme contains invalid characters"");
@@ -364,8 +355,6 @@
 nsresult
 nsSimpleURI::SetUsername(const nsACString &userName)
 {
-    NS_ENSURE_STATE(mMutable);
-
     return NS_ERROR_FAILURE;
 }
 
@@ -378,8 +367,6 @@
 nsresult
 nsSimpleURI::SetPassword(const nsACString &password)
 {
-    NS_ENSURE_STATE(mMutable);
-
     return NS_ERROR_FAILURE;
 }
 
@@ -395,8 +382,6 @@
 nsresult
 nsSimpleURI::SetHostPort(const nsACString &result)
 {
-    NS_ENSURE_STATE(mMutable);
-
     return NS_ERROR_FAILURE;
 }
 
@@ -411,8 +396,6 @@
 nsresult
 nsSimpleURI::SetHost(const nsACString &host)
 {
-    NS_ENSURE_STATE(mMutable);
-
     return NS_ERROR_FAILURE;
 }
 
@@ -427,8 +410,6 @@
 nsresult
 nsSimpleURI::SetPort(int32_t port)
 {
-    NS_ENSURE_STATE(mMutable);
-
     return NS_ERROR_FAILURE;
 }
 
@@ -449,8 +430,6 @@
 nsresult
 nsSimpleURI::SetPathQueryRef(const nsACString &aPath)
 {
-    NS_ENSURE_STATE(mMutable);
-
     return SetPathQueryRefEscaped(aPath, true);
 }
 nsresult
@@ -532,8 +511,6 @@
 nsresult
 nsSimpleURI::SetRef(const nsACString &aRef)
 {
-    NS_ENSURE_STATE(mMutable);
-
     nsAutoCString ref;
     nsresult rv = NS_EscapeURL(aRef, esc_OnlyNonASCII, ref, fallible);
     if (NS_FAILED(rv)) {
@@ -677,8 +654,6 @@
     if (!url)
         return NS_ERROR_OUT_OF_MEMORY;
 
-    // Note: |url| may well have mMutable false at this point, so
-    // don't call any setter methods.
     url->mScheme = mScheme;
     url->mPath = mPath;
 
@@ -782,25 +757,6 @@
 }
 
 //----------------------------------------------------------------------------
-// nsSimpleURI::nsISimpleURI
-//----------------------------------------------------------------------------
-NS_IMETHODIMP
-nsSimpleURI::GetMutable(bool *value)
-{
-    *value = mMutable;
-    return NS_OK;
-}
-
-NS_IMETHODIMP
-nsSimpleURI::SetMutable(bool value)
-{
-    NS_ENSURE_ARG(mMutable || !value);
-
-    mMutable = value;
-    return NS_OK;
-}
-
-//----------------------------------------------------------------------------
 // nsSimpleURI::nsISizeOf
 //----------------------------------------------------------------------------
 
@@ -846,8 +802,6 @@
 nsresult
 nsSimpleURI::SetQuery(const nsACString& aQuery)
 {
-    NS_ENSURE_STATE(mMutable);
-
     nsAutoCString query;
     nsresult rv = NS_EscapeURL(aQuery, esc_OnlyNonASCII, query, fallible);
     if (NS_FAILED(rv)) {
diff -r b52b2eb81d1e -r c10e876269a9 netwerk/base/nsSimpleURI.h
--- a/netwerk/base/nsSimpleURI.h	Sun Apr 15 16:38:45 2018 +1200
+++ b/netwerk/base/nsSimpleURI.h	Wed May 09 18:21:24 2018 +0200
@@ -11,7 +11,6 @@
 #include ""nsISerializable.h""
 #include ""nsString.h""
 #include ""nsIClassInfo.h""
-#include ""nsIMutable.h""
 #include ""nsISizeOf.h""
 #include ""nsIIPCSerializableURI.h""
 #include ""nsIURIMutator.h""
@@ -31,7 +30,6 @@
     : public nsIURI
     , public nsISerializable
     , public nsIClassInfo
-    , public nsIMutable
     , public nsISizeOf
     , public nsIIPCSerializableURI
 {
@@ -44,7 +42,6 @@
     NS_DECL_NSIURI
     NS_DECL_NSISERIALIZABLE
     NS_DECL_NSICLASSINFO
-    NS_DECL_NSIMUTABLE
     NS_DECL_NSIIPCSERIALIZABLEURI
 
     static already_AddRefed<nsSimpleURI> From(nsIURI* aURI);
diff -r b52b2eb81d1e -r c10e876269a9 netwerk/base/nsStandardURL.cpp
--- a/netwerk/base/nsStandardURL.cpp	Sun Apr 15 16:38:45 2018 +1200
+++ b/netwerk/base/nsStandardURL.cpp	Wed May 09 18:21:24 2018 +0200
@@ -79,16 +79,6 @@
 constexpr ASCIIMaskArray sInvalidHostChars = CreateASCIIMask(TestForInvalidHostCharacters);
 
 //----------------------------------------------------------------------------
-
-#define ENSURE_MUTABLE() \
-  PR_BEGIN_MACRO \
-    if (!mMutable) { \
-        NS_WARNING(""attempt to modify an immutable nsStandardURL""); \
-        return NS_ERROR_ABORT; \
-    } \
-  PR_END_MACRO
-
-//----------------------------------------------------------------------------
 // nsStandardURL::nsSegmentEncoder
 //----------------------------------------------------------------------------
 
@@ -181,7 +171,6 @@
     , mPort(-1)
     , mDisplayHost(nullptr)
     , mURLType(URLTYPE_STANDARD)
-    , mMutable(true)
     , mSupportsFileURL(aSupportsFileURL)
     , mCheckedIfHostA(false)
 {
@@ -1205,7 +1194,6 @@
     NS_INTERFACE_MAP_ENTRY(nsIStandardURL)
     NS_INTERFACE_MAP_ENTRY(nsISerializable)
     NS_INTERFACE_MAP_ENTRY(nsIClassInfo)
-    NS_INTERFACE_MAP_ENTRY(nsIMutable)
     NS_INTERFACE_MAP_ENTRY(nsIIPCSerializableURI)
     NS_INTERFACE_MAP_ENTRY(nsISensitiveInfoHiddenURI)
     // see nsStandardURL::Equals
@@ -1502,8 +1490,6 @@
 nsStandardURL::SetSpecWithEncoding(const nsACString &input,
                                    const Encoding* encoding)
 {
-    ENSURE_MUTABLE();
-
     const nsPromiseFlatCString &flat = PromiseFlatCString(input);
     LOG((""nsStandardURL::SetSpec [spec=%s]\n"", flat.get()));
 
@@ -1589,8 +1575,6 @@
 nsresult
 nsStandardURL::SetScheme(const nsACString &input)
 {
-    ENSURE_MUTABLE();
-
     const nsPromiseFlatCString &scheme = PromiseFlatCString(input);
 
     LOG((""nsStandardURL::SetScheme [scheme=%s]\n"", scheme.get()));
@@ -1633,8 +1617,6 @@
 nsresult
 nsStandardURL::SetUserPass(const nsACString &input)
 {
-    ENSURE_MUTABLE();
-
     const nsPromiseFlatCString &userpass = PromiseFlatCString(input);
 
     LOG((""nsStandardURL::SetUserPass [userpass=%s]\n"", userpass.get()));
@@ -1743,8 +1725,6 @@
 nsresult
 nsStandardURL::SetUsername(const nsACString &input)
 {
-    ENSURE_MUTABLE();
-
     const nsPromiseFlatCString &username = PromiseFlatCString(input);
 
     LOG((""nsStandardURL::SetUsername [username=%s]\n"", username.get()));
@@ -1793,8 +1773,6 @@
 nsresult
 nsStandardURL::SetPassword(const nsACString &input)
 {
-    ENSURE_MUTABLE();
-
     const nsPromiseFlatCString &password = PromiseFlatCString(input);
 
     auto clearedPassword = MakeScopeExit([&password, this]() {
@@ -1881,8 +1859,6 @@
 nsresult
 nsStandardURL::SetHostPort(const nsACString &aValue)
 {
-    ENSURE_MUTABLE();
-
     // We cannot simply call nsIURI::SetHost because that would treat the name as
     // an IPv6 address (like http:://[server:443]/).  We also cannot call
     // nsIURI::SetHostPort because that isn't implemented.  Sadfaces.
@@ -1950,8 +1926,6 @@
 nsresult
 nsStandardURL::SetHost(const nsACString &input)
 {
-    ENSURE_MUTABLE();
-
     const nsPromiseFlatCString &hostname = PromiseFlatCString(input);
 
     nsACString::const_iterator start, end;
@@ -2058,8 +2032,6 @@
 nsresult
 nsStandardURL::SetPort(int32_t port)
 {
-    ENSURE_MUTABLE();
-
     LOG((""nsStandardURL::SetPort [port=%d]\n"", port));
 
     if ((port == mPort) || (mPort == -1 && port == mDefaultPort))
@@ -2097,7 +2069,6 @@
 void
 nsStandardURL::ReplacePortInSpec(int32_t aNewPort)
 {
-    MOZ_ASSERT(mMutable, ""Caller should ensure we're mutable"");
     NS_ASSERTION(aNewPort != mDefaultPort || mDefaultPort == -1,
                  ""Caller should check its passed-in value and pass -1 instead of ""
                  ""mDefaultPort, to avoid encoding default port into mSpec"");
@@ -2132,8 +2103,6 @@
 nsresult
 nsStandardURL::SetPathQueryRef(const nsACString &input)
 {
-    ENSURE_MUTABLE();
-
     const nsPromiseFlatCString &path = PromiseFlatCString(input);
     LOG((""nsStandardURL::SetPathQueryRef [path=%s]\n"", path.get()));
 
@@ -2363,7 +2332,6 @@
     mRef = source->mRef;
     mURLType = source->mURLType;
     mParser = source->mParser;
-    mMutable = true;
     mSupportsFileURL = source->mSupportsFileURL;
     mCheckedIfHostA = source->mCheckedIfHostA;
     mDisplayHost = source->mDisplayHost;
@@ -2780,8 +2748,6 @@
 nsresult
 nsStandardURL::SetFilePath(const nsACString &input)
 {
-    ENSURE_MUTABLE();
-
     const nsPromiseFlatCString &flat = PromiseFlatCString(input);
     const char *filepath = flat.get();
 
@@ -2873,8 +2839,6 @@
 nsStandardURL::SetQueryWithEncoding(const nsACString &input,
                                     const Encoding* encoding)
 {
-    ENSURE_MUTABLE();
-
     const nsPromiseFlatCString &flat = PromiseFlatCString(input);
     const char *query = flat.get();
 
@@ -2949,8 +2913,6 @@
 nsresult
 nsStandardURL::SetRef(const nsACString &input)
 {
-    ENSURE_MUTABLE();
-
     const nsPromiseFlatCString &flat = PromiseFlatCString(input);
     const char *ref = flat.get();
 
@@ -3012,8 +2974,6 @@
 nsresult
 nsStandardURL::SetFileNameInternal(const nsACString &input)
 {
-    ENSURE_MUTABLE();
-
     const nsPromiseFlatCString &flat = PromiseFlatCString(input);
     const char *filename = flat.get();
 
@@ -3196,8 +3156,6 @@
 nsresult
 nsStandardURL::SetFile(nsIFile *file)
 {
-    ENSURE_MUTABLE();
-
     NS_ENSURE_ARG_POINTER(file);
 
     nsresult rv;
@@ -3239,8 +3197,6 @@
                     const char *charset,
                     nsIURI *baseURI)
 {
-    ENSURE_MUTABLE();
-
     if (spec.Length() > (uint32_t) net_GetURLMaxLength() ||
         defaultPort > std::numeric_limits<uint16_t>::max()) {
         return NS_ERROR_MALFORMED_URI;
@@ -3292,8 +3248,6 @@
 nsresult
 nsStandardURL::SetDefaultPort(int32_t aNewDefaultPort)
 {
-    ENSURE_MUTABLE();
-
     InvalidateCache();
 
     // should never be more than 16 bit
@@ -3313,22 +3267,6 @@
     return NS_OK;
 }
 
-NS_IMETHODIMP
-nsStandardURL::GetMutable(bool *value)
-{
-    *value = mMutable;
-    return NS_OK;
-}
-
-NS_IMETHODIMP
-nsStandardURL::SetMutable(bool value)
-{
-    NS_ENSURE_ARG(mMutable || !value);
-
-    mMutable = value;
-    return NS_OK;
-}
-
 //----------------------------------------------------------------------------
 // nsStandardURL::nsISerializable
 //----------------------------------------------------------------------------
@@ -3423,7 +3361,7 @@
     bool isMutable;
     rv = stream->ReadBoolean(&isMutable);
     if (NS_FAILED(rv)) return rv;
-    mMutable = isMutable;
+    Unused << isMutable;
 
     bool supportsFileURL;
     rv = stream->ReadBoolean(&supportsFileURL);
@@ -3517,7 +3455,8 @@
     rv = NS_WriteOptionalStringZ(stream, EmptyCString().get());
     if (NS_FAILED(rv)) return rv;
 
-    rv = stream->WriteBoolean(mMutable);
+    // former mMutable
+    rv = stream->WriteBoolean(false);
     if (NS_FAILED(rv)) return rv;
 
     rv = stream->WriteBoolean(mSupportsFileURL);
@@ -3588,7 +3527,6 @@
     params.extension() = ToIPCSegment(mExtension);
     params.query() = ToIPCSegment(mQuery);
     params.ref() = ToIPCSegment(mRef);
-    params.isMutable() = !!mMutable;
     params.supportsFileURL() = !!mSupportsFileURL;
     // mDisplayHost is just a cache that can be recovered as needed.
 
@@ -3641,7 +3579,6 @@
     NS_ENSURE_TRUE(FromIPCSegment(mSpec, params.query(), mQuery), false);
     NS_ENSURE_TRUE(FromIPCSegment(mSpec, params.ref(), mRef), false);
 
-    mMutable = params.isMutable();
     mSupportsFileURL = params.supportsFileURL();
 
     nsresult rv = CheckIfHostIsAscii();
diff -r b52b2eb81d1e -r c10e876269a9 netwerk/base/nsStandardURL.h
--- a/netwerk/base/nsStandardURL.h	Sun Apr 15 16:38:45 2018 +1200
+++ b/netwerk/base/nsStandardURL.h	Wed May 09 18:21:24 2018 +0200
@@ -65,7 +65,6 @@
     NS_DECL_NSISTANDARDURL
     NS_DECL_NSISERIALIZABLE
     NS_DECL_NSICLASSINFO
-    NS_DECL_NSIMUTABLE
     NS_DECL_NSIIPCSERIALIZABLEURI
     NS_DECL_NSISENSITIVEINFOHIDDENURI
 
@@ -300,7 +299,6 @@
     };
 
     uint32_t mURLType         : 2; // nsIStandardURL::URLTYPE_xxx
-    uint32_t mMutable         : 1; // nsIStandardURL::mutable
     uint32_t mSupportsFileURL : 1; // QI to nsIFileURL?
     uint32_t mCheckedIfHostA  : 1; // If set to true, it means either that
                                    // mDisplayHost has a been initialized, or
diff -r b52b2eb81d1e -r c10e876269a9 netwerk/protocol/about/nsAboutProtocolHandler.cpp
--- a/netwerk/protocol/about/nsAboutProtocolHandler.cpp	Sun Apr 15 16:38:45 2018 +1200
+++ b/netwerk/protocol/about/nsAboutProtocolHandler.cpp	Wed May 09 18:21:24 2018 +0200
@@ -160,9 +160,6 @@
         NS_ENSURE_SUCCESS(rv, rv);
     }
 
-    // We don't want to allow mutation, since it would allow safe and
-    // unsafe URIs to change into each other...
-    NS_TryToSetImmutable(url);
     url.swap(*result);
     return NS_OK;
 }
@@ -325,7 +322,6 @@
         return rv;
     }
 
-    NS_TryToSetImmutable(*result);
     return NS_OK;
 }
 
@@ -444,7 +440,6 @@
 
     nsNestedAboutURI* url = new nsNestedAboutURI(innerClone, mBaseURI);
     SetRefOnClone(url, aRefHandlingMode, aNewRef);
-    url->SetMutable(false);
 
     return url;
 }
@@ -464,9 +459,6 @@
     if (NS_FAILED(rv)) {
         return rv;
     }
-    // StartClone calls SetMutable(false) but we need the mutator clone
-    // to be mutable
-    mutator->ResetMutable();
     mutator.forget(aMutator);
     return NS_OK;
 }
diff -r b52b2eb81d1e -r c10e876269a9 netwerk/protocol/viewsource/nsViewSourceHandler.cpp
--- a/netwerk/protocol/viewsource/nsViewSourceHandler.cpp	Sun Apr 15 16:38:45 2018 +1200
+++ b/netwerk/protocol/viewsource/nsViewSourceHandler.cpp	Wed May 09 18:21:24 2018 +0200
@@ -105,10 +105,6 @@
         return rv;
     }
 
-    // Make the URI immutable so it's impossible to get it out of sync
-    // with its inner URI.
-    NS_TryToSetImmutable(uri);
-
     uri.swap(*aResult);
     return rv;
 }
diff -r b52b2eb81d1e -r c10e876269a9 netwerk/test/unit/test_1351443-missing-NewChannel2.js
--- a/netwerk/test/unit/test_1351443-missing-NewChannel2.js	Sun Apr 15 16:38:45 2018 +1200
+++ b/netwerk/test/unit/test_1351443-missing-NewChannel2.js	Wed May 09 18:21:24 2018 +0200
@@ -17,7 +17,6 @@
                .createInstance(Ci.nsIURIMutator)
                .setSpec(this.scheme + "":dummy"")
                .finalize();
-  this.uri.QueryInterface(Ci.nsIMutable).mutable = false;
 }
 
 ProtocolHandler.prototype = {
diff -r b52b2eb81d1e -r c10e876269a9 netwerk/test/unit/test_bug894586.js
--- a/netwerk/test/unit/test_bug894586.js	Sun Apr 15 16:38:45 2018 +1200
+++ b/netwerk/test/unit/test_bug894586.js	Wed May 09 18:21:24 2018 +0200
@@ -15,7 +15,6 @@
                .createInstance(Ci.nsIURIMutator)
                .setSpec(this.scheme + "":dummy"")
                .finalize();
-  this.uri.QueryInterface(Ci.nsIMutable).mutable = false;
 }
 
 ProtocolHandler.prototype = {
","diff -r 9d7dd73f70eb -r 56888fc83da3 caps/ContentPrincipal.cpp
--- a/caps/ContentPrincipal.cpp	Mon Jun 21 12:01:44 2021 +0000
+++ b/caps/ContentPrincipal.cpp	Mon Jun 21 12:03:46 2021 +0000
@@ -263,7 +263,7 @@
 
 NS_IMETHODIMP
 ContentPrincipal::GetURI(nsIURI** aURI) {
-  NS_ADDREF(*aURI = mURI);
+  *aURI = do_AddRef(mURI).take();
   return NS_OK;
 }
 
",1448058,c10e876269a946c970da95bbd9f8063f3fd5f364,"Bug 1448058 - Remove nsIMutable from URI implementations r=mayhemer

* Also removes NS_TryToMakeImmutable, NS_TryToSetImmutable, URIIsImmutable
* NS_EnsureSafeToReturn, nsINetUtil.toImmutableURI

MozReview-Commit-ID: 5eFtFm2CQt7",1570786,"Bug 1570786 - Avoid ContentPrincipal::GetURI null deref r=necko-reviewers,kershaw

Differential Revision: https://phabricator.services.mozilla.com/D117903",2018-05-09T18:21:00+02:00,Remove nsIMutable from URI implementations,"Since URI implementations are now immutable, there is no need for objects to implement the nsIMutable interface.",[@ mozilla::ContentPrincipal::GetURI ] null deref,"Open browser console and run

```js
Cc[""@mozilla.org/principal;1""].createInstance(Ci.nsIPrincipal).URI
```

Expected: it returns `null`
Actual: browser crashes (null deref)

Regression window: https://hg.mozilla.org/mozilla-central/pushloghtml?fromchange=96b37ba12225d580f2b201d26915f88c5cb0d8a6&tochange=aabfe960ab59fea2e85896b1f8050786e16ab23b

Probably bug 1448058"
5db35189448c8f2bcfdf735be8f78be05757840c,2019-08-02T07:04:00+09:00,"diff -r c27a6d5810fe -r 53dc7b418090 Makefile.in
--- a/Makefile.in	Wed Jul 31 09:12:37 2019 +0000
+++ b/Makefile.in	Tue Jul 30 15:35:12 2019 +0000
@@ -159,8 +159,13 @@
 
 ifdef MOZ_ANDROID_FAT_AAR_ARCHITECTURES
 recurse_android-fat-aar-artifact:
-	$(call py_action,fat_aar,$(MOZ_ANDROID_FAT_AAR_ARCHITECTURES) --distdir $(abspath $(DIST)/fat-aar))
-endif # MOZ_ANDROID_FAT_AAR_ARCHITECTURES
+	$(call py_action,fat_aar,\
+    $(if $(MOZ_ANDROID_FAT_AAR_ARMEABI_V7A),--armeabi-v7a $(MOZ_ANDROID_FAT_AAR_ARMEABI_V7A)) \
+    $(if $(MOZ_ANDROID_FAT_AAR_ARM64_V8A),--arm64-v8a $(MOZ_ANDROID_FAT_AAR_ARM64_V8A)) \
+    $(if $(MOZ_ANDROID_FAT_AAR_X86),--x86 $(MOZ_ANDROID_FAT_AAR_X86)) \
+    $(if $(MOZ_ANDROID_FAT_AAR_X86_64),--x86-64 $(MOZ_ANDROID_FAT_AAR_X86_64)) \
+    --distdir $(abspath $(DIST)/fat-aar))
+endif
 
 ifdef MOZ_WIDGET_TOOLKIT
 ifdef ENABLE_TESTS
diff -r c27a6d5810fe -r 53dc7b418090 mobile/android/mach_commands.py
--- a/mobile/android/mach_commands.py	Wed Jul 31 09:12:37 2019 +0000
+++ b/mobile/android/mach_commands.py	Tue Jul 30 15:35:12 2019 +0000
@@ -9,8 +9,6 @@
 import os
 import json
 
-from zipfile import ZipFile
-
 import mozpack.path as mozpath
 
 from mozbuild.base import (
@@ -401,14 +399,7 @@
             self.substs['GRADLE_ANDROID_ARCHIVE_GECKOVIEW_TASKS'] + args,
             verbose=True)
 
-        if ret != 0:
-            return ret
-
-        # TODO Bug 1563711 - Remove target.maven.zip
-        # The zip archive is passed along in CI to ship geckoview onto a maven repo
-        _craft_maven_zip_archive(self.topobjdir)
-
-        return 0
+        return ret
 
     @SubCommand('android', 'build-geckoview_example',
                 """"""Build geckoview_example """""")
@@ -706,26 +697,6 @@
         return 0
 
 
-def _get_maven_archive_abs_and_relative_paths(maven_folder):
-    for subdir, _, files in os.walk(maven_folder):
-        for file in files:
-            full_path = os.path.join(subdir, file)
-            relative_path = os.path.relpath(full_path, maven_folder)
-
-            # maven-metadata is intended to be generated on the real maven server
-            if 'maven-metadata.xml' not in relative_path:
-                yield full_path, relative_path
-
-
-def _craft_maven_zip_archive(topobjdir):
-    geckoview_folder = os.path.join(topobjdir, 'gradle/build/mobile/android/geckoview')
-    maven_folder = os.path.join(geckoview_folder, 'maven')
-
-    with ZipFile(os.path.join(geckoview_folder, 'target.maven.zip'), 'w') as target_zip:
-        for abs, rel in _get_maven_archive_abs_and_relative_paths(maven_folder):
-            target_zip.write(abs, arcname=rel)
-
-
 @CommandProvider
 class AndroidEmulatorCommands(MachCommandBase):
     """"""
diff -r c27a6d5810fe -r 53dc7b418090 python/mozbuild/mozbuild/action/fat_aar.py
--- a/python/mozbuild/mozbuild/action/fat_aar.py	Wed Jul 31 09:12:37 2019 +0000
+++ b/python/mozbuild/mozbuild/action/fat_aar.py	Tue Jul 30 15:35:12 2019 +0000
@@ -10,8 +10,6 @@
 from __future__ import absolute_import, unicode_literals, print_function
 
 import argparse
-import buildconfig
-import subprocess
 import sys
 
 from collections import (
@@ -29,38 +27,9 @@
 import mozpack.path as mozpath
 
 
-def _download_zips(distdir, architectures):
-    # The mapping from Android CPU architecture to TC job is defined here, and the TC index
-    # lookup is mediated by python/mozbuild/mozbuild/artifacts.py and
-    # python/mozbuild/mozbuild/artifact_builds.py.
-    jobs = {
-        'arm64-v8a': 'android-aarch64-opt',
-        'armeabi-v7a': 'android-api-16-opt',
-        'x86': 'android-x86-opt',
-        'x86_64': 'android-x86_64-opt',
-    }
-
-    for arch in architectures:
-        # It's unfortunate that we must couple tightly, but that's the current API for
-        # dispatching.  In automation, MOZ_ARTIFACT_TASK* environment variables will ensure
-        # that the correct tasks are chosen as install sources.
-        subprocess.check_call([sys.executable, mozpath.join(buildconfig.topsrcdir, 'mach'),
-                               'artifact', 'install',
-                               '--job', jobs[arch],
-                               '--distdir', mozpath.join(distdir, 'input', arch),
-                               '--no-tests', '--no-process', '--maven-zip'])
-
-
-def fat_aar(distdir, architectures=[],
-            no_download=False, no_process=False, no_compatibility_check=False,
-            rewrite_old_archives=False):
-    if not no_download:
-        _download_zips(distdir, architectures)
-    else:
-        print('Not downloading architecture-specific artifact Maven zips.')
-
+def fat_aar(distdir, aars_paths, no_process=False, no_compatibility_check=False):
     if no_process:
-        print('Not processing architecture-specific artifact Maven zips.')
+        print('Not processing architecture-specific artifact Maven AARs.')
         return 0
 
     # Map {filename: {fingerprint: [arch1, arch2, ...]}}.
@@ -69,7 +38,7 @@
     # Collect multi-architecture inputs to the fat AAR.
     copier = FileCopier()
 
-    for arch in architectures:
+    for arch, aar_path in aars_paths.items():
         # Map old non-architecture-specific path to new architecture-specific path.
         old_rewrite_map = {
             'greprefs.js': '{}/greprefs.js'.format(arch),
@@ -80,16 +49,7 @@
         arch_prefs = set(old_rewrite_map.values())
         missing_arch_prefs |= set(arch_prefs)
 
-        path = mozpath.join(distdir, 'input', arch, 'target.maven.zip')
-
-        aars = list(JarFinder(path, JarReader(path)).find('**/geckoview-*.aar'))
-        if len(aars) != 1:
-            raise ValueError('Maven zip ""{path}"" with more than one candidate AAR found: {aars}'
-                             .format(path=path, aars=tuple(sorted(p for p, _ in aars))))
-
-        [aar_path, aar_file] = aars[0]
-
-        jar_finder = JarFinder(aar_file.file.filename, JarReader(fileobj=aar_file.open()))
+        jar_finder = JarFinder(aar_path, JarReader(aar_path))
         for path, fileobj in UnpackFinder(jar_finder):
             # Native libraries go straight through.
             if mozpath.match(path, 'jni/**'):
@@ -98,14 +58,6 @@
             elif path in arch_prefs:
                 copier.add(path, fileobj)
 
-            elif rewrite_old_archives and path in old_rewrite_map:
-                # Ease testing during transition by allowing old omnijars that don't have
-                # architecture-specific files yet.
-                new_path = old_rewrite_map[path]
-                print('Rewrote old path ""{path}"" to new path ""{new_path}""'.format(
-                    path=path, new_path=new_path))
-                copier.add(new_path, fileobj)
-
             elif path in ('classes.jar', 'annotations.zip'):
                 # annotations.zip differs due to timestamps, but the contents should not.
 
@@ -172,36 +124,49 @@
     if not no_compatibility_check and (missing_arch_prefs or not_allowed):
         return 1
 
-    copier.copy(mozpath.join(distdir, 'output'))
+    output_dir = mozpath.join(distdir, 'output')
+    copier.copy(output_dir)
 
     return 0
 
 
+_ALL_ARCHS = ('armeabi-v7a', 'arm64-v8a', 'x86_64', 'x86')
+
+
 def main(argv):
-    description = '''Fetch and unpack architecture-specific Maven zips, verify cross-architecture
+    description = '''Unpack architecture-specific Maven AARs, verify cross-architecture
 compatibility, and ready inputs to an Android multi-architecture fat AAR build.'''
 
     parser = argparse.ArgumentParser(description=description)
-    parser.add_argument('--no-download', action='store_true',
-                        help='Do not fetch Maven zips.')
     parser.add_argument('--no-process', action='store_true',
-                        help='Do not process Maven zips.')
+                        help='Do not process Maven AARs.')
     parser.add_argument('--no-compatibility-check', action='store_true',
-                        help='Do not fail if Maven zips are not compatible.')
-    parser.add_argument('--rewrite-old-archives', action='store_true',
-                        help='Rewrite Maven zips containing omnijars that do not contain '
-                             'architecture-specific preference files.')
+                        help='Do not fail if Maven AARs are not compatible.')
     parser.add_argument('--distdir', required=True)
-    parser.add_argument('architectures', nargs='+',
-                        choices=('armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'))
+
+    for arch in _ALL_ARCHS:
+        command_line_flag = arch.replace('_', '-')
+        parser.add_argument('--{}'.format(command_line_flag), dest=arch)
 
     args = parser.parse_args(argv)
 
+    args_dict = vars(args)
+
+    aars_paths = {
+        arch: args_dict.get(arch)
+        for arch in _ALL_ARCHS
+        if args_dict.get(arch)
+    }
+
+    if not aars_paths:
+        raise ValueError('You must provide at least one AAR file!')
+
     return fat_aar(
-        args.distdir, architectures=args.architectures,
-        no_download=args.no_download, no_process=args.no_process,
-        no_compatibility_check=args.no_compatibility_check,
-        rewrite_old_archives=args.rewrite_old_archives)
+        args.distdir,
+        aars_paths,
+        no_process=args.no_process,
+        no_compatibility_check=args.no_compatibility_check
+    )
 
 
 if __name__ == '__main__':
diff -r c27a6d5810fe -r 53dc7b418090 taskcluster/ci/build-fat-aar/kind.yml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/taskcluster/ci/build-fat-aar/kind.yml	Tue Jul 30 15:35:12 2019 +0000
@@ -0,0 +1,122 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+---
+loader: taskgraph.loader.transform:loader
+
+kind-dependencies:
+    - build
+    - toolchain
+
+transforms:
+    - taskgraph.transforms.build:transforms
+    - taskgraph.transforms.build_attrs:transforms
+    - taskgraph.transforms.build_lints:transforms
+    - taskgraph.transforms.build_fat_aar:transforms
+    - taskgraph.transforms.use_toolchains:transforms
+    - taskgraph.transforms.job:transforms
+    - taskgraph.transforms.task:transforms
+
+job-defaults:
+    attributes:
+        artifact_map: taskcluster/taskgraph/manifests/fennec_geckoview.yml
+    index:
+        product: mobile
+    fetches: {}   # See build_fat_aar transform
+    worker-type: b-linux
+    worker:
+        docker-image: {in-tree: android-build}
+        max-run-time: 7200
+        env:
+            # Online in order to download the per-architecture AARs.
+            GRADLE_USER_HOME: ""/builds/worker/workspace/build/src/mobile/android/gradle/dotgradle-online""
+            TOOLTOOL_MANIFEST: ""mobile/android/config/tooltool-manifests/android/releng.manifest""
+            MOZ_ANDROID_FAT_AAR_ARCHITECTURES: ""armeabi-v7a,arm64-v8a,x86,x86_64""
+        artifacts:
+            - name: public/build/maven
+              path: /builds/worker/workspace/build/src/obj-firefox/gradle/build/mobile/android/geckoview/maven/
+              type: directory
+            - name: public/build
+              path: /builds/worker/artifacts/
+              type: directory
+    run:
+        using: mozharness
+        script: ""mozharness/scripts/fx_desktop_build.py""
+        secrets: true
+        mozconfig-variant: null
+        tooltool-downloads: internal
+        custom-build-variant-cfg: api-16
+        # Note: These settings are only honored by nightly (i.e. shipping) builds
+        update-channel:
+            by-release-type:
+                nightly: nightly
+                nightly-oak: nightly-oak
+                beta:
+                    by-shipping-product:
+                        devedition: aurora
+                        default: beta
+                release.*: release
+                esr.*: esr
+                default: null
+    toolchains:
+        - android-gradle-dependencies
+        - android-ndk-linux
+        - android-sdk-linux
+        - linux64-clang
+        - linux64-rust-android
+        - linux64-rust-size
+        - linux64-cbindgen
+        - linux64-nasm
+        - linux64-node
+
+jobs:
+    android-geckoview-fat-aar/opt:
+        description: ""Android GeckoView multi-architecture fat AAR Opt""
+        index:
+            job-name: android-geckoview-fat-aar-opt
+        treeherder:
+            platform: android-4-0-geckoview-fat-aar/opt
+            symbol: Bgv
+        dependencies:
+            android-x86-opt: build-android-x86/opt
+            android-x86_64-opt: build-android-x86_64/opt
+            android-api-16-opt: build-android-api-16/opt
+            android-aarch64-opt: build-android-aarch64/opt
+        worker:
+            env:
+                PERFHERDER_EXTRA_OPTIONS: android-geckoview-fat-aar-opt
+                USE_ARTIFACT: '1'
+                MOZ_ARTIFACT_TASK: {task-reference: '<android-api-16-opt>'}
+        run:
+            actions: [get-secrets, build]
+            config: [""builds/releng_base_android_64_builds.py""]
+        toolchains:
+            - linux64-sccache
+
+    android-geckoview-fat-aar-nightly/opt:
+        description: ""Android GeckoView multi-architecture fat AAR Nightly""
+        attributes:
+            nightly: true
+            enable-full-crashsymbols: true
+            disable-push-apk: true
+        shipping-phase: build
+        shipping-product: fennec
+        index:
+            job-name: android-geckoview-fat-aar-nightly
+            type: nightly-with-multi-l10n
+        treeherder:
+            platform: android-4-0-geckoview-fat-aar/opt
+            symbol: Ngv
+        dependencies:
+            android-x86-nightly: build-android-x86-nightly/opt
+            android-x86_64-nightly: build-android-x86_64-nightly/opt
+            android-api-16-nightly: build-android-api-16-nightly/opt
+            android-aarch64-nightly: build-android-aarch64-nightly/opt
+        worker:
+            env:
+                PERFHERDER_EXTRA_OPTIONS: android-geckoview-fat-aar-nightly
+        run:
+            actions: [get-secrets, build, multi-l10n]
+            config:
+                - builds/releng_base_android_64_builds.py
+                - taskcluster_nightly.py
diff -r c27a6d5810fe -r 53dc7b418090 taskcluster/ci/build-signing/kind.yml
--- a/taskcluster/ci/build-signing/kind.yml	Wed Jul 31 09:12:37 2019 +0000
+++ b/taskcluster/ci/build-signing/kind.yml	Tue Jul 30 15:35:12 2019 +0000
@@ -12,3 +12,4 @@
 
 kind-dependencies:
     - build
+    - build-fat-aar
diff -r c27a6d5810fe -r 53dc7b418090 taskcluster/ci/build/android.yml
--- a/taskcluster/ci/build/android.yml	Wed Jul 31 09:12:37 2019 +0000
+++ b/taskcluster/ci/build/android.yml	Tue Jul 30 15:35:12 2019 +0000
@@ -13,10 +13,6 @@
         env:
             GRADLE_USER_HOME: ""/builds/worker/workspace/build/src/mobile/android/gradle/dotgradle-offline""
         artifacts:
-            # TODO Bug 1563711 - Remove target.maven.zip
-            - name: public/build/target.maven.zip
-              path: /builds/worker/workspace/build/src/obj-firefox/gradle/build/mobile/android/geckoview/target.maven.zip
-              type: file
             - name: public/build/maven
               path: /builds/worker/workspace/build/src/obj-firefox/gradle/build/mobile/android/geckoview/maven/
               type: directory
@@ -515,74 +511,3 @@
         custom-build-variant-cfg: x86_64-debug
     toolchains:
         - linux64-sccache
-
-android-geckoview-fat-aar/opt:
-    description: ""Android GeckoView multi-architecture fat AAR Opt""
-    index:
-        job-name: android-geckoview-fat-aar-opt
-    treeherder:
-        platform: android-4-0-geckoview-fat-aar/opt
-        symbol: Bgv
-    worker-type: b-linux
-    dependencies:
-        android-x86-opt: build-android-x86/opt
-        android-x86_64-opt: build-android-x86_64/opt
-        android-api-16-opt: build-android-api-16/opt
-        android-aarch64-opt: build-android-aarch64/opt
-    worker:
-        env:
-            # Online in order to download the per-architecture AARs.
-            GRADLE_USER_HOME: ""/builds/worker/workspace/build/src/mobile/android/gradle/dotgradle-online""
-            TOOLTOOL_MANIFEST: ""mobile/android/config/tooltool-manifests/android/releng.manifest""
-            PERFHERDER_EXTRA_OPTIONS: android-geckoview-fat-aar-opt
-            MOZ_ANDROID_FAT_AAR_ARCHITECTURES: 'armeabi-v7a,arm64-v8a,x86,x86_64'
-            USE_ARTIFACT: '1'
-            MOZ_ARTIFACT_TASK: {task-reference: '<android-api-16-opt>'}
-            MOZ_ARTIFACT_TASK_ANDROID_API_16_OPT: {task-reference: '<android-api-16-opt>'}
-            MOZ_ARTIFACT_TASK_ANDROID_AARCH64_OPT: {task-reference: '<android-aarch64-opt>'}
-            MOZ_ARTIFACT_TASK_ANDROID_X86_OPT: {task-reference: '<android-x86-opt>'}
-            MOZ_ARTIFACT_TASK_ANDROID_X86_64_OPT: {task-reference: '<android-x86_64-opt>'}
-    run:
-        actions: [get-secrets, build]
-        config: [""builds/releng_base_android_64_builds.py""]
-        custom-build-variant-cfg: api-16
-    toolchains:
-        - linux64-sccache
-
-android-geckoview-fat-aar-nightly/opt:
-    description: ""Android GeckoView multi-architecture fat AAR Nightly""
-    attributes:
-        nightly: true
-        enable-full-crashsymbols: true
-        disable-push-apk: true
-    shipping-phase: build
-    shipping-product: fennec
-    index:
-        job-name: android-geckoview-fat-aar-nightly
-        type: nightly-with-multi-l10n
-    treeherder:
-        platform: android-4-0-geckoview-fat-aar/opt
-        symbol: Ngv
-    worker-type: b-linux
-    dependencies:
-        android-x86-opt: build-android-x86-nightly/opt
-        android-x86_64-opt: build-android-x86_64-nightly/opt
-        android-api-16-opt: build-android-api-16-nightly/opt
-        android-aarch64-opt: build-android-aarch64-nightly/opt
-    worker:
-        env:
-            # Online in order to download the per-architecture AARs.
-            GRADLE_USER_HOME: ""/builds/worker/workspace/build/src/mobile/android/gradle/dotgradle-online""
-            TOOLTOOL_MANIFEST: ""mobile/android/config/tooltool-manifests/android/releng.manifest""
-            PERFHERDER_EXTRA_OPTIONS: android-geckoview-fat-aar-nightly
-            MOZ_ANDROID_FAT_AAR_ARCHITECTURES: 'armeabi-v7a,arm64-v8a,x86,x86_64'
-            MOZ_ARTIFACT_TASK_ANDROID_API_16_OPT: {task-reference: '<android-api-16-opt>'}
-            MOZ_ARTIFACT_TASK_ANDROID_AARCH64_OPT: {task-reference: '<android-aarch64-opt>'}
-            MOZ_ARTIFACT_TASK_ANDROID_X86_OPT: {task-reference: '<android-x86-opt>'}
-            MOZ_ARTIFACT_TASK_ANDROID_X86_64_OPT: {task-reference: '<android-x86_64-opt>'}
-    run:
-        actions: [get-secrets, build, multi-l10n]
-        config:
-            - builds/releng_base_android_64_builds.py
-            - taskcluster_nightly.py
-        custom-build-variant-cfg: api-16
diff -r c27a6d5810fe -r 53dc7b418090 taskcluster/docs/kinds.rst
--- a/taskcluster/docs/kinds.rst	Wed Jul 31 09:12:37 2019 +0000
+++ b/taskcluster/docs/kinds.rst	Tue Jul 30 15:35:12 2019 +0000
@@ -11,6 +11,22 @@
 ""build"" in a Mozilla context: it does not include tasks that run build-like
 actions for static analysis or to produce instrumented artifacts.
 
+build-fat-aar
+-------------
+
+Build architecture-independent GeckoView AAR (Android ARchive) files. This build-like tasks is an
+artifact build (ARMv7, but this is arbitrary) that itself depends on arch-specific Android build
+jobs. It fetches arch-specific AAR files, extracts arch-specific libraries and preference files,
+and then assembles a multi-architecture ""fat AAR"". Downstream consumers are expected to use
+per-ABI feature splits to produce arch-specific APKs.
+
+If you want to run this task locally, you need to specify these environment variable:
+  - MOZ_ANDROID_FAT_AAR_ARCHITECTURES: must be a comma-separated list of architecture.
+    Eg: ""armeabi-v7a,arm64-v8a,x86,x86_64"".
+  - each of MOZ_ANDROID_FAT_AAR_ARM64_V8A, MOZ_ANDROID_FAT_AAR_ARMEABI_V7A,
+    MOZ_ANDROID_FAT_AAR_X86, MOZ_ANDROID_FAT_AAR_X86_64 must be an absolute path to the
+    architecture-specific AAR.
+
 build-signing
 -------------
 
diff -r c27a6d5810fe -r 53dc7b418090 taskcluster/taskgraph/manifests/fennec_geckoview.yml
--- a/taskcluster/taskgraph/manifests/fennec_geckoview.yml	Wed Jul 31 09:12:37 2019 +0000
+++ b/taskcluster/taskgraph/manifests/fennec_geckoview.yml	Tue Jul 30 15:35:12 2019 +0000
@@ -23,7 +23,9 @@
 mapping:
     ${artifact_id}-${major_version}.${minor_version}.${build_date}.aar:
         <<: *default
-        from: ['build']
+        from:
+            - build
+            - build-fat-aar
         pretty_name: ${artifact_id}-${major_version}.${minor_version}.${build_date}.aar
         checksums_path: ${artifact_id}-${major_version}.${minor_version}.${build_date}.aar
     ${artifact_id}-${major_version}.${minor_version}.${build_date}.aar.asc:
@@ -33,17 +35,23 @@
         checksums_path: ${artifact_id}-${major_version}.${minor_version}.${build_date}.aar.asc
     ${artifact_id}-${major_version}.${minor_version}.${build_date}.aar.md5:
         <<: *default
-        from: ['build']
+        from:
+            - build
+            - build-fat-aar
         pretty_name: ${artifact_id}-${major_version}.${minor_version}.${build_date}.aar.md5
         checksums_path: ${artifact_id}-${major_version}.${minor_version}.${build_date}.aar.md5
     ${artifact_id}-${major_version}.${minor_version}.${build_date}.aar.sha1:
         <<: *default
-        from: ['build']
+        from:
+            - build
+            - build-fat-aar
         pretty_name: ${artifact_id}-${major_version}.${minor_version}.${build_date}.aar.sha1
         checksums_path: ${artifact_id}-${major_version}.${minor_version}.${build_date}.aar.sha1
     ${artifact_id}-${major_version}.${minor_version}.${build_date}.pom:
         <<: *default
-        from: ['build']
+        from:
+            - build
+            - build-fat-aar
         pretty_name: ${artifact_id}-${major_version}.${minor_version}.${build_date}.pom
         checksums_path: ${artifact_id}-${major_version}.${minor_version}.${build_date}.pom
     ${artifact_id}-${major_version}.${minor_version}.${build_date}.pom.asc:
@@ -53,17 +61,23 @@
         checksums_path: ${artifact_id}-${major_version}.${minor_version}.${build_date}.pom.asc
     ${artifact_id}-${major_version}.${minor_version}.${build_date}.pom.md5:
         <<: *default
-        from: ['build']
+        from:
+            - build
+            - build-fat-aar
         pretty_name: ${artifact_id}-${major_version}.${minor_version}.${build_date}.pom.md5
         checksums_path: ${artifact_id}-${major_version}.${minor_version}.${build_date}.pom.md5
     ${artifact_id}-${major_version}.${minor_version}.${build_date}.pom.sha1:
         <<: *default
-        from: ['build']
+        from:
+            - build
+            - build-fat-aar
         pretty_name: ${artifact_id}-${major_version}.${minor_version}.${build_date}.pom.sha1
         checksums_path: ${artifact_id}-${major_version}.${minor_version}.${build_date}.pom.sha1
     ${artifact_id}-${major_version}.${minor_version}.${build_date}-javadoc.jar:
         <<: *default
-        from: ['build']
+        from:
+            - build
+            - build-fat-aar
         pretty_name: ${artifact_id}-${major_version}.${minor_version}.${build_date}-javadoc.jar
         checksums_path: ${artifact_id}-${major_version}.${minor_version}.${build_date}-javadoc.jar
     ${artifact_id}-${major_version}.${minor_version}.${build_date}-javadoc.jar.asc:
@@ -73,17 +87,23 @@
         checksums_path: ${artifact_id}-${major_version}.${minor_version}.${build_date}-javadoc.jar.asc
     ${artifact_id}-${major_version}.${minor_version}.${build_date}-javadoc.jar.md5:
         <<: *default
-        from: ['build']
+        from:
+            - build
+            - build-fat-aar
         pretty_name: ${artifact_id}-${major_version}.${minor_version}.${build_date}-javadoc.jar.md5
         checksums_path: ${artifact_id}-${major_version}.${minor_version}.${build_date}-javadoc.jar.md5
     ${artifact_id}-${major_version}.${minor_version}.${build_date}-javadoc.jar.sha1:
         <<: *default
-        from: ['build']
+        from:
+            - build
+            - build-fat-aar
         pretty_name: ${artifact_id}-${major_version}.${minor_version}.${build_date}-javadoc.jar.sha1
         checksums_path: ${artifact_id}-${major_version}.${minor_version}.${build_date}-javadoc.jar.sha1
     ${artifact_id}-${major_version}.${minor_version}.${build_date}-sources.jar:
         <<: *default
-        from: ['build']
+        from:
+            - build
+            - build-fat-aar
         pretty_name: ${artifact_id}-${major_version}.${minor_version}.${build_date}-sources.jar
         checksums_path: ${artifact_id}-${major_version}.${minor_version}.${build_date}-sources.jar
     ${artifact_id}-${major_version}.${minor_version}.${build_date}-sources.jar.asc:
@@ -93,11 +113,15 @@
         checksums_path: ${artifact_id}-${major_version}.${minor_version}.${build_date}-sources.jar.asc
     ${artifact_id}-${major_version}.${minor_version}.${build_date}-sources.jar.md5:
         <<: *default
-        from: ['build']
+        from:
+            - build
+            - build-fat-aar
         pretty_name: ${artifact_id}-${major_version}.${minor_version}.${build_date}-sources.jar.md5
         checksums_path: ${artifact_id}-${major_version}.${minor_version}.${build_date}-sources.jar.md5
     ${artifact_id}-${major_version}.${minor_version}.${build_date}-sources.jar.sha1:
         <<: *default
-        from: ['build']
+        from:
+            - build
+            - build-fat-aar
         pretty_name: ${artifact_id}-${major_version}.${minor_version}.${build_date}-sources.jar.sha1
         checksums_path: ${artifact_id}-${major_version}.${minor_version}.${build_date}-sources.jar.sha1
diff -r c27a6d5810fe -r 53dc7b418090 taskcluster/taskgraph/transforms/build_fat_aar.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/taskcluster/taskgraph/transforms/build_fat_aar.py	Tue Jul 30 15:35:12 2019 +0000
@@ -0,0 +1,73 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+from __future__ import absolute_import, print_function, unicode_literals
+
+import copy
+import os
+
+from taskgraph.transforms.base import TransformSequence
+from taskgraph.transforms.job import get_default_moz_fetches_dir
+from taskgraph.util.declarative_artifacts import get_geckoview_upstream_artifacts
+from taskgraph.util.taskcluster import get_artifact_prefix
+
+
+transforms = TransformSequence()
+
+
+MOZ_ANDROID_FAT_AAR_ENV_MAP = {
+    'android-api-16-nightly': 'MOZ_ANDROID_FAT_AAR_ARMEABI_V7A',
+    'android-aarch64-nightly': 'MOZ_ANDROID_FAT_AAR_ARM64_V8A',
+    'android-x86-nightly': 'MOZ_ANDROID_FAT_AAR_X86',
+    'android-x86_64-nightly': 'MOZ_ANDROID_FAT_AAR_X86_64',
+
+    'android-api-16-opt': 'MOZ_ANDROID_FAT_AAR_ARMEABI_V7A',
+    'android-aarch64-opt': 'MOZ_ANDROID_FAT_AAR_ARM64_V8A',
+    'android-x86-opt': 'MOZ_ANDROID_FAT_AAR_X86',
+    'android-x86_64-opt': 'MOZ_ANDROID_FAT_AAR_X86_64',
+}
+
+
+@transforms.add
+def set_fetches_and_locations(config, jobs):
+    """"""Set defaults, including those that differ per worker implementation""""""
+    for job in jobs:
+        dependencies = copy.deepcopy(job['dependencies'])
+
+        for platform, label in dependencies.items():
+            job['dependencies'] = {'build': label}
+
+            aar_location = _get_aar_location(config, job, platform)
+            prefix = get_artifact_prefix(job)
+            if not prefix.endswith('/'):
+                prefix = prefix + '/'
+            if aar_location.startswith(prefix):
+                aar_location = aar_location[len(prefix):]
+
+            job['fetches'][platform] = [{
+                'artifact': aar_location,
+                'extract': False,
+            }]
+
+            aar_file_name = aar_location.split('/')[-1]
+            env_var = MOZ_ANDROID_FAT_AAR_ENV_MAP[platform]
+            job['worker']['env'][env_var] = os.path.join(
+                get_default_moz_fetches_dir(job), aar_file_name
+            )
+
+        job['dependencies'] = dependencies
+
+        yield job
+
+
+def _get_aar_location(config, job, platform):
+    artifacts_locations = get_geckoview_upstream_artifacts(config, job, platform=platform)
+    aar_locations = [
+        path for path in artifacts_locations[0]['paths']
+        if path.endswith('.aar')
+    ]
+    if len(aar_locations) != 1:
+        raise ValueError('Only a single AAR must be given. Got: {}'.format(aar_locations))
+
+    return aar_locations[0]
diff -r c27a6d5810fe -r 53dc7b418090 taskcluster/taskgraph/transforms/job/__init__.py
--- a/taskcluster/taskgraph/transforms/job/__init__.py	Wed Jul 31 09:12:37 2019 +0000
+++ b/taskcluster/taskgraph/transforms/job/__init__.py	Tue Jul 30 15:35:12 2019 +0000
@@ -228,12 +228,21 @@
 
         env = worker.setdefault('env', {})
         env['MOZ_FETCHES'] = {'task-reference': json.dumps(job_fetches, sort_keys=True)}
-
-        env.setdefault('MOZ_FETCHES_DIR', 'fetches')
+        env.setdefault('MOZ_FETCHES_DIR', get_default_moz_fetches_dir(job))
 
         yield job
 
 
+def get_default_moz_fetches_dir(job):
+    if job.get('worker', {}).get('os') in ('windows', 'macosx'):
+        moz_fetches_dir = 'fetches'
+    else:
+        workdir = job['run'].get('workdir', '/builds/worker')
+        moz_fetches_dir = '{}/fetches'.format(workdir)
+
+    return moz_fetches_dir
+
+
 @transforms.add
 def make_task_description(config, jobs):
     """"""Given a build description, create a task description""""""
diff -r c27a6d5810fe -r 53dc7b418090 taskcluster/taskgraph/util/declarative_artifacts.py
--- a/taskcluster/taskgraph/util/declarative_artifacts.py	Wed Jul 31 09:12:37 2019 +0000
+++ b/taskcluster/taskgraph/util/declarative_artifacts.py	Tue Jul 30 15:35:12 2019 +0000
@@ -6,6 +6,12 @@
 
 
 _ARTIFACT_ID_PER_PLATFORM = {
+    'android-aarch64-opt': 'geckoview-default-arm64-v8a',
+    'android-api-16-opt': 'geckoview-default-armeabi-v7a',
+    'android-x86-opt': 'geckoview-default-x86',
+    'android-x86_64-opt': 'geckoview-default-x86_64',
+    'android-geckoview-fat-aar-opt': 'geckoview-default',
+
     'android-aarch64-nightly': 'geckoview{update_channel}-arm64-v8a',
     'android-api-16-nightly': 'geckoview{update_channel}-armeabi-v7a',
     'android-x86-nightly': 'geckoview{update_channel}-x86',
@@ -14,14 +20,12 @@
 }
 
 
-def get_geckoview_upstream_artifacts(config, job):
+def get_geckoview_upstream_artifacts(config, job, platform=''):
+    if not platform:
+        platform = job['attributes']['build_platform']
     upstream_artifacts = generate_beetmover_upstream_artifacts(
         config, job, platform='',
-        **get_geckoview_template_vars(
-            config,
-            job['attributes']['build_platform'],
-            job['attributes'].get('update-channel'),
-        )
+        **get_geckoview_template_vars(config, platform, job['attributes'].get('update-channel'))
     )
     return [{
         key: value for key, value in upstream_artifact.items()
","diff -r 37229cef2cc7 -r 5db35189448c Makefile.in
--- a/Makefile.in	Fri Aug 02 21:10:09 2019 +0200
+++ b/Makefile.in	Fri Aug 02 07:04:46 2019 +0900
@@ -160,10 +160,10 @@
 ifdef MOZ_ANDROID_FAT_AAR_ARCHITECTURES
 recurse_android-fat-aar-artifact:
 	$(call py_action,fat_aar,\
-    $(if $(MOZ_ANDROID_FAT_AAR_ARMEABI_V7A),--armeabi-v7a $(MOZ_ANDROID_FAT_AAR_ARMEABI_V7A)) \
-    $(if $(MOZ_ANDROID_FAT_AAR_ARM64_V8A),--arm64-v8a $(MOZ_ANDROID_FAT_AAR_ARM64_V8A)) \
-    $(if $(MOZ_ANDROID_FAT_AAR_X86),--x86 $(MOZ_ANDROID_FAT_AAR_X86)) \
-    $(if $(MOZ_ANDROID_FAT_AAR_X86_64),--x86-64 $(MOZ_ANDROID_FAT_AAR_X86_64)) \
+    $(addprefix --armeabi-v7a $(MOZ_FETCHES_DIR)/,$(MOZ_ANDROID_FAT_AAR_ARMEABI_V7A)) \
+    $(addprefix --arm64-v8a $(MOZ_FETCHES_DIR)/,$(MOZ_ANDROID_FAT_AAR_ARM64_V8A)) \
+    $(addprefix --x86 $(MOZ_FETCHES_DIR)/,$(MOZ_ANDROID_FAT_AAR_X86)) \
+    $(addprefix --x86-64 $(MOZ_FETCHES_DIR)/,$(MOZ_ANDROID_FAT_AAR_X86_64)) \
     --distdir $(abspath $(DIST)/fat-aar))
 endif
 
diff -r 37229cef2cc7 -r 5db35189448c taskcluster/docs/kinds.rst
--- a/taskcluster/docs/kinds.rst	Fri Aug 02 21:10:09 2019 +0200
+++ b/taskcluster/docs/kinds.rst	Fri Aug 02 07:04:46 2019 +0900
@@ -24,8 +24,8 @@
   - MOZ_ANDROID_FAT_AAR_ARCHITECTURES: must be a comma-separated list of architecture.
     Eg: ""armeabi-v7a,arm64-v8a,x86,x86_64"".
   - each of MOZ_ANDROID_FAT_AAR_ARM64_V8A, MOZ_ANDROID_FAT_AAR_ARMEABI_V7A,
-    MOZ_ANDROID_FAT_AAR_X86, MOZ_ANDROID_FAT_AAR_X86_64 must be an absolute path to the
-    architecture-specific AAR.
+    MOZ_ANDROID_FAT_AAR_X86, MOZ_ANDROID_FAT_AAR_X86_64 must be a path relative to
+    MOZ_FETCHES_DIR.
 
 build-signing
 -------------
diff -r 37229cef2cc7 -r 5db35189448c taskcluster/taskgraph/transforms/build_fat_aar.py
--- a/taskcluster/taskgraph/transforms/build_fat_aar.py	Fri Aug 02 21:10:09 2019 +0200
+++ b/taskcluster/taskgraph/transforms/build_fat_aar.py	Fri Aug 02 07:04:46 2019 +0900
@@ -5,10 +5,8 @@
 from __future__ import absolute_import, print_function, unicode_literals
 
 import copy
-import os
 
 from taskgraph.transforms.base import TransformSequence
-from taskgraph.transforms.job import get_default_moz_fetches_dir
 from taskgraph.util.declarative_artifacts import get_geckoview_upstream_artifacts
 from taskgraph.util.taskcluster import get_artifact_prefix
 
@@ -52,9 +50,7 @@
 
             aar_file_name = aar_location.split('/')[-1]
             env_var = MOZ_ANDROID_FAT_AAR_ENV_MAP[platform]
-            job['worker']['env'][env_var] = os.path.join(
-                get_default_moz_fetches_dir(job), aar_file_name
-            )
+            job['worker']['env'][env_var] = aar_file_name
 
         job['dependencies'] = dependencies
 
diff -r 37229cef2cc7 -r 5db35189448c taskcluster/taskgraph/transforms/job/__init__.py
--- a/taskcluster/taskgraph/transforms/job/__init__.py	Fri Aug 02 21:10:09 2019 +0200
+++ b/taskcluster/taskgraph/transforms/job/__init__.py	Fri Aug 02 07:04:46 2019 +0900
@@ -233,21 +233,12 @@
 
         env = worker.setdefault('env', {})
         env['MOZ_FETCHES'] = {'task-reference': json.dumps(job_fetches, sort_keys=True)}
-        env.setdefault('MOZ_FETCHES_DIR', get_default_moz_fetches_dir(job))
+        # The path is normalized to an absolute path in run-task
+        env.setdefault('MOZ_FETCHES_DIR', 'fetches')
 
         yield job
 
 
-def get_default_moz_fetches_dir(job):
-    if job.get('worker', {}).get('os') in ('windows', 'macosx'):
-        moz_fetches_dir = 'fetches'
-    else:
-        workdir = job['run'].get('workdir', '/builds/worker')
-        moz_fetches_dir = '{}/fetches'.format(workdir)
-
-    return moz_fetches_dir
-
-
 @transforms.add
 def make_task_description(config, jobs):
     """"""Given a build description, create a task description""""""
",1563711,53dc7b41809034293e25580b14974217c6c54167,"Bug 1563711 - Remove target.maven.zip r=nalexander

Differential Revision: https://phabricator.services.mozilla.com/D38175",1570798,"Bug 1570798 - Restore relative path for MOZ_FETCHES_DIR. r=nalexander

Bug 1563711 changed MOZ_FETCHES_DIR to make the MOZ_ANDROID_FAT_AAR_*
environment variables absolute paths. Unfortunately, the replacement
relies on non-osx/windows tasks to run in docker-worker, which is not
necessarily true, and that makes the MOZ_FETCHES_DIR wrong in
non-osx/windows generic-worker tasks.  Apparently, that currently works,
but that's not guaranteed to stay this way.

The MOZ_ANDROID_FAT_AAR_* environment variables don't need to be
absolute paths, though. MOZ_FETCHES_DIR is normalized by run-task, and
MOZ_ANDROID_FAT_AAR_* can be set relative to that, which we do here.

Differential Revision: https://phabricator.services.mozilla.com/D40334",2019-07-30T15:35:00+00:00,Remove target.maven.zip,"Starting bug 1557269, beetmover doesn't need it anymore. The fat aar build task just needs to rely on the aar files. We can retire `target.maven.zip`.",Restore relative path for MOZ_FETCHES_DIR,
d65ebfd97a1e21a3ef133cbcea1afc2701876180,2020-08-06T20:46:00+00:00,"diff -r 7112fefc4b79 -r 29df5fa0ab86 devtools/client/fronts/highlighters.js
--- a/devtools/client/fronts/highlighters.js	Mon Aug 03 14:19:43 2020 +0000
+++ b/devtools/client/fronts/highlighters.js	Mon Aug 03 14:29:09 2020 +0000
@@ -9,6 +9,7 @@
   registerFront,
 } = require(""devtools/shared/protocol"");
 const flags = require(""devtools/shared/flags"");
+const { safeAsyncMethod } = require(""devtools/shared/async-utils"");
 const {
   customHighlighterSpec,
   highlighterSpec,
@@ -19,6 +20,18 @@
     super(client, targetFront, parentFront);
 
     this.isNodeFrontHighlighted = false;
+
+    // un/highlight requests can be triggered while DevTools are closing.
+    this.highlight = safeAsyncMethod(this.highlight.bind(this), () =>
+      this._isDestroyed()
+    );
+    this.unhighlight = safeAsyncMethod(this.unhighlight.bind(this), () =>
+      this._isDestroyed()
+    );
+  }
+
+  _isDestroyed() {
+    return !this.actorID;
   }
 
   // Update the object given a form representation off the wire.
diff -r 7112fefc4b79 -r 29df5fa0ab86 devtools/client/inspector/compatibility/CompatibilityView.js
--- a/devtools/client/inspector/compatibility/CompatibilityView.js	Mon Aug 03 14:19:43 2020 +0000
+++ b/devtools/client/inspector/compatibility/CompatibilityView.js	Mon Aug 03 14:29:09 2020 +0000
@@ -73,7 +73,7 @@
     return this.inspector.toolbox.resourceWatcher;
   }
 
-  _init() {
+  async _init() {
     const {
       onShowBoxModelHighlighterForNode: showBoxModelHighlighterForNode,
       setSelectedNode,
@@ -113,7 +113,7 @@
       this._onPanelSelected
     );
 
-    this.resourceWatcher.watchResources(
+    await this.resourceWatcher.watchResources(
       [this.resourceWatcher.TYPES.CSS_CHANGE],
       {
         onAvailable: this._onResourceAvailable,
@@ -122,6 +122,8 @@
         ignoreExistingResources: true,
       }
     );
+
+    this.inspector.emitForTests(""compatibilityview-initialized"");
   }
 
   _isAvailable() {
diff -r 7112fefc4b79 -r 29df5fa0ab86 devtools/client/inspector/test/browser_inspector_breadcrumbs_visibility.js
--- a/devtools/client/inspector/test/browser_inspector_breadcrumbs_visibility.js	Mon Aug 03 14:19:43 2020 +0000
+++ b/devtools/client/inspector/test/browser_inspector_breadcrumbs_visibility.js	Mon Aug 03 14:29:09 2020 +0000
@@ -5,13 +5,6 @@
 // Test that the start and end buttons on the breadcrumb trail bring the right
 // crumbs into the visible area, for both LTR and RTL
 
-// There are shutdown issues for which multiple rejections are left uncaught.
-// See bug 1018184 for resolving these issues.
-const { PromiseTestUtils } = ChromeUtils.import(
-  ""resource://testing-common/PromiseTestUtils.jsm""
-);
-PromiseTestUtils.allowMatchingRejectionsGlobally(/Connection closed/);
-
 const { Toolbox } = require(""devtools/client/framework/toolbox"");
 
 const TEST_URI = URL_ROOT + ""doc_inspector_breadcrumbs_visibility.html"";
@@ -93,7 +86,6 @@
       info(""Simulating click of start button"");
       EventUtils.synthesizeMouseAtCenter(startBtn, {}, inspector.panelWin);
     }
-
     await breadcrumbsUpdated;
     const selector = 'button[title=""' + node.title + '""]';
     const relevantCrumb = container.querySelector(selector);
diff -r 7112fefc4b79 -r 29df5fa0ab86 devtools/client/inspector/test/browser_inspector_menu-04-use-in-console.js
--- a/devtools/client/inspector/test/browser_inspector_menu-04-use-in-console.js	Mon Aug 03 14:19:43 2020 +0000
+++ b/devtools/client/inspector/test/browser_inspector_menu-04-use-in-console.js	Mon Aug 03 14:29:09 2020 +0000
@@ -7,52 +7,51 @@
 const TEST_URL = URL_ROOT + ""doc_inspector_menu.html"";
 
 add_task(async function() {
+  // Disable eager evaluation to avoid intermittent failures due to pending
+  // requests to evaluateJSAsync.
+  await pushPref(""devtools.webconsole.input.eagerEvaluation"", false);
+
   const { inspector, toolbox } = await openInspectorForURL(TEST_URL);
 
-  await testUseInConsole();
-
-  async function testUseInConsole() {
-    info(""Testing 'Use in Console' menu item."");
+  info(""Testing 'Use in Console' menu item."");
 
-    await selectNode(""#console-var"", inspector);
-    const container = await getContainerForSelector(""#console-var"", inspector);
-    const allMenuItems = openContextMenuAndGetAllItems(inspector, {
-      target: container.tagLine,
-    });
-    const menuItem = allMenuItems.find(i => i.id === ""node-menu-useinconsole"");
-    menuItem.click();
+  await selectNode(""#console-var"", inspector);
+  const container = await getContainerForSelector(""#console-var"", inspector);
+  const allMenuItems = openContextMenuAndGetAllItems(inspector, {
+    target: container.tagLine,
+  });
+  const menuItem = allMenuItems.find(i => i.id === ""node-menu-useinconsole"");
+  menuItem.click();
 
-    await inspector.once(""console-var-ready"");
+  await inspector.once(""console-var-ready"");
 
-    const hud = toolbox.getPanel(""webconsole"").hud;
+  const hud = toolbox.getPanel(""webconsole"").hud;
 
-    const getConsoleResults = () =>
-      hud.ui.outputNode.querySelectorAll("".result"");
+  const getConsoleResults = () => hud.ui.outputNode.querySelectorAll("".result"");
 
-    is(hud.getInputValue(), ""temp0"", ""first console variable is named temp0"");
-    hud.ui.wrapper.dispatchEvaluateExpression();
+  is(hud.getInputValue(), ""temp0"", ""first console variable is named temp0"");
+  hud.ui.wrapper.dispatchEvaluateExpression();
 
-    await waitUntil(() => getConsoleResults().length === 1);
-    let result = getConsoleResults()[0];
-    ok(
-      result.textContent.includes('<p id=""console-var"">'),
-      ""variable temp0 references correct node""
-    );
+  await waitUntil(() => getConsoleResults().length === 1);
+  let result = getConsoleResults()[0];
+  ok(
+    result.textContent.includes('<p id=""console-var"">'),
+    ""variable temp0 references correct node""
+  );
 
-    await selectNode(""#console-var-multi"", inspector);
-    menuItem.click();
-    await inspector.once(""console-var-ready"");
+  await selectNode(""#console-var-multi"", inspector);
+  menuItem.click();
+  await inspector.once(""console-var-ready"");
 
-    is(hud.getInputValue(), ""temp1"", ""second console variable is named temp1"");
-    hud.ui.wrapper.dispatchEvaluateExpression();
+  is(hud.getInputValue(), ""temp1"", ""second console variable is named temp1"");
+  hud.ui.wrapper.dispatchEvaluateExpression();
 
-    await waitUntil(() => getConsoleResults().length === 2);
-    result = getConsoleResults()[1];
-    ok(
-      result.textContent.includes('<p id=""console-var-multi"">'),
-      ""variable temp1 references correct node""
-    );
+  await waitUntil(() => getConsoleResults().length === 2);
+  result = getConsoleResults()[1];
+  ok(
+    result.textContent.includes('<p id=""console-var-multi"">'),
+    ""variable temp1 references correct node""
+  );
 
-    hud.ui.wrapper.dispatchClearHistory();
-  }
+  hud.ui.wrapper.dispatchClearHistory();
 });
diff -r 7112fefc4b79 -r 29df5fa0ab86 devtools/client/inspector/test/browser_inspector_sidebarstate.js
--- a/devtools/client/inspector/test/browser_inspector_sidebarstate.js	Mon Aug 03 14:19:43 2020 +0000
+++ b/devtools/client/inspector/test/browser_inspector_sidebarstate.js	Mon Aug 03 14:29:09 2020 +0000
@@ -73,7 +73,11 @@
   );
 
   info(""Selecting compatibility view."");
+  const onCompatibilityViewInitialized = inspector.once(
+    ""compatibilityview-initialized""
+  );
   inspector.sidebar.select(""compatibilityview"");
+  await onCompatibilityViewInitialized;
 
   is(
     inspector.sidebar.getCurrentTabID(),
diff -r 7112fefc4b79 -r 29df5fa0ab86 devtools/client/inspector/test/browser_inspector_textbox-menu.js
--- a/devtools/client/inspector/test/browser_inspector_textbox-menu.js	Mon Aug 03 14:19:43 2020 +0000
+++ b/devtools/client/inspector/test/browser_inspector_textbox-menu.js	Mon Aug 03 14:29:09 2020 +0000
@@ -5,13 +5,6 @@
 // Test that when right-clicking on various text boxes throughout the inspector does use
 // the toolbox's context menu (copy/cut/paste/selectAll/Undo).
 
-// There are shutdown issues for which multiple rejections are left uncaught.
-// See bug 1018184 for resolving these issues.
-const { PromiseTestUtils } = ChromeUtils.import(
-  ""resource://testing-common/PromiseTestUtils.jsm""
-);
-PromiseTestUtils.allowMatchingRejectionsGlobally(/Connection closed/);
-
 add_task(async function() {
   await addTab(`data:text/html;charset=utf-8,
                 <style>h1 { color: red; }</style>
","diff -r f37d93eefdca -r d65ebfd97a1e devtools/client/inspector/test/browser_inspector_highlighter-cssshape_iframe_01.js
--- a/devtools/client/inspector/test/browser_inspector_highlighter-cssshape_iframe_01.js	Thu Aug 06 19:52:05 2020 +0000
+++ b/devtools/client/inspector/test/browser_inspector_highlighter-cssshape_iframe_01.js	Thu Aug 06 20:46:25 2020 +0000
@@ -37,7 +37,11 @@
   await toggleShapesHighlighter(view, selector, property, true);
   const { mouse } = helper;
 
-  let onRuleViewChanged = view.once(""ruleview-changed"");
+  // We expect two ruleview-changed events:
+  // - one for previewing the change (DomRule::previewPropertyValue)
+  // - one for applying the change (DomRule::applyProperties)
+  let onRuleViewChanged = waitForNEvents(view, ""ruleview-changed"", 2);
+
   info(""Moving polygon point visible in iframe"");
   // Iframe has 10px margin. Element in iframe is 800px by 800px. First point is at 0 0%
   await mouse.down(10, 10);
@@ -52,7 +56,8 @@
   let definition = computedStyle[""clip-path""].value;
   ok(definition.includes(""10px 1.25%""), ""Point moved to 10px 1.25%"");
 
-  onRuleViewChanged = view.once(""ruleview-changed"");
+  onRuleViewChanged = waitForNEvents(view, ""ruleview-changed"", 2);
+
   info(""Moving polygon point not visible in iframe"");
   await mouse.down(110, 410);
   await mouse.move(120, 420);
",1655427,29df5fa0ab862048a17bdf0cca8c3a992397747e,"Bug 1655427 - Remove usage of allowMatchingRejectionsGlobally in inspector r=ochameau,nchevobbe

Using allowMatchingRejectionsGlobally in a test will leak to all the tests running after it in the same suite. We should avoid using it as much as possible.

Differential Revision: https://phabricator.services.mozilla.com/D84963",1571329,"Bug 1571329 - Wait for 2 ruleview-changed events in browser_inspector_highlighter-cssshape_iframe_01.js r=rcaliman

Differential Revision: https://phabricator.services.mozilla.com/D86237",2020-08-03T14:29:00+00:00,Remove usage of allowMatchingRejectionsGlobally in inspector,"Depends on Bug 1655411, because otherwise `browser_inspector_fission_frame_navigation` will fail due to the side effects of allowMatchingRejectionsGlobally (see Bug 1655422)

We can use `safeAsyncMethod` to swallow highlight/unhighlight failures.","Intermittent devtools/client/inspector/test/browser_inspector_highlighter-cssshape_iframe_01.js | A promise chain failed to handle a rejection: Error: Connection closed, pending request to server0.conn4.child1/domstylerule54, type setRuleText failed","**Filed by:** nerli [at] mozilla.com
**Parsed log:** https://treeherder.mozilla.org/logviewer.html#?job_id=259857873&repo=mozilla-central
**Full log:** https://queue.taskcluster.net/v1/task/fBOsmxzuQWyyUqdQPAZ0zQ/runs/0/artifacts/public/logs/live_backing.log

---

[task 2019-08-04T22:41:51.772Z] 22:41:51     INFO - destroy@resource://devtools/shared/protocol/Front.js:74:11
[task 2019-08-04T22:41:51.773Z] 22:41:51     INFO - destroy@resource://devtools/shared/fronts/inspector.js:517:11
[task 2019-08-04T22:41:51.774Z] 22:41:51     INFO - destroyInspector@resource://devtools/client/framework/toolbox.js:3415:21
[task 2019-08-04T22:41:51.775Z] 22:41:51     INFO - _destroyToolbox/onceDestroyed</<@resource://devtools/client/framework/toolbox.js:3587:24
[task 2019-08-04T22:41:51.776Z] 22:41:51     INFO - promise callback*_destroyToolbox/onceDestroyed<@resource://devtools/client/framework/toolbox.js:3585:12
[task 2019-08-04T22:41:51.777Z] 22:41:51     INFO - _destroyToolbox@resource://devtools/client/framework/toolbox.js:3581:27
[task 2019-08-04T22:41:51.778Z] 22:41:51     INFO - destroy@resource://devtools/client/framework/toolbox.js:3457:28
[task 2019-08-04T22:41:51.779Z] 22:41:51     INFO - closeToolbox@resource://devtools/client/framework/devtools.js:668:19
[task 2019-08-04T22:41:51.780Z] 22:41:51     INFO - async*closeTabAndToolbox@chrome://mochitests/content/browser/devtools/client/shared/test/shared-head.js:482:23
[task 2019-08-04T22:41:51.781Z] 22:41:51     INFO - async*cleanup@chrome://mochitests/content/browser/devtools/client/shared/test/shared-head.js:161:11
[task 2019-08-04T22:41:51.782Z] 22:41:51     INFO - nextTest@chrome://mochikit/content/browser-test.js:856:35
[task 2019-08-04T22:41:51.783Z] 22:41:51     INFO - async*testScope/test_finish/<@chrome://mochikit/content/browser-test.js:1728:25
[task 2019-08-04T22:41:51.784Z] 22:41:51     INFO - run@chrome://mochikit/content/browser-test.js:1643:13
[task 2019-08-04T22:41:51.785Z] 22:41:51     INFO - "" {file: ""resource://devtools/shared/protocol/Front.js"" line: 72 column: 0 source: ""72""}]
[task 2019-08-04T22:41:51.786Z] 22:41:51     INFO - Buffered messages finished
[task 2019-08-04T22:41:51.792Z] 22:41:51     INFO - TEST-UNEXPECTED-FAIL | devtools/client/inspector/test/browser_inspector_highlighter-cssshape_iframe_01.js | A promise chain failed to handle a rejection: Error: Connection closed, pending request to server0.conn4.child1/domstylerule54, type setRuleText failed
[task 2019-08-04T22:41:51.793Z] 22:41:51     INFO - 
[task 2019-08-04T22:41:51.794Z] 22:41:51     INFO - Request stack:
[task 2019-08-04T22:41:51.795Z] 22:41:51     INFO - request@resource://devtools/shared/protocol/Front.js:166:14
[task 2019-08-04T22:41:51.796Z] 22:41:51     INFO - generateRequestMethods/</frontProto[name]@resource://devtools/shared/protocol/Front/FrontClassWithSpec.js:49:19
[task 2019-08-04T22:41:51.796Z] 22:41:51     INFO - setRuleText@resource://devtools/shared/fronts/styles.js:257:18
[task 2019-08-04T22:41:51.797Z] 22:41:51     INFO - apply/<@resource://devtools/shared/fronts/inspector/rule-rewriter.js:694:24
[task 2019-08-04T22:41:51.798Z] 22:41:51     INFO - process@resource://gre/modules/Promise-backend.js:961:38
[task 2019-08-04T22:41:51.799Z] 22:41:51     INFO - walkerLoop@resource://gre/modules/Promise-backend.js:845:29
[task 2019-08-04T22:41:51.800Z] 22:41:51     INFO - Promise*scheduleWalkerLoop@resource://gre/modules/Promise-backend.js:775:19
[task 2019-08-04T22:41:51.801Z] 22:41:51     INFO - schedulePromise@resource://gre/modules/Promise-backend.js:809:12
[task 2019-08-04T22:41:51.802Z] 22:41:51     INFO - Promise.prototype.then@resource://gre/modules/Promise-backend.js:483:19
[task 2019-08-04T22:41:51.802Z] 22:41:51     INFO - applyProperties@resource://devtools/client/inspector/rules/models/rule.js:442:8
[task 2019-08-04T22:41:51.803Z] 22:41:51     INFO - setPropertyValue@resource://devtools/client/inspector/rules/models/rule.js:508:17
[task 2019-08-04T22:41:51.804Z] 22:41:51     INFO - setValue@resource://devtools/client/inspector/rules/models/text-property.js:171:8
[task 2019-08-04T22:41:51.805Z] 22:41:51     INFO - commit@resource://devtools/client/shared/widgets/ShapesInContextEditor.js:330:23
[task 2019-08-04T22:41:51.806Z] 22:41:51     INFO - exports.debounce/</timer<@resource://devtools/shared/debounce.js:30:12
[task 2019-08-04T22:41:51.807Z] 22:41:51     INFO - notify@resource://gre/modules/Timer.jsm:62:17
[task 2019-08-04T22:41:51.808Z] 22:41:51     INFO -  - stack: destroy@resource://devtools/shared/protocol/Front.js:72:23
[task 2019-08-04T22:41:51.809Z] 22:41:51     INFO - destroy@resource://devtools/shared/protocol/Pool.js:157:17
[task 2019-08-04T22:41:51.810Z] 22:41:51     INFO - destroy@resource://devtools/shared/protocol/Front.js:74:11
[task 2019-08-04T22:41:51.811Z] 22:41:51     INFO - destroy@resource://devtools/shared/protocol/Pool.js:157:17
[task 2019-08-04T22:41:51.812Z] 22:41:51     INFO - destroy@resource://devtools/shared/protocol/Front.js:74:11
[task 2019-08-04T22:41:51.813Z] 22:41:51     INFO - destroy@resource://devtools/shared/fronts/inspector.js:517:11
[task 2019-08-04T22:41:51.814Z] 22:41:51     INFO - destroyInspector@resource://devtools/client/framework/toolbox.js:3415:21
[task 2019-08-04T22:41:51.814Z] 22:41:51     INFO - _destroyToolbox/onceDestroyed</<@resource://devtools/client/framework/toolbox.js:3587:24"
4a184b9023e3c5bbfc12ce5dac372294b4761979,2020-03-18T20:44:00+00:00,"diff -r 1245a50cc3a0 -r efbc44239b5c browser/base/content/browser-siteIdentity.js
--- a/browser/base/content/browser-siteIdentity.js	Tue Apr 09 09:17:04 2019 +0000
+++ b/browser/base/content/browser-siteIdentity.js	Tue Apr 09 08:20:50 2019 +0000
@@ -924,12 +924,20 @@
     let urlString = value + ""\n"" + gBrowser.contentTitle;
     let htmlString = ""<a href=\"""" + value + ""\"">"" + value + ""</a>"";
 
+    let windowUtils = window.windowUtils;
+    let scale = windowUtils.screenPixelsPerCSSPixel / windowUtils.fullZoom;
+    let canvas = document.createElementNS(""http://www.w3.org/1999/xhtml"", ""canvas"");
+    canvas.width = 550 * scale;
+    let ctx = canvas.getContext(""2d"");
+    ctx.font = `${14 * scale}px sans-serif`;
+    ctx.fillText(`${value}`, 10, 50);
+
     let dt = event.dataTransfer;
     dt.setData(""text/x-moz-url"", urlString);
     dt.setData(""text/uri-list"", value);
     dt.setData(""text/plain"", value);
     dt.setData(""text/html"", htmlString);
-    dt.setDragImage(this._identityIcon, 16, 16);
+    dt.setDragImage(canvas, 16, 16);
   },
 
   onLocationChange() {
","diff -r df488c7e701c -r 4a184b9023e3 browser/base/content/browser-siteIdentity.js
--- a/browser/base/content/browser-siteIdentity.js	Wed Mar 18 19:13:51 2020 +0000
+++ b/browser/base/content/browser-siteIdentity.js	Wed Mar 18 20:44:21 2020 +0000
@@ -1276,6 +1276,10 @@
   },
 
   onDragStart(event) {
+    const TEXT_SIZE = 14;
+    const IMAGE_SIZE = 16;
+    const SPACING = 5;
+
     if (gURLBar.getAttribute(""pageproxystate"") != ""valid"") {
       return;
     }
@@ -1292,13 +1296,40 @@
     );
     canvas.width = 550 * scale;
     let ctx = canvas.getContext(""2d"");
-    ctx.font = `${14 * scale}px sans-serif`;
-    ctx.fillText(`${value}`, 20 * scale, 14 * scale);
+    ctx.font = `${TEXT_SIZE * scale}px sans-serif`;
     let tabIcon = gBrowser.selectedTab.iconImage;
     let image = new Image();
     image.src = tabIcon.src;
+    let textWidth = ctx.measureText(value).width / scale;
+    let textHeight = parseInt(ctx.font, 10) / scale;
+    let imageHorizontalOffset, imageVerticalOffset;
+    imageHorizontalOffset = imageVerticalOffset = SPACING;
+    let textHorizontalOffset = image.width ? IMAGE_SIZE + SPACING * 2 : SPACING;
+    let textVerticalOffset = textHeight + SPACING - 1;
+    let backgroundColor = ""white"";
+    let textColor = ""black"";
+    let totalWidth = image.width
+      ? textWidth + IMAGE_SIZE + 3 * SPACING
+      : textWidth + 2 * SPACING;
+    let totalHeight = image.width
+      ? IMAGE_SIZE + 2 * SPACING
+      : textHeight + 2 * SPACING;
+    ctx.fillStyle = backgroundColor;
+    ctx.fillRect(0, 0, totalWidth * scale, totalHeight * scale);
+    ctx.fillStyle = textColor;
+    ctx.fillText(
+      `${value}`,
+      textHorizontalOffset * scale,
+      textVerticalOffset * scale
+    );
     try {
-      ctx.drawImage(image, 0, 0, 16 * scale, 16 * scale);
+      ctx.drawImage(
+        image,
+        imageHorizontalOffset * scale,
+        imageVerticalOffset * scale,
+        IMAGE_SIZE * scale,
+        IMAGE_SIZE * scale
+      );
     } catch (e) {
       // Sites might specify invalid data URIs favicons that
       // will result in errors when trying to draw, we can
",1208858,efbc44239b5cbf46ada4dd9063a23b7c41222f28,"Bug 1208858: Show the page URL in the Site Identity Button's drag-image/tooltip. r=johannh

Differential Revision: https://phabricator.services.mozilla.com/D26527",1571701,"Bug 1571701 - Fix tooltip text color for page URL in the Site Identity when dragged over tabs bar. r=johannh

Differential Revision: https://phabricator.services.mozilla.com/D66188",2019-04-09T08:20:00+00:00,Show the page URL in the Site Identity Button's drag-image/tooltip.,"STR:
1. Load a website.
2. Drag the Site Identity Button.

Actual result:
The Site Identity Button's icon (padlock/globe/warning triangle) is set as the drag-image/tooltip.

Expected result/suggestions:
  a) Show the full URL instead.
  b) Show the full URL in addition to the Site Identity Button icon (padlock/globe/warning triangle).
  c) Show the full URL in and the page's favicon instead.",Tooltip text color for page URL in the Site Identity not readable when dragged over tabs bar,"Created attachment 9083319
dragTip.gif

**Affected versions**
* 70.0a1 (2019-08-05), 69.0b11, 68.0.1

**Affected platforms**
* Windows 10 (light/dark theme), Ubuntu 18.04, macOS 10.14;

**Steps to reproduce**
1. Launch Firefox, access any webpage;
2. Grab the link -  (i) button - and  drag to open another tab;

**Expected result**
* Text is visible;

**Actual result**
* Text color is black (being dragged over the tabs-bar is not readable);

**Regression range**
* introduced with bug [1208858](https://bugzilla.mozilla.org/show_bug.cgi?id=1208858);
* pre-text: build_date: 2019-04-09 11:12:23.600000 changeset: 98b223de054374a3fba8669750eed1a8b3247baa
* post text:  build_date: 2019-04-09 17:45:32.875000 changeset: 8e92ef0be5a1ad8c15beb01328780078760ecf19


**Additional notes**
* attached recording with the issue."
2ced9171e5e9f5fce85e8ee301f477ae6c58b990,2019-10-04T11:05:00+00:00,"diff -r c9bdc101c70b -r 76ad499b825f toolkit/themes/linux/global/toolbarbutton.css
--- a/toolkit/themes/linux/global/toolbarbutton.css	Mon Sep 17 11:57:42 2018 -0700
+++ b/toolkit/themes/linux/global/toolbarbutton.css	Tue Sep 25 20:10:09 2018 +0200
@@ -22,11 +22,6 @@
   text-shadow: none;
 }
 
-.toolbarbutton-icon[label]:not([label=""""]),
-.toolbarbutton-icon[type=""menu""] {
-  margin-inline-end: 2px;
-}
-
 .toolbarbutton-text {
   margin: 0;
   text-align: center;
diff -r c9bdc101c70b -r 76ad499b825f toolkit/themes/windows/global/toolbarbutton.css
--- a/toolkit/themes/windows/global/toolbarbutton.css	Mon Sep 17 11:57:42 2018 -0700
+++ b/toolkit/themes/windows/global/toolbarbutton.css	Tue Sep 25 20:10:09 2018 +0200
@@ -18,11 +18,6 @@
   padding: 3px;
 }
 
-.toolbarbutton-icon[label]:not([label=""""]),
-.toolbarbutton-icon[type=""menu""] {
-  margin-inline-end: 5px;
-}
-
 .toolbarbutton-text {
   margin: 0;
   text-align: center;
","diff -r f8cb03296bac -r 2ced9171e5e9 browser/themes/shared/toolbarbuttons.inc.css
--- a/browser/themes/shared/toolbarbuttons.inc.css	Fri Oct 04 09:36:16 2019 +0000
+++ b/browser/themes/shared/toolbarbuttons.inc.css	Fri Oct 04 11:05:39 2019 +0000
@@ -353,6 +353,7 @@
   margin-inline-end: 0;
 }
 
+#bookmarks-toolbar-placeholder > .toolbarbutton-icon,
 #PlacesToolbarItems > .bookmark-item > .toolbarbutton-icon[label]:not([label=""""]) {
   margin-inline-end: 4px;
 }
",1493887,76ad499b825fff0ef00a7e4c18adefa350b61dc0,"Bug 1493887 - Remove toolbarbutton-icon default padding. r=paolo

Toolbarbuttons come in different forms, so it's better not to assume a certain layout in toolbarbutton.css.",1572717,"Bug 1572717 - Add margin after the bookmark icon in the bookmark toolbar when in Customize mode r=dao

Differential Revision: https://phabricator.services.mozilla.com/D42012",2018-09-25T20:10:00+02:00,Text for some items in Main Menu are not horizontally aligned after 1492130,"Created attachment 9011695
Hamburger menu text

Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:64.0) Gecko/20100101 Firefox/64.0
Build ID: 20180924220042

Please refer to the screenshot.

After bug 1492130, the gap are widened between the icon and the text for most items.",Add spacing after the bookmark icon in the bookmark toolbar when in Customize mode,
433320ec214751e9fbf4a2db3b30ec1cfcb777b1,2020-07-07T14:46:00+00:00,"diff -r 72ce1b22eee8 -r c29048279fcc security/manager/ssl/OSReauthenticator.cpp
--- a/security/manager/ssl/OSReauthenticator.cpp	Mon Oct 22 15:26:32 2018 +0000
+++ b/security/manager/ssl/OSReauthenticator.cpp	Tue Oct 23 09:05:07 2018 +0000
@@ -13,10 +13,206 @@
 using namespace mozilla;
 using dom::Promise;
 
+#if defined(XP_WIN)
+#include <combaseapi.h>
+#include <ntsecapi.h>
+#include <wincred.h>
+#include <windows.h>
+struct HandleCloser
+{
+  typedef HANDLE pointer;
+  void operator()(HANDLE h)
+  {
+    if(h != INVALID_HANDLE_VALUE) {
+        CloseHandle(h);
+    }
+  }
+};
+struct BufferFreer
+{
+    typedef LPVOID pointer;
+    void operator()(LPVOID b)
+    {
+      CoTaskMemFree(b);
+    }
+};
+typedef std::unique_ptr<HANDLE, HandleCloser> ScopedHANDLE;
+typedef std::unique_ptr<LPVOID, BufferFreer> ScopedBuffer;
+
+// Get the token info holding the sid.
+std::unique_ptr<char[]>
+GetTokenInfo(ScopedHANDLE& token)
+{
+  DWORD length = 0;
+  // https://docs.microsoft.com/en-us/windows/desktop/api/securitybaseapi/nf-securitybaseapi-gettokeninformation
+  mozilla::Unused << GetTokenInformation(token.get(), TokenUser, nullptr, 0,
+                                         &length);
+  if (!length || GetLastError() != ERROR_INSUFFICIENT_BUFFER) {
+    MOZ_LOG(gCredentialManagerSecretLog,
+            LogLevel::Debug,
+            (""Unable to obtain current token info.""));
+    return nullptr;
+  }
+  std::unique_ptr<char[]> token_info(new char[length]);
+  if (!GetTokenInformation(token.get(), TokenUser, token_info.get(), length,
+                           &length)) {
+    MOZ_LOG(gCredentialManagerSecretLog,
+            LogLevel::Debug,
+            (""Unable to obtain current token info (second call, possible system error.""));
+    return nullptr;
+  }
+  return token_info;
+}
+
+std::unique_ptr<char[]>
+GetUserTokenInfo()
+{
+  // Get current user sid to make sure the same user got logged in.
+  HANDLE token;
+  if (!OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY, &token)) {
+    // Couldn't get a process token. This will fail any unlock attempts later.
+    MOZ_LOG(gCredentialManagerSecretLog,
+            LogLevel::Debug,
+            (""Unable to obtain process token.""));
+    return nullptr;
+  }
+  ScopedHANDLE scopedToken(token);
+  return GetTokenInfo(scopedToken);
+}
+
+// Use the Windows credential prompt to ask the user to authenticate the
+// currently used account.
+static nsresult
+ReauthenticateUserWindows(const nsACString& aPrompt,
+                          /* out */ bool& reauthenticated)
+{
+  reauthenticated = false;
+
+  HANDLE lsa;
+  // Get authentication handle for future user authentications.
+  // https://docs.microsoft.com/en-us/windows/desktop/api/ntsecapi/nf-ntsecapi-lsaconnectuntrusted
+  if (LsaConnectUntrusted(&lsa) != ERROR_SUCCESS) {
+    MOZ_LOG(gCredentialManagerSecretLog,
+            LogLevel::Debug,
+            (""Error aquiring lsa. Authentication attempts will fail.""));
+    return NS_ERROR_FAILURE;
+  }
+  ScopedHANDLE scopedLsa(lsa);
+
+  std::unique_ptr<char[]> userTokenInfo = GetUserTokenInfo();
+  if (!userTokenInfo || lsa == INVALID_HANDLE_VALUE) {
+    MOZ_LOG(gCredentialManagerSecretLog,
+            LogLevel::Debug,
+            (""Error setting up login and user token.""));
+    return NS_ERROR_FAILURE;
+  }
+
+  // CredUI prompt.
+  CREDUI_INFOW credui = {};
+  credui.cbSize = sizeof(credui);
+  // TODO: maybe set parent (Firefox) here.
+  credui.hwndParent = nullptr;
+  const nsString& prompt = PromiseFlatString(NS_ConvertUTF8toUTF16(aPrompt));
+  credui.pszMessageText = prompt.get();
+  credui.pszCaptionText = nullptr;
+  credui.hbmBanner = nullptr; // ignored
+
+  ULONG authPackage = 0;
+  LPVOID outCredBuffer = nullptr;
+  ULONG outCredSize = 0;
+  BOOL save = false;
+  // Could be used in next iteration if the previous login failed.
+  DWORD err = 0;
+
+  // Get user's Windows credentials.
+  // https://docs.microsoft.com/en-us/windows/desktop/api/wincred/nf-wincred-creduipromptforwindowscredentialsw
+  err = CredUIPromptForWindowsCredentialsW(&credui, err, &authPackage,
+                          nullptr, 0, &outCredBuffer, &outCredSize, &save,
+                          CREDUIWIN_ENUMERATE_CURRENT_USER);
+  ScopedBuffer scopedOutCredBuffer(outCredBuffer);
+  if (err != ERROR_SUCCESS) {
+    MOZ_LOG(gCredentialManagerSecretLog,
+            LogLevel::Debug,
+            (""Error getting authPackage for user login""));
+    return NS_ERROR_FAILURE;
+  }
+
+  // Verify the credentials.
+  TOKEN_SOURCE source;
+  PCHAR contextName = const_cast<PCHAR>(""Mozilla"");
+  size_t nameLength = std::min(TOKEN_SOURCE_LENGTH,
+                               static_cast<int>(strlen(contextName)));
+  // Note that the string must not be longer than TOKEN_SOURCE_LENGTH.
+  memcpy(source.SourceName, contextName, nameLength);
+  // https://docs.microsoft.com/en-us/windows/desktop/api/securitybaseapi/nf-securitybaseapi-allocatelocallyuniqueid
+  if (!AllocateLocallyUniqueId(&source.SourceIdentifier)) {
+      MOZ_LOG(gCredentialManagerSecretLog,
+              LogLevel::Debug,
+              (""Error allocating ID for logon process.""));
+      return NS_ERROR_FAILURE;
+  }
+
+  NTSTATUS substs;
+  void* profileBuffer = nullptr;
+  ULONG profileBufferLength = 0;
+  QUOTA_LIMITS limits = {0};
+  LUID luid;
+  HANDLE token;
+  LSA_STRING name;
+  name.Buffer = contextName;
+  name.Length = strlen(name.Buffer);
+  name.MaximumLength = name.Length;
+  // https://docs.microsoft.com/en-us/windows/desktop/api/ntsecapi/nf-ntsecapi-lsalogonuser
+  NTSTATUS sts = LsaLogonUser(scopedLsa.get(), &name, (SECURITY_LOGON_TYPE)Interactive,
+                      authPackage, scopedOutCredBuffer.get(),
+                      outCredSize, nullptr, &source, &profileBuffer,
+                      &profileBufferLength, &luid, &token, &limits,
+                      &substs);
+  ScopedHANDLE scopedToken(token);
+  LsaFreeReturnBuffer(profileBuffer);
+  LsaDeregisterLogonProcess(scopedLsa.get());
+  if (sts == ERROR_SUCCESS) {
+      MOZ_LOG(gCredentialManagerSecretLog,
+              LogLevel::Debug,
+              (""User logged in successfully.""));
+  } else {
+      MOZ_LOG(gCredentialManagerSecretLog,
+              LogLevel::Debug,
+              (""Login failed with %lx (%lx)."", sts, LsaNtStatusToWinError(sts)));
+      return NS_ERROR_FAILURE;
+  }
+
+  // The user can select any user to log-in on the authentication prompt.
+  // Make sure that the logged in user is the current user.
+  std::unique_ptr<char[]> logonTokenInfo = GetTokenInfo(scopedToken);
+  if (!logonTokenInfo) {
+      MOZ_LOG(gCredentialManagerSecretLog,
+              LogLevel::Debug,
+              (""Error getting logon token info.""));
+      return NS_ERROR_FAILURE;
+  }
+  PSID logonSID = reinterpret_cast<TOKEN_USER*>(logonTokenInfo.get())->User.Sid;
+  PSID userSID = reinterpret_cast<TOKEN_USER*>(userTokenInfo.get())->User.Sid;
+  if (EqualSid(userSID, logonSID)) {
+      MOZ_LOG(gCredentialManagerSecretLog,
+              LogLevel::Debug,
+              (""Login successfully (correct user).""));
+      reauthenticated = true;
+      return NS_OK;
+  }
+  MOZ_LOG(gCredentialManagerSecretLog, LogLevel::Debug,
+          (""Login failed (wrong user).""));
+  return NS_ERROR_FAILURE;
+}
+#endif
+
 static nsresult
 ReauthenticateUser(const nsACString& prompt, /* out */ bool& reauthenticated)
 {
   reauthenticated = false;
+#if defined(XP_WIN)
+  return ReauthenticateUserWindows(prompt, reauthenticated);
+#endif // Reauthentication is not implemented for this platform.
   return NS_OK;
 }
 
diff -r 72ce1b22eee8 -r c29048279fcc security/manager/ssl/moz.build
--- a/security/manager/ssl/moz.build	Mon Oct 22 15:26:32 2018 +0000
+++ b/security/manager/ssl/moz.build	Tue Oct 23 09:05:07 2018 +0000
@@ -155,6 +155,9 @@
     ]
 
 if CONFIG['OS_ARCH'] == 'WINNT':
+    OS_LIBS += [
+        'credui'
+    ]
     UNIFIED_SOURCES += [
         'CredentialManagerSecret.cpp',
     ]
diff -r 72ce1b22eee8 -r c29048279fcc security/manager/ssl/tests/unit/xpcshell.ini
--- a/security/manager/ssl/tests/unit/xpcshell.ini	Mon Oct 22 15:26:32 2018 +0000
+++ b/security/manager/ssl/tests/unit/xpcshell.ini	Tue Oct 23 09:05:07 2018 +0000
@@ -142,6 +142,9 @@
 run-sequentially = hardcoded ports
 [test_oskeystore.js]
 [test_osreauthenticator.js]
+# Reauthentication has been implemented on Windows, so running this test results in
+# the OS popping up a dialog, which means we can't run it in automation.
+skip-if = os == 'win'
 [test_password_prompt.js]
 [test_pinning.js]
 run-sequentially = hardcoded ports
","diff -r 0970fcc8e0d9 -r 433320ec2147 security/manager/ssl/OSReauthenticator.cpp
--- a/security/manager/ssl/OSReauthenticator.cpp	Tue Jul 07 18:05:27 2020 +0000
+++ b/security/manager/ssl/OSReauthenticator.cpp	Tue Jul 07 14:46:41 2020 +0000
@@ -63,8 +63,17 @@
     CoTaskMemFree(b);
   }
 };
+struct LsaDeregistrator {
+  typedef HANDLE pointer;
+  void operator()(HANDLE h) {
+    if (h != INVALID_HANDLE_VALUE) {
+      LsaDeregisterLogonProcess(h);
+    }
+  }
+};
 typedef std::unique_ptr<HANDLE, HandleCloser> ScopedHANDLE;
 typedef std::unique_ptr<LPVOID, BufferFreer> ScopedBuffer;
+typedef std::unique_ptr<HANDLE, LsaDeregistrator> ScopedLsaHANDLE;
 
 constexpr int64_t Int32Modulo = 2147483648;
 
@@ -293,7 +302,7 @@
   credui.hbmBanner = nullptr;  // ignored
 
   while (!reauthenticated) {
-    HANDLE lsa;
+    HANDLE lsa = INVALID_HANDLE_VALUE;
     // Get authentication handle for future user authentications.
     // https://docs.microsoft.com/en-us/windows/desktop/api/ntsecapi/nf-ntsecapi-lsaconnectuntrusted
     if (LsaConnectUntrusted(&lsa) != ERROR_SUCCESS) {
@@ -301,7 +310,7 @@
               (""Error acquiring lsa. Authentication attempts will fail.""));
       return NS_ERROR_FAILURE;
     }
-    ScopedHANDLE scopedLsa(lsa);
+    ScopedLsaHANDLE scopedLsa(lsa);
 
     if (!userTokenInfo || lsa == INVALID_HANDLE_VALUE) {
       MOZ_LOG(gCredentialManagerSecretLog, LogLevel::Debug,
@@ -349,7 +358,7 @@
     ULONG profileBufferLength = 0;
     QUOTA_LIMITS limits = {0};
     LUID luid;
-    HANDLE token;
+    HANDLE token = INVALID_HANDLE_VALUE;
     LSA_STRING name;
     name.Buffer = contextName;
     name.Length = strlen(name.Buffer);
@@ -361,7 +370,6 @@
         &profileBuffer, &profileBufferLength, &luid, &token, &limits, &substs);
     ScopedHANDLE scopedToken(token);
     LsaFreeReturnBuffer(profileBuffer);
-    LsaDeregisterLogonProcess(scopedLsa.get());
     if (sts == ERROR_SUCCESS) {
       MOZ_LOG(gCredentialManagerSecretLog, LogLevel::Debug,
               (""User logged in successfully.""));
",1498518,c29048279fcc7ffa7785a17b3afaf7b97e915c72,"Bug 1498518 - user authentication prompts for Windows, r=keeler,mhowell

Depends on D8480

Differential Revision: https://phabricator.services.mozilla.com/D8530",1574259,"Bug 1574259 - Improve resource management in ReauthenticateUserWindows r=dmajor,mhowell

Differential Revision: https://phabricator.services.mozilla.com/D82393",2018-10-23T09:05:00+00:00,Windows re-authentication,,Review resource management in ReauthenticateUserWindows,"I noticed some issues in ReauthenticateUserWindows:

[The doc for LsaConnectUntrusted](https://docs.microsoft.com/en-us/windows/win32/api/ntsecapi/nf-ntsecapi-lsaconnectuntrusted) says ""The handle should be closed using the LsaDeregisterLogonProcess function."" which we do, but then the `ScopedHANDLE` additionally calls `CloseHandle` which seems like one too many closings.  `lsa` should probably get its own separate RAII struct that calls `LsaDeregisterLogonProcess`. (Also this would ensure that `LsaDeregisterLogonProcess` gets called even if we take one of the early returns)

Second, this pattern around LsaLogonUser is fragile:

```
  HANDLE token;
  NTSTATUS sts = LsaLogonUser(...);
  ScopedHANDLE scopedToken(token);
  if (sts ...) {
```

Generally the contract with Windows APIs is that you can rely on them to populate output parameters as long as the API succeeds.

If the API fails, `token` may be left uninitialized, and the RAII helper's `CloseHandle` could do bad things. Either the `ScopedHandle` should be established _after_ checking the return value, or `token` should be initialized to a safe value before the API call."
edf1418cd48f2d6e489518e0ccb640d59fde5ee3,2019-08-22T09:39:00+00:00,"diff -r 15048bfaf5ef -r 61d898c2b444 js/src/moz.build
--- a/js/src/moz.build	Wed Aug 14 18:54:30 2019 +0000
+++ b/js/src/moz.build	Thu Aug 15 15:06:07 2019 +0000
@@ -406,6 +406,7 @@
     'frontend',
     'gc',
     'jit',
+    'rust',
     'wasm',
     'zydis',
 ]
diff -r 15048bfaf5ef -r 61d898c2b444 js/src/rust/moz.build
--- a/js/src/rust/moz.build	Wed Aug 14 18:54:30 2019 +0000
+++ b/js/src/rust/moz.build	Thu Aug 15 15:06:07 2019 +0000
@@ -6,14 +6,15 @@
 
 features = []
 
-if CONFIG['JS_CODEGEN_X64'] or CONFIG['JS_CODEGEN_X86']:
-    features += ['cranelift_x86']
-elif CONFIG['JS_CODEGEN_ARM']:
-    features += ['cranelift_arm32']
-elif CONFIG['JS_CODEGEN_ARM64']:
-    features += ['cranelift_arm64']
-else:
-    features += ['cranelift_none']
+if CONFIG['ENABLE_WASM_CRANELIFT']:
+    if CONFIG['JS_CODEGEN_X64'] or CONFIG['JS_CODEGEN_X86']:
+        features += ['cranelift_x86']
+    elif CONFIG['JS_CODEGEN_ARM']:
+        features += ['cranelift_arm32']
+    elif CONFIG['JS_CODEGEN_ARM64']:
+        features += ['cranelift_arm64']
+    else:
+        features += ['cranelift_none']
 
 RustLibrary('jsrust', features)
 
diff -r 15048bfaf5ef -r 61d898c2b444 js/src/wasm/moz.build
--- a/js/src/wasm/moz.build	Wed Aug 14 18:54:30 2019 +0000
+++ b/js/src/wasm/moz.build	Thu Aug 15 15:06:07 2019 +0000
@@ -16,7 +16,6 @@
 include('../js-cxxflags.mozbuild')
 
 if CONFIG['ENABLE_WASM_CRANELIFT']:
-    DIRS += ['../rust']
     UNIFIED_SOURCES += [
         'WasmCraneliftCompile.cpp',
     ]
","diff -r b1c39cc82f19 -r edf1418cd48f js/src/js-standalone.mozbuild
--- a/js/src/js-standalone.mozbuild	Thu Aug 22 13:41:13 2019 +0300
+++ b/js/src/js-standalone.mozbuild	Thu Aug 22 09:39:29 2019 +0000
@@ -7,9 +7,8 @@
 # These configure options are needed by standalone SpiderMonkey tools. The full
 # Gecko build performs equivalents elsewhere in its configuration.
 
-if CONFIG['ENABLE_WASM_CRANELIFT']:
-    USE_LIBS += [
-        'jsrust'
-    ]
+USE_LIBS += [
+    'jsrust'
+]
 
 OS_LIBS += CONFIG['MOZ_ZLIB_LIBS']
",1573098,61d898c2b4445f0a10c6d8b618e0dc13519642ce,"Bug 1573098: Build Spidermonkey Rust's library unconditionally; r=froydnj

Differential Revision: https://phabricator.services.mozilla.com/D41992",1575769,"Bug 1575769 - Link jsrust to standalone SpiderMonkey unconditionally. r=bbouvier

Differential Revision: https://phabricator.services.mozilla.com/D43015",2019-08-15T15:06:00+00:00,Make non-Firefox builds of SpiderMonkey build jsrust unconditionally,"Bug 1572364 made `jsrust_shared` part of the Firefox build regardless of whether Cranelift is enabled or not to enable making `encoding_c_mem` (see bug 1490601) available to SpiderMonkey without FFI symbol duplication with `gkrust_shared`. To enable building `encoding_c_mem` or other future non-Cranelift Rust code as part of a non-Firefox SpiderMonkey build even when Cranelift is not enabled, non-Firefox SpiderMonkey builds should build and link `jsrust` and `jsrust_shared` unconditionally instead of only when Cranelift is enabled.",Link jsrust to standalone SpiderMonkey unconditionally,Bug 1573098 made it build but not link.
0f5a98fe760847762c1536443c87fa81349c70fe,2020-06-01T15:58:00+00:00,"diff -r 96075609026a -r 7b77bedf4ca3 mobile/android/geckoview/build.gradle
--- a/mobile/android/geckoview/build.gradle	Mon Aug 12 21:59:58 2019 +0000
+++ b/mobile/android/geckoview/build.gradle	Tue Aug 13 01:45:03 2019 +0000
@@ -1,5 +1,7 @@
 buildDir ""${topobjdir}/gradle/build/mobile/android/geckoview""
 
+import groovy.json.JsonOutput
+
 apply plugin: 'com.android.library'
 apply plugin: 'checkstyle'
 apply plugin: 'kotlin-android'
@@ -199,26 +201,6 @@
     }
 }
 
-tasks.withType(Javadoc) {
-    // Implement warning-as-error for javadoc.
-    def warnings = 0
-    def listener = {
-        if (it.contains(': warning')) {
-            warnings++
-        }
-    } as StandardOutputListener
-
-    doFirst {
-        logging.addStandardErrorListener(listener)
-    }
-    doLast {
-        logging.removeStandardErrorListener(listener)
-        if (warnings > 0) {
-            throw new GradleException(""Treating $warnings javadoc warning(s) as error(s)"")
-        }
-    }
-}
-
 dependencies {
     implementation ""com.android.support:support-v4:$support_library_version""
     implementation ""com.android.support:palette-v7:$support_library_version""
@@ -263,6 +245,32 @@
             classpath = files(variant.javaCompileProvider.get().classpath.files)
         }
 
+        def results = []
+        def listener = {
+            // Like '/abs/path/to/topsrcdir/mobile/android/geckoview/src/main/java/org/mozilla/geckoview/ContentBlocking.java:480: warning: no @return'
+            def matches = (it =~ /(.+):(\d+): (warning|error): (.*)/)
+            if (!matches) {
+                return
+            }
+            def (_, file, line, level, message) = matches[0]
+            results << [path: file, lineno: line, level: level, message: message]
+        } as StandardOutputListener
+
+        doFirst {
+            logging.addStandardErrorListener(listener)
+        }
+
+        doLast {
+            logging.removeStandardErrorListener(listener)
+
+            // We used to treat Javadoc warnings as errors here; now we rely on the
+            // `android-javadoc` linter to fail in the face of Javadoc warnings.
+            def resultsJson = JsonOutput.toJson(results)
+
+            file(""$buildDir/reports"").mkdirs()
+            file(""$buildDir/reports/javadoc-results-${name}.json"").write(resultsJson)
+        }
+
         source = variant.sourceSets.collect({ it.java.srcDirs })
         exclude '**/R.java', '**/BuildConfig.java'
         include 'org/mozilla/geckoview/**.java'
diff -r 96075609026a -r 7b77bedf4ca3 mobile/android/gradle.configure
--- a/mobile/android/gradle.configure	Mon Aug 12 21:59:58 2019 +0000
+++ b/mobile/android/gradle.configure	Tue Aug 13 01:45:03 2019 +0000
@@ -309,6 +309,25 @@
 
 
 @depends(gradle_android_build_config)
+def gradle_android_geckoview_docs_output_files(build_config):
+    '''Output files for GeckoView javadoc.'''
+
+    def uncapitalize(s):
+        if s:
+            return s[0].lower() + s[1:]
+        else:
+            return s
+
+    variant = uncapitalize(build_config.geckoview.variant.name)
+
+    return [
+        'gradle/build/mobile/android/geckoview/reports/javadoc-results-{}.json'.format(variant),
+    ]
+
+set_config('GRADLE_ANDROID_GECKOVIEW_DOCS_OUTPUT_FILES', gradle_android_geckoview_docs_output_files)
+
+
+@depends(gradle_android_build_config)
 def gradle_android_archive_coverage_artifacts_tasks(build_config):
     '''Gradle tasks run by |mach android archive-coverage-artifacts|.'''
     return [
diff -r 96075609026a -r 7b77bedf4ca3 taskcluster/ci/source-test/mozlint-android.yml
--- a/taskcluster/ci/source-test/mozlint-android.yml	Mon Aug 12 21:59:58 2019 +0000
+++ b/taskcluster/ci/source-test/mozlint-android.yml	Tue Aug 13 01:45:03 2019 +0000
@@ -38,6 +38,9 @@
             - name: public/android/geckoview/apilint-result.json
               path: /builds/worker/checkouts/gecko/obj-firefox/gradle/build/mobile/android/geckoview/intermediates/classes/withGeckoBinaries/debug/apilint-result.json
               type: file
+            - name: public/android/geckoview/javadoc-results.json
+              path: /builds/worker/checkouts/gecko/obj-firefox/gradle/build/mobile/android/geckoview/reports/javadoc-results-withGeckoBinariesDebug.json
+              type: file
             - name: public/app/unittest
               path: /builds/worker/checkouts/gecko/obj-firefox/gradle/build/mobile/android/app/reports/tests
               type: directory
@@ -75,6 +78,7 @@
             ./mach --log-no-times build &&
             ./mach --log-no-times lint -f treeherder -f json:/builds/worker/mozlint.json
             --linter android-api-lint
+            --linter android-javadoc
             --linter android-checkstyle
             --linter android-findbugs
             --linter android-lint
diff -r 96075609026a -r 7b77bedf4ca3 tools/lint/android-javadoc.yml
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/tools/lint/android-javadoc.yml	Tue Aug 13 01:45:03 2019 +0000
@@ -0,0 +1,15 @@
+---
+android-javadoc:
+    description: Android javadoc
+    include: ['mobile/android/geckoview']
+    exclude: []
+    extensions: ['java', 'kt']
+    support-files:
+        - 'mobile/android/**/Makefile.in'
+        - 'mobile/android/config/**'
+        - 'mobile/android/gradle.configure'
+        - 'mobile/android/**/moz.build'
+        - '**/*.gradle'
+    type: global
+    payload: android.lints:javadoc
+    setup: android.lints:setup
diff -r 96075609026a -r 7b77bedf4ca3 tools/lint/android/lints.py
--- a/tools/lint/android/lints.py	Mon Aug 12 21:59:58 2019 +0000
+++ b/tools/lint/android/lints.py	Tue Aug 13 01:45:03 2019 +0000
@@ -115,6 +115,32 @@
     return results
 
 
+def javadoc(config, **lintargs):
+    topsrcdir = lintargs['root']
+    topobjdir = lintargs['topobjdir']
+
+    gradle(topsrcdir=topsrcdir, topobjdir=topobjdir,
+           tasks=lintargs['substs']['GRADLE_ANDROID_GECKOVIEW_DOCS_TASKS'],
+           extra_args=lintargs.get('extra_args') or [])
+
+    output_files = lintargs['substs']['GRADLE_ANDROID_GECKOVIEW_DOCS_OUTPUT_FILES']
+
+    results = []
+
+    for output_file in output_files:
+        with open(os.path.join(topobjdir, output_file)) as f:
+            # Like: '[{""path"":""/absolute/path/to/topsrcdir/mobile/android/geckoview/src/main/java/org/mozilla/geckoview/ContentBlocking.java"",""lineno"":""462"",""level"":""warning"",""message"":""no @return""}]'.  # NOQA: E501
+            issues = json.load(f)
+
+            for issue in issues:
+                issue['path'] = issue['path'].replace(lintargs['root'], '')
+                # We want warnings to be errors for linting purposes.
+                issue['level'] = 'error'
+                results.append(result.from_config(config, **issue))
+
+    return results
+
+
 def lint(config, **lintargs):
     topsrcdir = lintargs['root']
     topobjdir = lintargs['topobjdir']
","diff -r eb654059cd8b -r 0f5a98fe7608 mobile/android/geckoview/build.gradle
--- a/mobile/android/geckoview/build.gradle	Mon Jun 01 15:58:05 2020 +0000
+++ b/mobile/android/geckoview/build.gradle	Mon Jun 01 15:58:03 2020 +0000
@@ -255,6 +255,15 @@
         failOnError = false
         description = ""Generate Javadoc for build variant $name""
         destinationDir = new File(destinationDir, variant.baseName)
+
+        // The javadoc task will not re-run if the previous run is still up-to-date,
+        // this is a problem for the javadoc lint, which needs to read the output of the task
+        // to determine if there are warnings or errors. To force that we pass a -Pandroid-lint
+        // parameter to all lints that can be used here to force running the task every time.
+        outputs.upToDateWhen {
+            !project.hasProperty('android-lint')
+        }
+
         doFirst {
             classpath = files(variant.javaCompileProvider.get().classpath.files)
         }
diff -r eb654059cd8b -r 0f5a98fe7608 tools/lint/android/lints.py
--- a/tools/lint/android/lints.py	Mon Jun 01 15:58:05 2020 +0000
+++ b/tools/lint/android/lints.py	Mon Jun 01 15:58:03 2020 +0000
@@ -43,8 +43,11 @@
     from gradle import gradle_lock
 
     with gradle_lock(topobjdir, max_wait_seconds=GRADLE_LOCK_MAX_WAIT_SECONDS):
+        # The android-lint parameter can be used by gradle tasks to run special
+        # logic when they are run for a lint using
+        #   project.hasProperty('android-lint')
         cmd_args = [sys.executable, os.path.join(topsrcdir, 'mach'),
-                    'gradle', '--verbose', '--'] + \
+                    'gradle', '--verbose', '-Pandroid-lint', '--'] + \
             tasks + \
             extra_args
 
",1542004,7b77bedf4ca3985787482064df89323576c6d616,"Bug 1542004 - Add `android-javadoc` lint. r=agi

This also applies the error listener just to the Javadoc tasks
(previously, it applied to the `apiGenerate*` tasks as well, 'cuz they
inherit from `Javadoc`).

Differential Revision: https://phabricator.services.mozilla.com/D41634",1575999,"Bug 1575999 - Always run javadoc tasks during lint. r=nalexander,esawin

Differential Revision: https://phabricator.services.mozilla.com/D77489",2019-08-13T01:45:00+00:00,Add Android javadoc lint so that javadoc errors cause backouts,"There's a javadoc error checked in in the current mozilla-central that somehow got in and now it's failing try builds.

See here e.g.: https://treeherder.mozilla.org/#/jobs?repo=try&revision=4cdb6c9de509c7aef5b2b58a1e23bf5bf77bf12d

We should figure out how these things pass the tests when they are checked in.",Android javadoc lint isn't sufficiently strict,"Locally, I observe:
```2:07.37 /Users/nalexander/Mozilla/gecko/mobile/android/geckoview/src/main/java/org/mozilla/geckoview/GeckoRuntime.java:525: warning: no @param for delegate
 2:07.37     public void setWebNotificationDelegate(final @Nullable WebNotificationDelegate delegate) {
 2:07.37                 ^
 2:07.58 1 warning
```
How did that sneak past the new Javadoc lint?  The answer is that it’s an “up-to-date” thing.  The way that Gradle works, it doesn’t actually re-run the Javadoc task, so the warning doesn’t show up if it's shown up in a previous task (build, say).  That's what's happening, I think, in the `A(lints)` job where this landed: https://treeherder.mozilla.org/#/jobs?repo=autoland&revision=2d59ce318c46327d78c46c00086ea847223c383c&selectedJob=262768326.

To address this, I reckon that we need to do one of the following, in rough descending order of preference:

1. Ensure that the JSON output file is a task output, and ensure that it's not in the objdir before we run the lint, so that the task must run to create it
2. Split the Gradle tasks in some way so that Javadoc always runs
3. Force the Javadoc task to always run (and accept slower local builds)"
06a3816a2a49d95c16f13c6cb64ba0f66a95c398,2019-08-27T23:30:00+00:00,"diff -r f5c3925fab83 -r 6473a165521b browser/components/customizableui/CustomizableUI.jsm
--- a/browser/components/customizableui/CustomizableUI.jsm	Tue Aug 27 14:30:53 2019 +0000
+++ b/browser/components/customizableui/CustomizableUI.jsm	Tue Aug 27 14:35:52 2019 +0000
@@ -233,7 +233,7 @@
     ];
 
     if (AppConstants.MOZ_DEV_EDITION) {
-      navbarPlacements.splice(2, 0, ""developer-button"");
+      navbarPlacements.splice(7, 0, ""developer-button"");
     }
 
     this.registerArea(
","diff -r 375480007a0a -r 06a3816a2a49 browser/base/content/test/performance/browser_windowopen.js
--- a/browser/base/content/test/performance/browser_windowopen.js	Wed Aug 28 07:20:53 2019 +0000
+++ b/browser/base/content/test/performance/browser_windowopen.js	Tue Aug 27 23:30:49 2019 +0000
@@ -83,12 +83,7 @@
             inRange(r.h, 13, 14) &&
             inRange(r.w, 14, 16) && // icon size
             inRange(r.y1, 40, 80) && // in the toolbar
-            // near the left side of the screen
-            // The reload icon is shifted on devedition builds
-            // where there's an additional devtools toolbar icon.
-            AppConstants.MOZ_DEV_EDITION
-              ? inRange(r.x1, 100, 120)
-              : inRange(r.x1, 65, 100),
+            inRange(r.x1, 65, 100), // near the left side of the screen
         },
         {
           name: ""bug 1555842 - the urlbar shouldn't flicker"",
",1573485,6473a165521bcfb94176525ed6b89a7dbe511c35,"Bug 1573485 - put developer tools button back on the right/end of the toolbar in devedition, r=pbro,jaws

Differential Revision: https://phabricator.services.mozilla.com/D43599",1576936,"Bug 1576936 - fix browser_windowopen for devtools button having moved, r=jaws

Differential Revision: https://phabricator.services.mozilla.com/D43625",2019-08-27T14:35:00+00:00,Devtools button in odd place on devedition,"## What were you doing?

0. open devedition with new profile

## What happened?

The devtools button shows up before the reload/stop button

## What should have happened?

The devtools button should show up somewhere sensible.

## Anything else we should know? 

Originally, [CustomizableUI did this](https://searchfox.org/mozilla-central/rev/3f6801477a1d588943a3ede9abda1fa38f5333d5/browser/components/customizableui/CustomizableUI.jsm#226-237):

```js
    let navbarPlacements = [
      ""urlbar-container"",
      ""search-container"",
      ""bookmarks-menu-button"",
      ""downloads-button"",
      ""home-button"",
      ""loop-button"",
    ];

    if (AppConstants.MOZ_DEV_EDITION) {
      navbarPlacements.splice(2, 0, ""developer-button"");
    }
```

But after photon the code looks like this:

```js

    let navbarPlacements = [
      ""back-button"",
      ""forward-button"",
      ""stop-reload-button"",
      ""home-button"",
      ""spring"",
      ""urlbar-container"",
      ""spring"",
      ""downloads-button"",
      ""library-button"",
      ""sidebar-button"",
      ""fxa-toolbar-menu-button"",
    ];

    if (AppConstants.MOZ_DEV_EDITION) {
      navbarPlacements.splice(2, 0, ""developer-button"");
    }
```

so the effect is a bit lost.

I expect it should be inserted somewhere like after the sidebar and before the accounts button, or before the downloads button, instead.

I don't know who makes the call about what the right place is. I'm also astonished this has been left like this so long, so maybe I'm the only person who thinks it's weird? Do we still care about devedition now that it's not aurora anymore?",Perma devedition performance/browser_windowopen.js failure - unexpected changed rect for 70 going to beta,"Trypush:

https://treeherder.mozilla.org/#/jobs?repo=try&revision=ac997a15f7b2a2fa878e6b9d8e601bdb3f2c5b60&selectedJob=263704278

The offending code is at https://searchfox.org/mozilla-central/rev/325c1a707819602feff736f129cb36055ba6d94f/browser/base/content/test/performance/browser_windowopen.js#86-91 . Now that the devtools button is further to the right, the reload button no longer shifts. Just getting rid of the ternary there will shut this back up again."
286c8a68ee03d9fa36fa2695ad423b3b3ce1b036,2020-06-12T17:03:00+00:00,"diff -r 0c6e149ba01d -r 9823d19217e2 widget/cocoa/nsMacDockSupport.h
--- a/widget/cocoa/nsMacDockSupport.h	Fri Jun 28 13:44:15 2019 +0000
+++ b/widget/cocoa/nsMacDockSupport.h	Fri Jun 28 14:17:47 2019 +0000
@@ -9,7 +9,8 @@
 #include ""nsITimer.h""
 #include ""nsCOMPtr.h""
 #include ""nsString.h""
-#include ""nsNativeThemeCocoa.h""
+
+@class MOZProgressDockOverlayView;
 
 class nsMacDockSupport : public nsIMacDockSupport, public nsITaskbarProgress {
  public:
@@ -25,16 +26,11 @@
   nsCOMPtr<nsIStandaloneNativeMenu> mDockMenu;
   nsString mBadgeText;
 
-  NSImage *mAppIcon, *mProgressBackground;
+  NSView* mDockTileWrapperView;
+  MOZProgressDockOverlayView* mProgressDockOverlayView;
 
-  HIRect mProgressBounds;
   nsTaskbarProgressState mProgressState;
   double mProgressFraction;
-  nsCOMPtr<nsITimer> mProgressTimer;
-  RefPtr<nsNativeThemeCocoa> mTheme;
 
-  static void RedrawIconCallback(nsITimer* aTimer, void* aClosure);
-
-  bool InitProgress();
-  nsresult RedrawIcon();
+  nsresult UpdateDockTile();
 };
diff -r 0c6e149ba01d -r 9823d19217e2 widget/cocoa/nsMacDockSupport.mm
--- a/widget/cocoa/nsMacDockSupport.mm	Fri Jun 28 13:44:15 2019 +0000
+++ b/widget/cocoa/nsMacDockSupport.mm	Fri Jun 28 14:17:47 2019 +0000
@@ -11,27 +11,73 @@
 
 NS_IMPL_ISUPPORTS(nsMacDockSupport, nsIMacDockSupport, nsITaskbarProgress)
 
+// This view is used in the dock tile when we're downloading a file.
+// It draws a progress bar that looks similar to the native progress bar on
+// 10.12. This style of progress bar is not animated, unlike the pre-10.10
+// progress bar look which had to redrawn multiple times per second.
+@interface MOZProgressDockOverlayView : NSView {
+  double mFractionValue;
+}
+@property double fractionValue;
+
+@end
+
+@implementation MOZProgressDockOverlayView
+
+@synthesize fractionValue = mFractionValue;
+
+- (void)drawRect:(NSRect)aRect {
+  // Erase the background behind this view, i.e. cut a rectangle hole in the icon.
+  [[NSColor clearColor] set];
+  NSRectFill(self.bounds);
+
+  // Split the height of this view into four quarters. The middle two quarters
+  // will be covered by the actual progress bar.
+  CGFloat radius = self.bounds.size.height / 4;
+  NSRect barBounds = NSInsetRect(self.bounds, 0, radius);
+
+  NSBezierPath* path = [NSBezierPath bezierPathWithRoundedRect:barBounds
+                                                       xRadius:radius
+                                                       yRadius:radius];
+
+  // Draw a grayish background first.
+  [[NSColor colorWithDeviceWhite:0 alpha:0.1] setFill];
+  [path fill];
+
+  // Draw a blue or gray fill (depending on graphite or not) for the progress part.
+  NSRect progressFillRect = self.bounds;
+  progressFillRect.size.width *= mFractionValue;
+  [NSGraphicsContext saveGraphicsState];
+  [NSBezierPath clipRect:progressFillRect];
+  [[NSColor keyboardFocusIndicatorColor] setFill];
+  [path fill];
+  [NSGraphicsContext restoreGraphicsState];
+
+  // Add a shadowy stroke on top.
+  [NSGraphicsContext saveGraphicsState];
+  [path addClip];
+  [[NSColor colorWithDeviceWhite:0 alpha:0.2] setStroke];
+  path.lineWidth = barBounds.size.height / 10;
+  [path stroke];
+  [NSGraphicsContext restoreGraphicsState];
+}
+
+@end
+
 nsMacDockSupport::nsMacDockSupport()
-    : mAppIcon(nil),
-      mProgressBackground(nil),
-      mProgressBounds(),
+    : mDockTileWrapperView(nil),
+      mProgressDockOverlayView(nil),
       mProgressState(STATE_NO_PROGRESS),
-      mProgressFraction(0.0) {
-  mProgressTimer = NS_NewTimer();
-}
+      mProgressFraction(0.0) {}
 
 nsMacDockSupport::~nsMacDockSupport() {
-  if (mAppIcon) {
-    [mAppIcon release];
-    mAppIcon = nil;
+  if (mDockTileWrapperView) {
+    [mDockTileWrapperView release];
+    mDockTileWrapperView = nil;
   }
-  if (mProgressBackground) {
-    [mProgressBackground release];
-    mProgressBackground = nil;
-  }
-  if (mProgressTimer) {
-    mProgressTimer->Cancel();
-    mProgressTimer = nullptr;
+  if (mProgressDockOverlayView) {
+    [mProgressDockOverlayView release];
+    mProgressDockOverlayView = nil;
   }
 }
 
@@ -100,67 +146,50 @@
     mProgressFraction = (double)aCurrentValue / aMaxValue;
   }
 
-  if (mProgressState == STATE_NORMAL || mProgressState == STATE_INDETERMINATE) {
-    int perSecond = 8;  // Empirically determined, see bug 848792
-    mProgressTimer->InitWithNamedFuncCallback(RedrawIconCallback, this, 1000 / perSecond,
-                                              nsITimer::TYPE_REPEATING_SLACK,
-                                              ""nsMacDockSupport::RedrawIconCallback"");
-    return NS_OK;
-  } else {
-    mProgressTimer->Cancel();
-    return RedrawIcon();
-  }
-}
-
-// static
-void nsMacDockSupport::RedrawIconCallback(nsITimer* aTimer, void* aClosure) {
-  static_cast<nsMacDockSupport*>(aClosure)->RedrawIcon();
+  return UpdateDockTile();
 }
 
-// Return whether to draw progress
-bool nsMacDockSupport::InitProgress() {
-  if (mProgressState != STATE_NORMAL && mProgressState != STATE_INDETERMINATE) {
-    return false;
-  }
-
-  if (!mAppIcon) {
-    mProgressTimer = NS_NewTimer();
-    mAppIcon = [[NSImage imageNamed:@""NSApplicationIcon""] retain];
-    mProgressBackground = [mAppIcon copyWithZone:nil];
-    mTheme = new nsNativeThemeCocoa();
-
-    NSSize sz = [mProgressBackground size];
-    mProgressBounds =
-        CGRectMake(sz.width * 1 / 32, sz.height * 3 / 32, sz.width * 30 / 32, sz.height * 4 / 32);
-    [mProgressBackground lockFocus];
-    [[NSColor clearColor] set];
-    NSRectFill(NSRectFromCGRect(mProgressBounds));
-    [mProgressBackground unlockFocus];
-  }
-  return true;
-}
-
-nsresult nsMacDockSupport::RedrawIcon() {
+nsresult nsMacDockSupport::UpdateDockTile() {
   NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT;
 
-  if (InitProgress()) {
-    // TODO: - Implement ERROR and PAUSED states?
-    NSImage* icon = [mProgressBackground copyWithZone:nil];
+  if (mProgressState == STATE_NORMAL || mProgressState == STATE_INDETERMINATE) {
+    if (!mDockTileWrapperView) {
+      // Create the following NSView hierarchy:
+      // * mDockTileWrapperView (NSView)
+      //    * imageView (NSImageView) <- has the application icon
+      //    * mProgressDockOverlayView (MOZProgressDockOverlayView) <- draws the progress bar
+
+      mDockTileWrapperView = [[NSView alloc] initWithFrame:NSMakeRect(0, 0, 32, 32)];
+      mDockTileWrapperView.autoresizingMask = NSViewWidthSizable | NSViewHeightSizable;
+
+      NSImageView* imageView = [[NSImageView alloc] initWithFrame:[mDockTileWrapperView bounds]];
+      imageView.image = [NSImage imageNamed:@""NSApplicationIcon""];
+      imageView.imageScaling = NSImageScaleAxesIndependently;
+      imageView.autoresizingMask = NSViewWidthSizable | NSViewHeightSizable;
+      [mDockTileWrapperView addSubview:imageView];
 
-    [icon lockFocus];
-    CGContextRef ctx = (CGContextRef)[[NSGraphicsContext currentContext] graphicsPort];
-    nsNativeThemeCocoa::ProgressParams params;
-    params.value = mProgressFraction;
-    params.max = 1.0;
-    params.insideActiveWindow = true;
-    params.indeterminate = (mProgressState != STATE_NORMAL);
-    params.horizontal = true;
-    mTheme->DrawProgress(ctx, mProgressBounds, params);
-    [icon unlockFocus];
-    [NSApp setApplicationIconImage:icon];
-    [icon release];
-  } else {
-    [NSApp setApplicationIconImage:mAppIcon];
+      mProgressDockOverlayView =
+          [[MOZProgressDockOverlayView alloc] initWithFrame:NSMakeRect(1, 3, 30, 4)];
+      mProgressDockOverlayView.autoresizingMask = NSViewMinXMargin | NSViewWidthSizable |
+                                                  NSViewMaxXMargin | NSViewMinYMargin |
+                                                  NSViewHeightSizable | NSViewMaxYMargin;
+      [mDockTileWrapperView addSubview:mProgressDockOverlayView];
+    }
+    if (NSApp.dockTile.contentView != mDockTileWrapperView) {
+      NSApp.dockTile.contentView = mDockTileWrapperView;
+    }
+
+    if (mProgressState == STATE_NORMAL) {
+      mProgressDockOverlayView.fractionValue = mProgressFraction;
+    } else {
+      // Indeterminate states are rare. Just fill the entire progress bar in
+      // that case.
+      mProgressDockOverlayView.fractionValue = 1.0;
+    }
+    [NSApp.dockTile display];
+  } else if (NSApp.dockTile.contentView) {
+    NSApp.dockTile.contentView = nil;
+    [NSApp.dockTile display];
   }
 
   return NS_OK;
","diff -r 623a8cd7d34e -r 286c8a68ee03 widget/cocoa/nsMacDockSupport.mm
--- a/widget/cocoa/nsMacDockSupport.mm	Sat Jun 13 17:16:24 2020 +0300
+++ b/widget/cocoa/nsMacDockSupport.mm	Fri Jun 12 17:03:31 2020 +0000
@@ -8,6 +8,7 @@
 #include ""nsComponentManagerUtils.h""
 #include ""nsMacDockSupport.h""
 #include ""nsObjCExceptions.h""
+#include ""nsNativeThemeColors.h""
 
 NS_IMPL_ISUPPORTS(nsMacDockSupport, nsIMacDockSupport, nsITaskbarProgress)
 
@@ -44,12 +45,12 @@
   [[NSColor colorWithDeviceWhite:0 alpha:0.1] setFill];
   [path fill];
 
-  // Draw a blue or gray fill (depending on graphite or not) for the progress part.
+  // Draw a fill in the control accent color for the progress part.
   NSRect progressFillRect = self.bounds;
   progressFillRect.size.width *= mFractionValue;
   [NSGraphicsContext saveGraphicsState];
   [NSBezierPath clipRect:progressFillRect];
-  [[NSColor keyboardFocusIndicatorColor] setFill];
+  [ControlAccentColor() setFill];
   [path fill];
   [NSGraphicsContext restoreGraphicsState];
 
diff -r 623a8cd7d34e -r 286c8a68ee03 widget/cocoa/nsNativeThemeCocoa.mm
--- a/widget/cocoa/nsNativeThemeCocoa.mm	Sat Jun 13 17:16:24 2020 +0300
+++ b/widget/cocoa/nsNativeThemeCocoa.mm	Fri Jun 12 17:03:31 2020 +0000
@@ -2664,12 +2664,6 @@
   CGColorSpaceRelease(rgb);
 }
 
-#if !defined(MAC_OS_X_VERSION_10_14) || MAC_OS_X_VERSION_MAX_ALLOWED < MAC_OS_X_VERSION_10_14
-@interface NSColor (NSColorControlAccentColor)
-@property(class, strong, readonly) NSColor* controlAccentColor NS_AVAILABLE_MAC(10_14);
-@end
-#endif
-
 void nsNativeThemeCocoa::DrawSourceListSelection(CGContextRef aContext, const CGRect& aRect,
                                                  bool aWindowIsActive, bool aSelectionIsActive) {
   if (!nsCocoaFeatures::OnYosemiteOrLater()) {
@@ -2688,16 +2682,7 @@
   NSColor* fillColor;
   if (aSelectionIsActive) {
     // Active selection, blue or graphite.
-    if (@available(macOS 10.14, *)) {
-      fillColor = [NSColor controlAccentColor];
-    } else {
-      // Pre-10.14, use hardcoded colors.
-      if ([NSColor currentControlTint] == NSGraphiteControlTint) {
-        fillColor = [NSColor colorWithSRGBRed:0.635 green:0.635 blue:0.655 alpha:1.0];
-      } else {
-        fillColor = [NSColor colorWithSRGBRed:0.247 green:0.584 blue:0.965 alpha:1.0];
-      }
-    }
+    fillColor = ControlAccentColor();
   } else {
     // Inactive selection, gray.
     if (aWindowIsActive) {
diff -r 623a8cd7d34e -r 286c8a68ee03 widget/cocoa/nsNativeThemeColors.h
--- a/widget/cocoa/nsNativeThemeColors.h	Sat Jun 13 17:16:24 2020 +0300
+++ b/widget/cocoa/nsNativeThemeColors.h	Fri Jun 12 17:03:31 2020 +0000
@@ -31,20 +31,37 @@
     {0xB3, 0xD1},  // bottom separator line
 };
 
-__attribute__((unused)) static int NativeGreyColorAsInt(ColorName name, BOOL isMain) {
+inline int NativeGreyColorAsInt(ColorName name, BOOL isMain) {
   if (nsCocoaFeatures::OnYosemiteOrLater()) return sYosemiteThemeColors[name][isMain ? 0 : 1];
   return sLionThemeColors[name][isMain ? 0 : 1];
 }
 
-__attribute__((unused)) static float NativeGreyColorAsFloat(ColorName name, BOOL isMain) {
+inline float NativeGreyColorAsFloat(ColorName name, BOOL isMain) {
   return NativeGreyColorAsInt(name, isMain) / 255.0f;
 }
 
-__attribute__((unused)) static void DrawNativeGreyColorInRect(CGContextRef context, ColorName name,
-                                                              CGRect rect, BOOL isMain) {
+inline void DrawNativeGreyColorInRect(CGContextRef context, ColorName name, CGRect rect,
+                                      BOOL isMain) {
   float grey = NativeGreyColorAsFloat(name, isMain);
   CGContextSetRGBFillColor(context, grey, grey, grey, 1.0f);
   CGContextFillRect(context, rect);
 }
 
+#if !defined(MAC_OS_X_VERSION_10_14) || MAC_OS_X_VERSION_MAX_ALLOWED < MAC_OS_X_VERSION_10_14
+@interface NSColor (NSColorControlAccentColor)
+@property(class, strong, readonly) NSColor* controlAccentColor NS_AVAILABLE_MAC(10_14);
+@end
+#endif
+
+inline NSColor* ControlAccentColor() {
+  if (@available(macOS 10.14, *)) {
+    return [NSColor controlAccentColor];
+  }
+
+  // Pre-10.14, use hardcoded colors.
+  return [NSColor currentControlTint] == NSGraphiteControlTint
+             ? [NSColor colorWithSRGBRed:0.635 green:0.635 blue:0.655 alpha:1.0]
+             : [NSColor colorWithSRGBRed:0.247 green:0.584 blue:0.965 alpha:1.0];
+}
+
 #endif  // nsNativeThemeColors_h_
",1562032,9823d19217e209619c3f8d0e52d88119ba238fef,"Bug 1562032 - Use NSDockTile to implement the dock download progress bar. r=spohl

Differential Revision: https://phabricator.services.mozilla.com/D36244",1577120,"Bug 1577120 - Use the control accent color for the dock download progress bar. r=spohl

Differential Revision: https://phabricator.services.mozilla.com/D79358",2019-06-28T14:17:00+00:00,Implement progress bar in the Dock icon in a different way in order to save CPU,"When you download a file in Firefox on macOS, we draw a progress bar in the application dock icon. The API we use to do that drawing is slightly inefficient: We create a new NSImage with the combined icon + progress bar drawing, and set that as our application icon.
There's a more efficient API: We can set our own NSView instance as the application dock tile's content view and draw into that NSView. This is also a more modern API and lets us remove another `lockFocus` call from the code base.

Another thing that drained CPU as part of dock drawing was the progress bar animation: On 10.9 and below, the native progress bar had a wavy pattern that was animated. So we triggered a redraw of the dock icon 8 times per second while the progress bar was visible. Starting on 10.10, the style is different and there is no more wavy pattern, but we were still triggering the redraws unnecessarily.

This patch reimplements the drawing using manual strokes and fills that look similar to the 10.12 progress bar style, and removes the animated redraws.",Nightly download progress bar is almost invisible on MacOS,"Created attachment 9088657
Progress.png

User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:70.0) Gecko/20100101 Firefox/70.0




Expected results:

A more visible colour for the progress bar"
9e38d12a61b2106f08bdffac0de627757a40769a,2019-09-06T17:12:00+00:00,"diff -r 04ab0aa7d415 -r 200070acb240 gfx/2d/Matrix.h
--- a/gfx/2d/Matrix.h	Tue Jun 21 10:08:00 2016 +0200
+++ b/gfx/2d/Matrix.h	Thu Jun 23 12:41:04 2016 +0200
@@ -721,6 +721,7 @@
     // the input rectangle, aRect.
     Point4DTyped<UnknownUnits, F> points[2][kTransformAndClipRectMaxVerts];
     Point4DTyped<UnknownUnits, F>* dstPoint = points[0];
+
     *dstPoint++ = *this * Point4DTyped<UnknownUnits, F>(aRect.x, aRect.y, 0, 1);
     *dstPoint++ = *this * Point4DTyped<UnknownUnits, F>(aRect.XMost(), aRect.y, 0, 1);
     *dstPoint++ = *this * Point4DTyped<UnknownUnits, F>(aRect.XMost(), aRect.YMost(), 0, 1);
@@ -739,14 +740,15 @@
     // points[1].
     for (int plane=0; plane < 4; plane++) {
       planeNormals[plane].Normalize();
-
       Point4DTyped<UnknownUnits, F>* srcPoint = points[plane & 1];
       Point4DTyped<UnknownUnits, F>* srcPointEnd = dstPoint;
+
       dstPoint = points[~plane & 1];
+      Point4DTyped<UnknownUnits, F>* dstPointStart = dstPoint;
 
       Point4DTyped<UnknownUnits, F>* prevPoint = srcPointEnd - 1;
       F prevDot = planeNormals[plane].DotProduct(*prevPoint);
-      while (srcPoint < srcPointEnd) {
+      while (srcPoint < srcPointEnd && ((dstPoint - dstPointStart) < kTransformAndClipRectMaxVerts)) {
         F nextDot = planeNormals[plane].DotProduct(*srcPoint);
 
         if ((nextDot >= 0.0) != (prevDot >= 0.0)) {
@@ -765,6 +767,10 @@
         prevPoint = srcPoint++;
         prevDot = nextDot;
       }
+
+      if (dstPoint == dstPointStart) {
+        break;
+      }
     }
 
     size_t dstPointCount = 0;
@@ -788,7 +794,7 @@
     return dstPointCount;
   }
 
-  static const size_t kTransformAndClipRectMaxVerts = 32;
+  static const int kTransformAndClipRectMaxVerts = 32;
 
   static Matrix4x4Typed From2D(const Matrix &aMatrix) {
     Matrix4x4Typed matrix;
","diff -r e5b3436fc277 -r 9e38d12a61b2 gfx/2d/Matrix.h
--- a/gfx/2d/Matrix.h	Sat Sep 07 13:39:16 2019 +0000
+++ b/gfx/2d/Matrix.h	Fri Sep 06 17:12:06 2019 +0000
@@ -823,7 +823,7 @@
    * The resulting vertices are populated in aVerts.  aVerts must be
    * pre-allocated to hold at least kTransformAndClipRectMaxVerts Points.
    * The vertex count is returned by TransformAndClipRect.  It is possible to
-   * emit fewer that 3 vertices, indicating that aRect will not be visible
+   * emit fewer than 3 vertices, indicating that aRect will not be visible
    * within aClip.
    */
   template <class F>
@@ -833,7 +833,8 @@
     // Initialize a double-buffered array of points in homogenous space with
     // the input rectangle, aRect.
     Point4DTyped<UnknownUnits, F> points[2][kTransformAndClipRectMaxVerts];
-    Point4DTyped<UnknownUnits, F>* dstPoint = points[0];
+    Point4DTyped<UnknownUnits, F>* dstPointStart = points[0];
+    Point4DTyped<UnknownUnits, F>* dstPoint = dstPointStart;
 
     *dstPoint++ = TransformPoint(
         Point4DTyped<UnknownUnits, F>(aRect.X(), aRect.Y(), 0, 1));
@@ -855,16 +856,26 @@
         Point4DTyped<UnknownUnits, F>(0.0, -1.0, 0.0, aClip.YMost());
 
     // Iterate through each clipping plane and clip the polygon.
-    // In each pass, we double buffer, alternating between points[0] and
-    // points[1].
+    // For each clipping plane, we intersect the plane with all polygon edges.
+    // Each pass can increase or decrease the number of points that make up the
+    // current clipped polygon. We double buffer that set of points, alternating
+    // between points[0] and points[1].
     for (int plane = 0; plane < 4; plane++) {
       planeNormals[plane].Normalize();
-      Point4DTyped<UnknownUnits, F>* srcPoint = points[plane & 1];
+      Point4DTyped<UnknownUnits, F>* srcPoint = dstPointStart;
       Point4DTyped<UnknownUnits, F>* srcPointEnd = dstPoint;
 
-      dstPoint = points[~plane & 1];
-      Point4DTyped<UnknownUnits, F>* dstPointStart = dstPoint;
+      dstPointStart = points[~plane & 1];
+      dstPoint = dstPointStart;
 
+      // Iterate over the polygon edges. In each iteration the current edge is
+      // the edge from prevPoint to srcPoint. If the two end points lie on
+      // different sides of the plane, we have an intersection. Otherwise, the
+      // edge is either completely ""inside"" the half-space created by the
+      // clipping plane, and we add srcPoint, or it is completely ""outside"", and
+      // we discard srcPoint.
+      // We may create duplicated points in the polygon. We keep those around
+      // until all clipping is done and then filter out duplicates at the end.
       Point4DTyped<UnknownUnits, F>* prevPoint = srcPointEnd - 1;
       F prevDot = planeNormals[plane].DotProduct(*prevPoint);
       while (srcPoint < srcPointEnd &&
@@ -889,14 +900,16 @@
       }
 
       if (dstPoint == dstPointStart) {
+        // No polygon points were produced, so the polygon has been
+        // completely clipped away by the current clipping plane. Exit.
         break;
       }
     }
 
-    size_t dstPointCount = 0;
-    size_t srcPointCount = dstPoint - points[0];
-    for (Point4DTyped<UnknownUnits, F>* srcPoint = points[0];
-         srcPoint < points[0] + srcPointCount; srcPoint++) {
+    Point4DTyped<UnknownUnits, F>* srcPoint = dstPointStart;
+    Point4DTyped<UnknownUnits, F>* srcPointEnd = dstPoint;
+    size_t vertCount = 0;
+    while (srcPoint < srcPointEnd) {
       PointTyped<TargetUnits, F> p;
       if (srcPoint->w == 0.0) {
         // If a point lies on the intersection of the clipping planes at
@@ -906,12 +919,13 @@
         p = srcPoint->As2DPoint();
       }
       // Emit only unique points
-      if (dstPointCount == 0 || p != aVerts[dstPointCount - 1]) {
-        aVerts[dstPointCount++] = p;
+      if (vertCount == 0 || p != aVerts[vertCount - 1]) {
+        aVerts[vertCount++] = p;
       }
+      srcPoint++;
     }
 
-    return dstPointCount;
+    return vertCount;
   }
 
   static const int kTransformAndClipRectMaxVerts = 32;
diff -r e5b3436fc277 -r 9e38d12a61b2 gfx/tests/gtest/TestMatrix.cpp
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/gfx/tests/gtest/TestMatrix.cpp	Fri Sep 06 17:12:06 2019 +0000
@@ -0,0 +1,61 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include ""gtest/gtest.h""
+#include ""mozilla/gfx/Matrix.h""
+
+using namespace mozilla;
+using namespace mozilla::gfx;
+
+static Rect NudgedToInt(const Rect& aRect) {
+  Rect r(aRect);
+  r.NudgeToIntegers();
+  return r;
+}
+
+TEST(Matrix, TransformAndClipRect)
+{
+  Rect c(100, 100, 100, 100);
+  Matrix4x4 m;
+  EXPECT_TRUE(m.TransformAndClipBounds(Rect(50, 50, 20, 20), c).IsEmpty());
+  EXPECT_TRUE(m.TransformAndClipBounds(Rect(250, 50, 20, 20), c).IsEmpty());
+  EXPECT_TRUE(m.TransformAndClipBounds(Rect(250, 250, 20, 20), c).IsEmpty());
+  EXPECT_TRUE(m.TransformAndClipBounds(Rect(50, 250, 20, 20), c).IsEmpty());
+
+  EXPECT_TRUE(m.TransformAndClipBounds(Rect(50, 50, 100, 20), c).IsEmpty());
+  EXPECT_TRUE(m.TransformAndClipBounds(Rect(150, 50, 100, 20), c).IsEmpty());
+  EXPECT_TRUE(m.TransformAndClipBounds(Rect(50, 250, 100, 20), c).IsEmpty());
+  EXPECT_TRUE(m.TransformAndClipBounds(Rect(150, 250, 100, 20), c).IsEmpty());
+
+  EXPECT_TRUE(m.TransformAndClipBounds(Rect(50, 50, 20, 100), c).IsEmpty());
+  EXPECT_TRUE(m.TransformAndClipBounds(Rect(50, 150, 20, 100), c).IsEmpty());
+  EXPECT_TRUE(m.TransformAndClipBounds(Rect(250, 50, 20, 100), c).IsEmpty());
+  EXPECT_TRUE(m.TransformAndClipBounds(Rect(250, 150, 20, 100), c).IsEmpty());
+
+  EXPECT_TRUE(NudgedToInt(m.TransformAndClipBounds(Rect(50, 50, 100, 100), c))
+                  .IsEqualInterior(Rect(100, 100, 50, 50)));
+  EXPECT_TRUE(NudgedToInt(m.TransformAndClipBounds(Rect(150, 50, 100, 100), c))
+                  .IsEqualInterior(Rect(150, 100, 50, 50)));
+  EXPECT_TRUE(NudgedToInt(m.TransformAndClipBounds(Rect(150, 150, 100, 100), c))
+                  .IsEqualInterior(Rect(150, 150, 50, 50)));
+  EXPECT_TRUE(NudgedToInt(m.TransformAndClipBounds(Rect(50, 150, 100, 100), c))
+                  .IsEqualInterior(Rect(100, 150, 50, 50)));
+
+  EXPECT_TRUE(NudgedToInt(m.TransformAndClipBounds(Rect(110, 110, 80, 80), c))
+                  .IsEqualInterior(Rect(110, 110, 80, 80)));
+
+  EXPECT_TRUE(NudgedToInt(m.TransformAndClipBounds(Rect(50, 50, 200, 200), c))
+                  .IsEqualInterior(Rect(100, 100, 100, 100)));
+
+  EXPECT_TRUE(NudgedToInt(m.TransformAndClipBounds(Rect(50, 50, 200, 100), c))
+                  .IsEqualInterior(Rect(100, 100, 100, 50)));
+  EXPECT_TRUE(NudgedToInt(m.TransformAndClipBounds(Rect(50, 150, 200, 100), c))
+                  .IsEqualInterior(Rect(100, 150, 100, 50)));
+  EXPECT_TRUE(NudgedToInt(m.TransformAndClipBounds(Rect(50, 50, 100, 200), c))
+                  .IsEqualInterior(Rect(100, 100, 50, 100)));
+  EXPECT_TRUE(NudgedToInt(m.TransformAndClipBounds(Rect(150, 50, 100, 200), c))
+                  .IsEqualInterior(Rect(150, 100, 50, 100)));
+}
diff -r e5b3436fc277 -r 9e38d12a61b2 gfx/tests/gtest/moz.build
--- a/gfx/tests/gtest/moz.build	Sat Sep 07 13:39:16 2019 +0000
+++ b/gfx/tests/gtest/moz.build	Fri Sep 06 17:12:06 2019 +0000
@@ -16,6 +16,7 @@
     'TestGfxWidgets.cpp',
     'TestJobScheduler.cpp',
     'TestLayers.cpp',
+    'TestMatrix.cpp',
     'TestMoz2D.cpp',
     'TestPolygon.cpp',
     'TestQcms.cpp',
",1268854,200070acb240df4253ef7a5be1d7ea376de14892,Bug 1268854 - Break out of loop if no intersecting points on positive side of clipping plane. r=kip,1578045,"Bug 1578045 - Correctly return zero vertices if clipping plane 0 or 2 clip away the entire polygon. r=kip

This fixes a bug that was introduced three years ago in bug 1268854.
What happened was that the final pass over the polygon assumed that the current
polygon was living in plane[0]. But due to the double buffering, the ""current""
polygon alternates between plane[0] and plane[1]. And bug 1268854 had introduced
an early exit so that we could hit the final pass at a time where the current,
now empty, polygon was in plane[1]. So we would incorrectly treat all 32 points
in plane[0] as part of the final polygon.

This bug was responsible for intermittently unreasonable numbers in CompositorOGL's fill
rate / overdraw overlay, and, since changeset cc84a0e9d5ddde198422f4f11ab6bf85f631d5f0,
also caused CompositorOGL to execute unnecessary draw calls.

Differential Revision: https://phabricator.services.mozilla.com/D44312",2016-06-23T12:41:00+02:00,stack-buffer-overflow in mozilla::gfx::BasePoint4d,"Created attachment 8747018
gfx_stackbuffer

While visiting team-cymru.org and having the website open for a while I get a stack-buffer-overflow in gfx code with my ASan build. This is reproducible for me using an 45.1.0esr based Tor Browser on a Linux 64bit machine. We don't have patches for that part of the code, thus I guess this should be reproducible with a vanilla Firefox 45.1.0 as well at least. Attached is the stack trace.",Matrix4x4::TransformAndClipBounds does not clip bounds,"```
    Rect r = Matrix4x4().TransformAndClipBounds(Rect(0, 0, 2000, 50),
                                                Rect(1900, 100, 100, 100));
```

I would expect the rectangle `r` to be empty, because the to input rectangles do not intersect. But the return value is non-empty, and roughly equal to the first argument:

```
Rect(0.000000, 0.000000, 1999.999878, 50.000000)
```"
b0c4546217586995ba6875770173638901118581,2019-09-02T15:33:00+00:00,"diff -r b27981be6a66 -r 586631218ed0 devtools/docs/backend/actor-registration.md
--- a/devtools/docs/backend/actor-registration.md	Wed Aug 28 12:52:25 2019 +0300
+++ b/devtools/docs/backend/actor-registration.md	Wed Aug 28 10:01:43 2019 +0000
@@ -23,9 +23,9 @@
 To register a global actor:
 
 ```
-ActorRegistry.registerModule(""devtools/server/actors/addon/addons"", {
-  prefix: ""addons"",
-  constructor: ""AddonsActor"",
+ActorRegistry.registerModule(""devtools/server/actors/preference"", {
+  prefix: ""preference"",
+  constructor: ""PreferenceActor"",
   type: { global: true }
 });
 ```
diff -r b27981be6a66 -r 586631218ed0 devtools/server/actors/addon/addons.js
--- a/devtools/server/actors/addon/addons.js	Wed Aug 28 12:52:25 2019 +0300
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,38 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-""use strict"";
-
-const { AddonManager } = require(""resource://gre/modules/AddonManager.jsm"");
-const protocol = require(""devtools/shared/protocol"");
-const { FileUtils } = require(""resource://gre/modules/FileUtils.jsm"");
-const { addonsSpec } = require(""devtools/shared/specs/addon/addons"");
-
-const AddonsActor = protocol.ActorClassWithSpec(addonsSpec, {
-  initialize: function(conn) {
-    protocol.Actor.prototype.initialize.call(this, conn);
-  },
-
-  async installTemporaryAddon(addonPath) {
-    let addonFile;
-    let addon;
-    try {
-      addonFile = new FileUtils.File(addonPath);
-      addon = await AddonManager.installTemporaryAddon(addonFile);
-    } catch (error) {
-      throw new Error(`Could not install add-on at '${addonPath}': ${error}`);
-    }
-
-    // TODO: once the add-on actor has been refactored to use
-    // protocol.js, we could return it directly.
-    // return new AddonTargetActor(this.conn, addon);
-
-    // Return a pseudo add-on object that a calling client can work
-    // with. Provide a flag that the client can use to detect when it
-    // gets upgraded to a real actor object.
-    return { id: addon.id, actor: false };
-  },
-});
-
-exports.AddonsActor = AddonsActor;
diff -r b27981be6a66 -r 586631218ed0 devtools/server/actors/addon/moz.build
--- a/devtools/server/actors/addon/moz.build	Wed Aug 28 12:52:25 2019 +0300
+++ b/devtools/server/actors/addon/moz.build	Wed Aug 28 10:01:43 2019 +0000
@@ -5,7 +5,6 @@
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 DevToolsModules(
-    'addons.js',
     'webextension-inspected-window.js',
     'webextension.js',
 )
diff -r b27981be6a66 -r 586631218ed0 devtools/server/actors/utils/actor-registry.js
--- a/devtools/server/actors/utils/actor-registry.js	Wed Aug 28 12:52:25 2019 +0300
+++ b/devtools/server/actors/utils/actor-registry.js	Wed Aug 28 10:01:43 2019 +0000
@@ -132,11 +132,6 @@
       constructor: ""ActorRegistryActor"",
       type: { global: true },
     });
-    this.registerModule(""devtools/server/actors/addon/addons"", {
-      prefix: ""addons"",
-      constructor: ""AddonsActor"",
-      type: { global: true },
-    });
     this.registerModule(""devtools/server/actors/device"", {
       prefix: ""device"",
       constructor: ""DeviceActor"",
diff -r b27981be6a66 -r 586631218ed0 devtools/server/tests/unit/test_addons_actor.js
--- a/devtools/server/tests/unit/test_addons_actor.js	Wed Aug 28 12:52:25 2019 +0300
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,52 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-/* eslint-disable no-shadow */
-
-""use strict"";
-
-startupAddonsManager();
-
-async function connect() {
-  DebuggerServer.init();
-  DebuggerServer.registerAllActors();
-
-  const client = new DebuggerClient(DebuggerServer.connectPipe());
-  await client.connect();
-
-  const addons = await client.mainRoot.getFront(""addons"");
-  return [client, addons];
-}
-
-add_task(async function testSuccessfulInstall() {
-  const [client, addons] = await connect();
-
-  const allowMissing = false;
-  const usePlatformSeparator = true;
-  const addonPath = getFilePath(
-    ""addons/web-extension"",
-    allowMissing,
-    usePlatformSeparator
-  );
-  const installedAddon = await addons.installTemporaryAddon(addonPath);
-  equal(installedAddon.id, ""test-addons-actor@mozilla.org"");
-  // The returned object is currently not a proper actor.
-  equal(installedAddon.actor, false);
-
-  const addonList = await client.mainRoot.listAddons();
-  ok(addonList && addonList.map(a => a.name), ""Received list of add-ons"");
-  const addon = addonList.find(a => a.id === installedAddon.id);
-  ok(addon, ""Test add-on appeared in root install list"");
-
-  await close(client);
-});
-
-add_task(async function testNonExistantPath() {
-  const [client, addons] = await connect();
-
-  await Assert.rejects(
-    addons.installTemporaryAddon(""some-non-existant-path""),
-    /Could not install add-on.*Component returned failure/
-  );
-
-  await close(client);
-});
diff -r b27981be6a66 -r 586631218ed0 devtools/server/tests/unit/xpcshell.ini
--- a/devtools/server/tests/unit/xpcshell.ini	Wed Aug 28 12:52:25 2019 +0300
+++ b/devtools/server/tests/unit/xpcshell.ini	Wed Aug 28 10:01:43 2019 +0000
@@ -36,7 +36,6 @@
 [test_addon_events.js]
 skip-if = (os == 'win' && bits == 32) #Bug 1543156
 [test_addon_reload.js]
-[test_addons_actor.js]
 [test_animation_name.js]
 [test_animation_type.js]
 [test_actor-registry-actor.js]
diff -r b27981be6a66 -r 586631218ed0 devtools/shared/fronts/addon/moz.build
--- a/devtools/shared/fronts/addon/moz.build	Wed Aug 28 12:52:25 2019 +0300
+++ b/devtools/shared/fronts/addon/moz.build	Wed Aug 28 10:01:43 2019 +0000
@@ -7,4 +7,5 @@
 DevToolsModules(
     'addons.js',
     'webextension-inspected-window.js',
+    'webextension.js',
 )
diff -r b27981be6a66 -r 586631218ed0 devtools/shared/fronts/addon/webextension.js
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/devtools/shared/fronts/addon/webextension.js	Wed Aug 28 10:01:43 2019 +0000
@@ -0,0 +1,78 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+""use strict"";
+
+const {
+  webExtensionSpec,
+} = require(""devtools/shared/specs/addon/webextension"");
+const {
+  FrontClassWithSpec,
+  registerFront,
+} = require(""devtools/shared/protocol"");
+loader.lazyRequireGetter(
+  this,
+  ""BrowsingContextTargetFront"",
+  ""devtools/shared/fronts/targets/browsing-context"",
+  true
+);
+
+class WebExtensionFront extends FrontClassWithSpec(webExtensionSpec) {
+  constructor(client, targetFront, parentFront) {
+    super(client, targetFront, parentFront);
+
+    this.client = client;
+
+    this.traits = {};
+  }
+
+  form(json) {
+    this.actorID = json.actor;
+
+    // Save the full form for Target class usage.
+    // Do not use `form` name to avoid colliding with protocol.js's `form` method
+    this.targetForm = json;
+
+    // We used to manipulate the form rather than the front itself.
+    // Expose all form attributes to ease accessing them.
+    for (const name in json) {
+      if (name == ""actor"") {
+        continue;
+      }
+      this[name] = json[name];
+    }
+  }
+
+  /**
+   * Returns the actual target front for web extensions.
+   *
+   * Instead, we want to use a WebExtensionTargetActor, which
+   * inherits from BrowsingContextTargetActor. This connect method is used to retrieve
+   * the final target actor to use.
+   */
+  async connect() {
+    if (
+      this.isWebExtension &&
+      this.client.mainRoot.traits.webExtensionAddonConnect
+    ) {
+      // The Webextension form is related to a WebExtensionActor instance,
+      // which isn't a target actor on its own, it is an actor living in the parent
+      // process with access to the extension metadata, it can control the extension (e.g.
+      // reloading it) and listen to the AddonManager events related to the lifecycle of
+      // the addon (e.g. when the addon is disabled or uninstalled).
+      // To retrieve the target actor instance, we call its ""connect"" method, (which
+      // fetches the target actor targetForm from a WebExtensionTargetActor instance).
+      const form = await super.connect();
+      const front = new BrowsingContextTargetFront(this.client, {
+        actor: form.actor,
+      });
+      front.form(form);
+      this.manage(front);
+      return front;
+    }
+    return this;
+  }
+}
+
+exports.WebExtensionFront = WebExtensionFront;
+registerFront(WebExtensionFront);
diff -r b27981be6a66 -r 586631218ed0 devtools/shared/fronts/root.js
--- a/devtools/shared/fronts/root.js	Wed Aug 28 12:52:25 2019 +0300
+++ b/devtools/shared/fronts/root.js	Wed Aug 28 10:01:43 2019 +0000
@@ -333,8 +333,8 @@
    */
   async getAddon({ id }) {
     const addons = await this.listAddons();
-    const addonTargetFront = addons.find(addon => addon.id === id);
-    return addonTargetFront;
+    const webextensionFront = addons.find(addon => addon.id === id);
+    return webextensionFront;
   }
 
   /**
diff -r b27981be6a66 -r 586631218ed0 devtools/shared/specs/index.js
--- a/devtools/shared/specs/index.js	Wed Aug 28 12:52:25 2019 +0300
+++ b/devtools/shared/specs/index.js	Wed Aug 28 10:01:43 2019 +0000
@@ -30,7 +30,7 @@
   {
     types: [""webExtension""],
     spec: ""devtools/shared/specs/addon/webextension"",
-    front: null,
+    front: ""devtools/shared/fronts/addon/webextension"",
   },
   {
     types: [""webExtensionInspectedWindow""],
diff -r b27981be6a66 -r 586631218ed0 devtools/shared/specs/root.js
--- a/devtools/shared/specs/root.js	Wed Aug 28 12:52:25 2019 +0300
+++ b/devtools/shared/specs/root.js	Wed Aug 28 10:01:43 2019 +0000
@@ -65,7 +65,7 @@
         iconDataURL: Option(0, ""boolean""),
       },
       response: {
-        addons: RetVal(""array:addonTarget""),
+        addons: RetVal(""array:webExtension""),
       },
     },
 
","diff -r 51cdbae0ac64 -r b0c454621758 devtools/server/actors/addon/addons.js
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/devtools/server/actors/addon/addons.js	Mon Sep 02 15:33:29 2019 +0000
@@ -0,0 +1,40 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+""use strict"";
+
+const { AddonManager } = require(""resource://gre/modules/AddonManager.jsm"");
+const protocol = require(""devtools/shared/protocol"");
+const { FileUtils } = require(""resource://gre/modules/FileUtils.jsm"");
+const { addonsSpec } = require(""devtools/shared/specs/addon/addons"");
+
+// This actor is not used by DevTools, but is relied on externally by
+// webext-run and the Firefox VS-Code plugin. see bug #1578108
+const AddonsActor = protocol.ActorClassWithSpec(addonsSpec, {
+  initialize: function(conn) {
+    protocol.Actor.prototype.initialize.call(this, conn);
+  },
+
+  async installTemporaryAddon(addonPath) {
+    let addonFile;
+    let addon;
+    try {
+      addonFile = new FileUtils.File(addonPath);
+      addon = await AddonManager.installTemporaryAddon(addonFile);
+    } catch (error) {
+      throw new Error(`Could not install add-on at '${addonPath}': ${error}`);
+    }
+
+    // TODO: once the add-on actor has been refactored to use
+    // protocol.js, we could return it directly.
+    // return new AddonTargetActor(this.conn, addon);
+
+    // Return a pseudo add-on object that a calling client can work
+    // with. Provide a flag that the client can use to detect when it
+    // gets upgraded to a real actor object.
+    return { id: addon.id, actor: false };
+  },
+});
+
+exports.AddonsActor = AddonsActor;
diff -r 51cdbae0ac64 -r b0c454621758 devtools/server/actors/addon/moz.build
--- a/devtools/server/actors/addon/moz.build	Mon Sep 02 14:58:03 2019 +0000
+++ b/devtools/server/actors/addon/moz.build	Mon Sep 02 15:33:29 2019 +0000
@@ -5,5 +5,6 @@
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 DevToolsModules(
+    'addons.js',
     'webextension-inspected-window.js',
 )
diff -r 51cdbae0ac64 -r b0c454621758 devtools/server/actors/utils/actor-registry.js
--- a/devtools/server/actors/utils/actor-registry.js	Mon Sep 02 14:58:03 2019 +0000
+++ b/devtools/server/actors/utils/actor-registry.js	Mon Sep 02 15:33:29 2019 +0000
@@ -132,6 +132,11 @@
       constructor: ""ActorRegistryActor"",
       type: { global: true },
     });
+    this.registerModule(""devtools/server/actors/addon/addons"", {
+      prefix: ""addons"",
+      constructor: ""AddonsActor"",
+      type: { global: true },
+    });
     this.registerModule(""devtools/server/actors/device"", {
       prefix: ""device"",
       constructor: ""DeviceActor"",
diff -r 51cdbae0ac64 -r b0c454621758 devtools/server/tests/unit/test_addons_actor.js
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/devtools/server/tests/unit/test_addons_actor.js	Mon Sep 02 15:33:29 2019 +0000
@@ -0,0 +1,52 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+/* eslint-disable no-shadow */
+
+""use strict"";
+
+startupAddonsManager();
+
+async function connect() {
+  DebuggerServer.init();
+  DebuggerServer.registerAllActors();
+
+  const client = new DebuggerClient(DebuggerServer.connectPipe());
+  await client.connect();
+
+  const addons = await client.mainRoot.getFront(""addons"");
+  return [client, addons];
+}
+
+add_task(async function testSuccessfulInstall() {
+  const [client, addons] = await connect();
+
+  const allowMissing = false;
+  const usePlatformSeparator = true;
+  const addonPath = getFilePath(
+    ""addons/web-extension"",
+    allowMissing,
+    usePlatformSeparator
+  );
+  const installedAddon = await addons.installTemporaryAddon(addonPath);
+  equal(installedAddon.id, ""test-addons-actor@mozilla.org"");
+  // The returned object is currently not a proper actor.
+  equal(installedAddon.actor, false);
+
+  const addonList = await client.mainRoot.listAddons();
+  ok(addonList && addonList.map(a => a.name), ""Received list of add-ons"");
+  const addon = addonList.find(a => a.id === installedAddon.id);
+  ok(addon, ""Test add-on appeared in root install list"");
+
+  await close(client);
+});
+
+add_task(async function testNonExistantPath() {
+  const [client, addons] = await connect();
+
+  await Assert.rejects(
+    addons.installTemporaryAddon(""some-non-existant-path""),
+    /Could not install add-on.*Component returned failure/
+  );
+
+  await close(client);
+});
diff -r 51cdbae0ac64 -r b0c454621758 devtools/server/tests/unit/xpcshell.ini
--- a/devtools/server/tests/unit/xpcshell.ini	Mon Sep 02 14:58:03 2019 +0000
+++ b/devtools/server/tests/unit/xpcshell.ini	Mon Sep 02 15:33:29 2019 +0000
@@ -36,6 +36,7 @@
 [test_addon_events.js]
 skip-if = (os == 'win' && bits == 32) #Bug 1543156
 [test_addon_reload.js]
+[test_addons_actor.js]
 [test_animation_name.js]
 [test_animation_type.js]
 [test_actor-registry-actor.js]
",1522571,586631218ed0cbe7d6cea2421541c344a985f1d4,"Bug 1522571 - Unify addonTargetFront with webExtensionSpec; r=ochameau

Differential Revision: https://phabricator.services.mozilla.com/D42833",1578108,"Bug 1578108 - add addons actor back; r=ochameau

Differential Revision: https://phabricator.services.mozilla.com/D44375",2019-08-28T10:01:00+00:00,Move AddonTargetFront outside of devtools/shared/front/targets,"This class is no longer a Target class. Instead, its connect() method allows returning one.
So that this class no longer belongs to the targets directory.",Can't install temporary addons for VS Code setup,"User Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0

Steps to reproduce:

I tried to debug a WebExtension in VS Code. The VS Code debug adapter for Firefox (which I maintain) wants to install it as a temporary addon via RDP using the `AddonsActor`, but the `AddonsActor` seems to be gone. It used to be referenced in the response to a `listTabs` request, but isn't anymore (in version 70.0b2)."
0864ac97b84c683243d96618ad49fcbe1624b7d9,2019-09-09T15:55:00+00:00,"diff -r c796aefdeba3 -r a719791b50e3 browser/base/content/browser-fullZoom.js
--- a/browser/base/content/browser-fullZoom.js	Tue Jul 16 13:37:01 2019 +0000
+++ b/browser/base/content/browser-fullZoom.js	Tue Jul 16 13:18:46 2019 +0000
@@ -384,20 +384,16 @@
       browser.messageManager.sendAsyncMessage(""Reader:ResetZoom"");
     } else if (this._isPDFViewer(browser)) {
       browser.messageManager.sendAsyncMessage(""PDFJS:ZoomReset"");
-    } else {
-      let token = this._getBrowserToken(browser);
-      let result = this._getGlobalValue(browser).then(value => {
-        if (token.isCurrent) {
-          ZoomManager.setZoomForBrowser(
-            browser,
-            value === undefined ? 1 : value
-          );
-          this._ignorePendingZoomAccesses(browser);
-        }
-      });
-      this._removePref(browser);
-      return result;
     }
+    let token = this._getBrowserToken(browser);
+    let result = this._getGlobalValue(browser).then(value => {
+      if (token.isCurrent) {
+        ZoomManager.setZoomForBrowser(browser, value === undefined ? 1 : value);
+        this._ignorePendingZoomAccesses(browser);
+      }
+    });
+    this._removePref(browser);
+    return result;
   },
 
   /**
diff -r c796aefdeba3 -r a719791b50e3 toolkit/components/reader/AboutReader.jsm
--- a/toolkit/components/reader/AboutReader.jsm	Tue Jul 16 13:37:01 2019 +0000
+++ b/toolkit/components/reader/AboutReader.jsm	Tue Jul 16 13:18:46 2019 +0000
@@ -39,6 +39,11 @@
   ""chrome://global/locale/aboutReader.properties""
 );
 
+const zoomOnCtrl =
+  Services.prefs.getIntPref(""mousewheel.with_control.action"", 3) == 3;
+const zoomOnMeta =
+  Services.prefs.getIntPref(""mousewheel.with_meta.action"", 1) == 3;
+
 const gIsFirefoxDesktop =
   Services.appinfo.ID == ""{ec8030f7-c20a-464f-9b0e-13a3a9e97384}"";
 
@@ -116,6 +121,7 @@
   win.addEventListener(""pagehide"", this);
   win.addEventListener(""mozvisualscroll"", this, { mozSystemGroup: true });
   win.addEventListener(""resize"", this);
+  win.addEventListener(""wheel"", this, { passive: false });
 
   Services.obs.addObserver(this, ""inner-window-destroyed"");
 
@@ -414,6 +420,36 @@
         }
         break;
 
+      case ""wheel"":
+        let doZoom =
+          (aEvent.ctrlKey && zoomOnCtrl) || (aEvent.metaKey && zoomOnMeta);
+        if (!doZoom) {
+          return;
+        }
+        aEvent.preventDefault();
+
+        // Throttle events to once per 150ms. This avoids excessively fast zooming.
+        if (aEvent.timeStamp <= this._zoomBackoffTime) {
+          return;
+        }
+        this._zoomBackoffTime = aEvent.timeStamp + 150;
+
+        // Determine the direction of the delta (we don't care about its size);
+        // This code is adapted from normalizeWheelEventDelta in
+        // browser/extensions/pdfjs/content/web/viewer.js
+        let delta = Math.abs(aEvent.deltaX) + Math.abs(aEvent.deltaY);
+        let angle = Math.atan2(aEvent.deltaY, aEvent.deltaX);
+        if (-0.25 * Math.PI < angle && angle < 0.75 * Math.PI) {
+          delta = -delta;
+        }
+
+        if (delta > 0) {
+          this._changeFontSize(+1);
+        } else if (delta < 0) {
+          this._changeFontSize(-1);
+        }
+        break;
+
       case ""devicelight"":
         this._handleDeviceLight(aEvent.value);
         break;
","diff -r 7a5a3aef7880 -r 0864ac97b84c toolkit/components/reader/AboutReader.jsm
--- a/toolkit/components/reader/AboutReader.jsm	Mon Sep 09 16:11:23 2019 +0000
+++ b/toolkit/components/reader/AboutReader.jsm	Mon Sep 09 15:55:38 2019 +0000
@@ -233,7 +233,7 @@
 
   FONT_SIZE_MIN: 1,
 
-  FONT_SIZE_MAX: 9,
+  FONT_SIZE_MAX: 24,
 
   get _doc() {
     return this._docRef.get();
",1557256,a719791b50e3591f4f60d5593d679101b16f0cae,"Bug 1557256 - handle scrollwheel zoom in reader mode, r=jaws

Differential Revision: https://phabricator.services.mozilla.com/D38069",1578454,"Bug 1578454 - increase max font size in reader mode to match 300% zoom on default font size, r=jaws

Differential Revision: https://phabricator.services.mozilla.com/D45199",2019-07-16T13:18:00+00:00,accel + Mouse scroll still uses full page zoom (instead of font size changes) in Reader mode,"Created attachment 9070191
Zoom.gif

**Affected versions**
- Firefox Beta 68.0b7
- Firefox Nightly 69.0a1

**Affected platforms**
- Windows 10 (x64)
- macOS 10.14
- Ubuntu 18.04 (x64)

**Steps to reproduce**
1. Start Firefox.
2. Enter for example: https://en.wikipedia.org/wiki/Smythe%27s_Megalith.
3. Enter Reader Mode by clicking the associated button from the Location Bar.
4. Zoom in or out from the page by using ctrl + and - combinations from the keyboard.

**Expected result**
- The page zooms normally, the value of the zoom is shown in the Location Bar.

**Actual result**
- The ctrl + and - combination for zooming has different behavior than using ctrl + scroll from the mouse.

**Regression range**
* First bad: 3ea90cc2e91732daccfc382206926d0c9dc90e24
* Last good: e05dc78eb4272fff00d1aee1b1d629c0163ca343
* Pushlog: https://hg.mozilla.org/integration/autoland/pushloghtml?fromchange=e05dc78eb4272fff00d1aee1b1d629c0163ca343&tochange=3ea90cc2e91732daccfc382206926d0c9dc90e24
* Potential regressor: 1135593

**Additional notes**
- Firefox 67.0.2 and 60.7.0esr are not affected.
- The reset zoom is broken as well if the page is zoomed by using the mouse scroll.
- Please see the attachment for the issue.",FF69 limits the maximum zoom level in Reader Mode,"Created attachment 9090093
FF Reader Mode Zoom.jpg

User Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0

Steps to reproduce:

Enter Reader Mode
Press Control +


Actual results:

Zoom level did not increase beyond a certain point


Expected results:

It seems that prior to FF 69, zoom levels were much greater - in reader mode, anyway.  I used to be able to zoom 8 levels to at least 300%.  But with FF 69, I can only zoom 4 levels - 150%.  In non-reader mode, I can still zoom 8 levels, so this tells me Reader Mode must have been changed.  As someone with low vision (macular degeneration), this hinders my ability to easily read content.  Please increase the maximum zoom level to where it was prior to FF 69."
91d93df5ae3f3a8b7c5491f85372b79cbc9f98f7,2020-12-17T21:57:00+00:00,"diff -r da718fa047be -r 9dfa75f6ec73 browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js	Sat Oct 24 02:05:11 2020 +0000
+++ b/browser/app/profile/firefox.js	Fri Oct 23 22:23:13 2020 +0000
@@ -254,7 +254,11 @@
 // The behavior of option 3 is detailed at: http://wiki.mozilla.org/Session_Restore
 pref(""browser.startup.page"",                1);
 pref(""browser.startup.homepage"",            ""about:home"");
+#ifdef NIGHTLY_BUILD
+pref(""browser.startup.homepage.abouthome_cache.enabled"", true);
+#else
 pref(""browser.startup.homepage.abouthome_cache.enabled"", false);
+#endif
 pref(""browser.startup.homepage.abouthome_cache.loglevel"", ""Warn"");
 
 // Whether we should skip the homepage when opening the first-run page
","diff -r 46ff02acf7be -r 91d93df5ae3f testing/talos/talos/test.py
--- a/testing/talos/talos/test.py	Thu Dec 17 18:21:39 2020 +0000
+++ b/testing/talos/talos/test.py	Thu Dec 17 21:57:06 2020 +0000
@@ -238,6 +238,9 @@
     ]
     tpmanifest = ""${talos}/startup_test/startup_about_home_paint/startup_about_home_paint.manifest""
     webextensions_folder = ""${talos}/webextensions""
+    preferences = {
+        ""browser.startup.homepage.abouthome_cache.enabled"": False,
+    }
 
 
 @register_test()
",1672517,9dfa75f6ec73f10849e81c214271f8dd4a20ad45,"Bug 1672517 - Enable the about:home startup cache by default on Nightly only. r=Gijs

Differential Revision: https://phabricator.services.mozilla.com/D94654",1579683,"Bug 1579683 - Disable the about:home startup cache for startup_about_home_paint_realworld_webextensions. r=sparky,perftest-reviewers

The root cause of the intermittens on startup_about_home_paint_realworld_webextensions is
the same as bug 1220362. Fixing that should fix this one too. In the mean time, we'll
disable the configuration for this test.

Differential Revision: https://phabricator.services.mozilla.com/D99960",2020-10-23T22:23:00+00:00,Enable the about:home startup cache on Nightly (only) by default,As it says on the tin. This will hold on Nightly while we assess its behaviour in the wild.,"Intermittent startup_about_home_paint_realworld_webextensions | Could not find report in browser output: [('tsformat', ('__start_report', '__end_report')), ('tpformat', ('__start_tp_report', '__end_tp_report'))]","**Filed by:** btara [at] mozilla.com
**Parsed log:** https://treeherder.mozilla.org/logviewer.html#?job_id=265555646&repo=mozilla-central
**Full log:** https://queue.taskcluster.net/v1/task/ft97ZEDhS7-SEt48Gv7f-A/runs/0/artifacts/public/logs/live_backing.log

---

[task 2019-09-07T23:46:45.925Z] 23:46:45     INFO -  TEST-INFO | started process 5737 (/home/cltbld/tasks/task_1567899942/build/application/firefox/firefox -profile /tmp/tmpWAimka/profile)
[task 2019-09-07T23:46:46.022Z] 23:46:46     INFO -  PID 5737 | ATTENTION: default value of option force_s3tc_enable overridden by environment.
[task 2019-09-07T23:46:46.029Z] 23:46:46     INFO -  PID 5737 | ATTENTION: default value of option force_s3tc_enable overridden by environment.
[task 2019-09-07T23:46:46.105Z] 23:46:46     INFO -  PID 5737 | ATTENTION: default value of option force_s3tc_enable overridden by environment.
[task 2019-09-07T23:46:46.106Z] 23:46:46     INFO -  PID 5737 | ATTENTION: default value of option force_s3tc_enable overridden by environment.
[task 2019-09-07T23:46:47.496Z] 23:46:47     INFO -  PID 5737 | __start_report1346__end_report
[task 2019-09-07T23:46:47.496Z] 23:46:47     INFO -  PID 5737 |
[task 2019-09-07T23:46:47.496Z] 23:46:47     INFO -  PID 5737 | __startTimestamp1567900007487__endTimestamp
[task 2019-09-07T23:46:47.586Z] 23:46:47     INFO -  PID 5737 | [Parent 5737, Gecko_IOThread] WARNING: pipe error (115): Connection reset by peer: file /builds/worker/workspace/build/src/ipc/chromium/src/chrome/common/ipc_channel_posix.cc, line 358
[task 2019-09-07T23:46:47.755Z] 23:46:47     INFO -  PID 5737 |
[task 2019-09-07T23:46:47.755Z] 23:46:47     INFO -  PID 5737 | ###!!! [Child][RunMessage] Error: Channel closing: too late to send/recv, messages will be lost
[task 2019-09-07T23:46:47.755Z] 23:46:47     INFO -  PID 5737 |
[task 2019-09-07T23:46:47.755Z] 23:46:47     INFO -  PID 5737 | [Parent 5737, Gecko_IOThread] WARNING: pipe error (54): Connection reset by peer: file /builds/worker/workspace/build/src/ipc/chromium/src/chrome/common/ipc_channel_posix.cc, line 358
[task 2019-09-07T23:46:47.755Z] 23:46:47     INFO -  PID 5737 |
[task 2019-09-07T23:46:47.755Z] 23:46:47     INFO -  PID 5737 | ###!!! [Child][MessageChannel::SendAndWait] Error: Channel error: cannot send/recv
[task 2019-09-07T23:46:47.755Z] 23:46:47     INFO -  PID 5737 |
[task 2019-09-07T23:46:47.803Z] 23:46:47     INFO -  TEST-INFO | 5737: exit 0
[task 2019-09-07T23:46:48.062Z] 23:46:48     INFO -  Running cycle 12/20 for startup_about_home_paint_realworld_webextensions test...
[task 2019-09-07T23:46:48.062Z] 23:46:48     INFO -  Using env: {'COMPIZ_CONFIG_PROFILE': 'ubuntu',
[task 2019-09-07T23:46:48.062Z] 23:46:48     INFO -   'DBUS_SESSION_BUS_ADDRESS': 'unix:abstract=/tmp/dbus-IJ3J1O2F5D,guid=6bb8483211990a8cfd592b505d744125',
[task 2019-09-07T23:46:48.063Z] 23:46:48     INFO -   'DEFAULTS_PATH': '/usr/share/gconf/ubuntu.default.path',
[task 2019-09-07T23:46:48.063Z] 23:46:48     INFO -   'DESKTOP_AUTOSTART_ID': '106e90815f60dc063156789994168929000000027270001',
[task 2019-09-07T23:46:48.063Z] 23:46:48     INFO -   'DISPLAY': ':0',
[task 2019-09-07T23:46:48.063Z] 23:46:48     INFO -   'EXTRA_MOZHARNESS_CONFIG': '{""test_packages_url"": ""https://queue.taskcluster.net/v1/task/XTlO4XtGRxeJ8xJoYJMRIw/artifacts/public/build/target.test_packages.json"", ""installer_url"": ""https://queue.taskcluster.net/v1/task/XTlO4XtGRxeJ8xJoYJMRIw/artifacts/public/build/target.tar.bz2""}',
[task 2019-09-07T23:46:48.064Z] 23:46:48     INFO -   'GECKO_HEAD_REPOSITORY': 'https://hg.mozilla.org/mozilla-central',
[task 2019-09-07T23:46:48.064Z] 23:46:48     INFO -   'GECKO_HEAD_REV': '7a3378adb34084d5d19352d45abbaa1bee681ac8',
[task 2019-09-07T23:46:48.064Z] 23:46:48     INFO -   'GNOME_DESKTOP_SESSION_ID': 'this-is-deprecated',
[task 2019-09-07T23:46:48.065Z] 23:46:48     INFO -   'GTK2_MODULES': 'overlay-scrollbar',
[task 2019-09-07T23:46:48.065Z] 23:46:48     INFO -   'GTK_MODULES': 'gail:atk-bridge',
[task 2019-09-07T23:46:48.065Z] 23:46:48     INFO -   'HOME': '/home/cltbld',
[task 2019-09-07T23:46:48.065Z] 23:46:48     INFO -   'JSGC_DISABLE_POISONING': '1',
[task 2019-09-07T23:46:48.065Z] 23:46:48     INFO -   'LANG': 'en_US.UTF-8',
[task 2019-09-07T23:46:48.065Z] 23:46:48     INFO -   'LANGUAGE': 'en_US:en',
[task 2019-09-07T23:46:48.065Z] 23:46:48     INFO -   'LD_LIBRARY_PATH': '/home/cltbld/tasks/task_1567899942/build/application/firefox',
[task 2019-09-07T23:46:48.066Z] 23:46:48     INFO -   'LOGNAME': 'cltbld',
[task 2019-09-07T23:46:48.066Z] 23:46:48     INFO -   'MAIL': '/var/mail/cltbld',
[task 2019-09-07T23:46:48.066Z] 23:46:48     INFO -   'MANDATORY_PATH': '/usr/share/gconf/ubuntu.mandatory.path',
[task 2019-09-07T23:46:48.066Z] 23:46:48     INFO -   'MINIDUMP_SAVE_PATH': '/home/cltbld/tasks/task_1567899942/build/blobber_upload_dir',
[task 2019-09-07T23:46:48.066Z] 23:46:48     INFO -   'MINIDUMP_STACKWALK': '/home/cltbld/tasks/task_1567899942/build/linux64-minidump_stackwalk',
[task 2019-09-07T23:46:48.066Z] 23:46:48     INFO -   'MOZ_ACCELERATED': '1',
[task 2019-09-07T23:46:48.066Z] 23:46:48     INFO -   'MOZ_AUTOMATION': '1',
[task 2019-09-07T23:46:48.066Z] 23:46:48     INFO -   'MOZ_CRASHREPORTER': '1',
[task 2019-09-07T23:46:48.066Z] 23:46:48     INFO -   'MOZ_CRASHREPORTER_NO_REPORT': '1',
[task 2019-09-07T23:46:48.066Z] 23:46:48     INFO -   'MOZ_DISABLE_NONLOCAL_CONNECTIONS': '1',
[task 2019-09-07T23:46:48.066Z] 23:46:48     INFO -   'MOZ_SCM_LEVEL': '3',
[task 2019-09-07T23:46:48.066Z] 23:46:48     INFO -   'MOZ_UPLOAD_DIR': '/home/cltbld/tasks/task_1567899942/build/blobber_upload_dir',
[task 2019-09-07T23:46:48.066Z] 23:46:48     INFO -   'MOZ_USE_PAGELOADER': '1',
[task 2019-09-07T23:46:48.066Z] 23:46:48     INFO -   'MOZ_WEBRENDER': '1',
[task 2019-09-07T23:46:48.066Z] 23:46:48     INFO -   'NO_EM_RESTART': '1',
[task 2019-09-07T23:46:48.067Z] 23:46:48     INFO -   'PATH': '/home/cltbld/tasks/task_1567899942/build/venv/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin',
[task 2019-09-07T23:46:48.067Z] 23:46:48     INFO -   'PWD': '/home/cltbld',
[task 2019-09-07T23:46:48.067Z] 23:46:48     INFO -   'PYTHONPATH': '/home/cltbld/tasks/task_1567899942/build/tests/talos',
[task 2019-09-07T23:46:48.067Z] 23:46:48     INFO -   'QT_ACCESSIBILITY': '1',
[task 2019-09-07T23:46:48.067Z] 23:46:48     INFO -   'QT_IM_MODULE': 'ibus',
[task 2019-09-07T23:46:48.067Z] 23:46:48     INFO -   'QT_LINUX_ACCESSIBILITY_ALWAYS_ON': '1',
[task 2019-09-07T23:46:48.067Z] 23:46:48     INFO -   'QT_QPA_PLATFORMTHEME': 'appmenu-qt5',
[task 2019-09-07T23:46:48.067Z] 23:46:48     INFO -   'RUST_BACKTRACE': 'full',
[task 2019-09-07T23:46:48.067Z] 23:46:48     INFO -   'SCCACHE_DISABLE': '1',
[task 2019-09-07T23:46:48.067Z] 23:46:48     INFO -   'SESSION_MANAGER': 'local/t-linux64-ms-358:@/tmp/.ICE-unix/2727,unix/t-linux64-ms-358:/tmp/.ICE-unix/2727',
[task 2019-09-07T23:46:48.067Z] 23:46:48     INFO -   'SHELL': '/bin/bash',
[task 2019-09-07T23:46:48.067Z] 23:46:48     INFO -   'SHLVL': '2',
[task 2019-09-07T23:46:48.067Z] 23:46:48     INFO -   'SSH_AGENT_PID': '2776',
[task 2019-09-07T23:46:48.067Z] 23:46:48     INFO -   'SSH_AUTH_SOCK': '/run/user/1000/keyring/ssh',
[task 2019-09-07T23:46:48.068Z] 23:46:48     INFO -   'STYLO_FORCE_ENABLED': '1',
[task 2019-09-07T23:46:48.068Z] 23:46:48     INFO -   'TASKCLUSTER_ROOT_URL': 'https://taskcluster.net',
[task 2019-09-07T23:46:48.068Z] 23:46:48     INFO -   'TASK_ID': 'ft97ZEDhS7-SEt48Gv7f-A',
[task 2019-09-07T23:46:48.068Z] 23:46:48     INFO -   'TERM': 'xterm-256color',
[task 2019-09-07T23:46:48.068Z] 23:46:48     INFO -   'TMOUT': '86400',
[task 2019-09-07T23:46:48.068Z] 23:46:48     INFO -   'USER': 'cltbld',
[task 2019-09-07T23:46:48.068Z] 23:46:48     INFO -   'VTE_VERSION': '4205',
[task 2019-09-07T23:46:48.068Z] 23:46:48     INFO -   'WINDOWID': '23068682',
[task 2019-09-07T23:46:48.068Z] 23:46:48     INFO -   'XDG_CONFIG_DIRS': '/etc/xdg/xdg-ubuntu:/etc/xdg',
[task 2019-09-07T23:46:48.069Z] 23:46:48     INFO -   'XDG_CURRENT_DESKTOP': 'GNOME',
[task 2019-09-07T23:46:48.069Z] 23:46:48     INFO -   'XDG_DATA_DIRS': '/usr/share/ubuntu:/usr/share/gnome:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop',
[task 2019-09-07T23:46:48.069Z] 23:46:48     INFO -   'XDG_MENU_PREFIX': 'gnome-',
[task 2019-09-07T23:46:48.069Z] 23:46:48     INFO -   'XDG_RUNTIME_DIR': '/run/user/1000',
[task 2019-09-07T23:46:48.069Z] 23:46:48     INFO -   'XDG_SESSION_ID': 'c1',
[task 2019-09-07T23:46:48.069Z] 23:46:48     INFO -   'XMODIFIERS': '@im=ibus',
[task 2019-09-07T23:46:48.069Z] 23:46:48     INFO -   '_': '/usr/local/bin/generic-worker'}
[task 2019-09-07T23:46:48.069Z] 23:46:48     INFO -  TEST-INFO | started process 5940 (/home/cltbld/tasks/task_1567899942/build/application/firefox/firefox -profile /tmp/tmpWAimka/profile)
[task 2019-09-07T23:46:48.165Z] 23:46:48     INFO -  PID 5940 | ATTENTION: default value of option force_s3tc_enable overridden by environment.
[task 2019-09-07T23:46:48.173Z] 23:46:48     INFO -  PID 5940 | ATTENTION: default value of option force_s3tc_enable overridden by environment.
[task 2019-09-07T23:46:48.254Z] 23:46:48     INFO -  PID 5940 | ATTENTION: default value of option force_s3tc_enable overridden by environment.
[task 2019-09-07T23:46:48.254Z] 23:46:48     INFO -  PID 5940 | ATTENTION: default value of option force_s3tc_enable overridden by environment.
[task 2019-09-07T23:46:49.820Z] 23:46:49     INFO -  PID 5940 | FATAL ERROR: Non-local network connections are disabled and a connection attempt to easylist-downloads.adblockplus.org (94.130.104.85) was made.
[task 2019-09-07T23:46:49.820Z] 23:46:49     INFO -  PID 5940 | You should only access hostnames available via the test networking proxy (if running mochitests) or from a test-specific httpd.js server (if running xpcshell tests). Browser services should be disabled or redirected to a local server.
[task 2019-09-07T23:46:49.823Z] 23:46:49     INFO -  PID 5940 | ExceptionHandler::GenerateDump cloned child 6156
[task 2019-09-07T23:46:49.823Z] 23:46:49     INFO -  PID 5940 | ExceptionHandler::SendContinueSignalToChild sent continue signal to child
[task 2019-09-07T23:46:49.823Z] 23:46:49     INFO -  PID 5940 | ExceptionHandler::WaitForContinueSignal waiting for continue signal...
[task 2019-09-07T23:46:49.885Z] 23:46:49     INFO -  PID 5940 | Exiting due to channel error.
[task 2019-09-07T23:46:49.885Z] 23:46:49     INFO -  PID 5940 | Exiting due to channel error.
[task 2019-09-07T23:46:49.933Z] 23:46:49     INFO -  Terminating psutil.Process(pid=5940, name='firefox-bin', started='23:46:47')
[task 2019-09-07T23:46:49.934Z] 23:46:49     INFO -  TEST-INFO | 5940: exit 11
[task 2019-09-07T23:46:49.954Z] 23:46:49     INFO -  TEST-UNEXPECTED-ERROR | startup_about_home_paint_realworld_webextensions | Could not find report in browser output: [('tsformat', ('__start_report', '__end_report')), ('tpformat', ('__start_tp_report', '__end_tp_report'))]
[task 2019-09-07T23:46:49.954Z] 23:46:49    ERROR -  Traceback (most recent call last):
[task 2019-09-07T23:46:49.954Z] 23:46:49     INFO -    File ""/home/cltbld/tasks/task_1567899942/build/tests/talos/talos/run_tests.py"", line 276, in run_tests
[task 2019-09-07T23:46:49.954Z] 23:46:49     INFO -      talos_results.add(mytest.runTest(browser_config, test))
[task 2019-09-07T23:46:49.954Z] 23:46:49     INFO -    File ""/home/cltbld/tasks/task_1567899942/build/tests/talos/talos/ttest.py"", line 64, in runTest
[task 2019-09-07T23:46:49.954Z] 23:46:49     INFO -      return self._runTest(browser_config, test_config, setup)
[task 2019-09-07T23:46:49.954Z] 23:46:49     INFO -    File ""/home/cltbld/tasks/task_1567899942/build/tests/talos/talos/ttest.py"", line 279, in _runTest
[task 2019-09-07T23:46:49.954Z] 23:46:49     INFO -      else None)
[task 2019-09-07T23:46:49.954Z] 23:46:49     INFO -    File ""/home/cltbld/tasks/task_1567899942/build/tests/talos/talos/results.py"", line 95, in add
[task 2019-09-07T23:46:49.954Z] 23:46:49     INFO -      global_counters=self.global_counters
[task 2019-09-07T23:46:49.954Z] 23:46:49     INFO -    File ""/home/cltbld/tasks/task_1567899942/build/tests/talos/talos/results.py"", line 326, in __init__
[task 2019-09-07T23:46:49.954Z] 23:46:49     INFO -      self.parse()
[task 2019-09-07T23:46:49.954Z] 23:46:49     INFO -    File ""/home/cltbld/tasks/task_1567899942/build/tests/talos/talos/results.py"", line 353, in parse
[task 2019-09-07T23:46:49.954Z] 23:46:49     INFO -      % self.report_tokens)
[task 2019-09-07T23:46:49.954Z] 23:46:49     INFO -    File ""/home/cltbld/tasks/task_1567899942/build/tests/talos/talos/results.py"", line 337, in error
[task 2019-09-07T23:46:49.954Z] 23:46:49     INFO -      raise utils.TalosError(message)
[task 2019-09-07T23:46:49.955Z] 23:46:49     INFO -  TalosError: Could not find report in browser output: [('tsformat', ('__start_report', '__end_report')), ('tpformat', ('__start_tp_report', '__end_tp_report'))]
[task 2019-09-07T23:46:49.955Z] 23:46:49     INFO -  TEST-INFO took 28491ms
[task 2019-09-07T23:46:49.955Z] 23:46:49     INFO -  SUITE-END | took 28s
[task 2019-09-07T23:46:50.466Z] 23:46:50    ERROR - Return code: 2
[task 2019-09-07T23:46:50.467Z] 23:46:50  WARNING - setting return code to 2"
c6ceaf18bea3a0a3a2365d7b892150f0687f9e3d,2019-09-26T15:26:00+00:00,"diff -r b134d9db39a9 -r 7af558091d18 browser/components/search/content/search-one-offs.js
--- a/browser/components/search/content/search-one-offs.js	Tue Aug 13 18:29:29 2019 +0000
+++ b/browser/components/search/content/search-one-offs.js	Tue Aug 13 19:03:20 2019 +0000
@@ -18,24 +18,13 @@
     this.container.appendChild(
       MozXULElement.parseXULToFragment(
         `
-      <deck class=""search-panel-one-offs-header search-panel-header search-panel-current-input"">
-        <label class=""searchbar-oneoffheader-search"" value=""&searchWithHeader.label;""/>
-        <hbox class=""search-panel-searchforwith search-panel-current-input"">
-          <label value=""&searchFor.label;""/>
-          <label class=""searchbar-oneoffheader-searchtext search-panel-input-value"" flex=""1"" crop=""end""/>
-          <label flex=""10000"" value=""&searchWith.label;""/>
-        </hbox>
-        <hbox class=""search-panel-searchonengine search-panel-current-input"">
-          <label value=""&search.label;""/>
-          <label class=""searchbar-oneoffheader-engine search-panel-input-value"" flex=""1"" crop=""end""/>
-          <label flex=""10000"" value=""&searchAfter.label;""/>
-        </hbox>
-      </deck>
-      <description role=""group"" class=""search-panel-one-offs"">
-        <button class=""searchbar-engine-one-off-item search-setting-button-compact"" tooltiptext=""&changeSearchSettings.tooltip;""/>
-      </description>
+      <div class=""search-panel-one-offs-header search-panel-header search-panel-current-input"">
+        <label class=""searchbar-oneoffheader-search"" value=""&searchWithDesc.label;""/>
+      </div>
+      <div class=""search-panel-one-offs""/>
       <vbox class=""search-add-engines""/>
-      <button class=""search-setting-button search-panel-header"" label=""&changeSearchSettings.button;""/>
+      <button class=""searchbar-engine-one-off-item search-setting-button-compact"" tooltiptext=""&changeSearchSettings.tooltip;""/>
+      <button class=""search-setting-button"" label=""&changeSearchSettings.button;""/>
       <menupopup class=""search-one-offs-context-menu"">
         <menuitem class=""search-one-offs-context-open-in-new-tab"" label=""&searchInNewTab.label;"" accesskey=""&searchInNewTab.accesskey;""/>
         <menuitem class=""search-one-offs-context-set-default"" label=""&searchSetAsDefault.label;"" accesskey=""&searchSetAsDefault.accesskey;""/>
@@ -179,12 +168,17 @@
   }
 
   /**
-   * Width in pixels of the one-off buttons.  49px is the min-width of
-   * each search engine button, adapt this const when changing the css.
-   * It's actually 48px + 1px of right border.
+   * Width in pixels of the one-off buttons.
    */
   get buttonWidth() {
-    return 49;
+    return this.compact ? 40 : 48;
+  }
+
+  /**
+   * Height in pixels of the one-off buttons.
+   */
+  get buttonHeight() {
+    return 32;
   }
 
   /**
@@ -274,7 +268,14 @@
       (this._view && this._view.isOpen) ||
       (this.popup && this.popup.popupOpen)
     ) {
-      this._updateAfterQueryChanged();
+      let isOneOffSelected =
+        this.selectedButton &&
+        this.selectedButton.classList.contains(""searchbar-engine-one-off-item"");
+      // Typing de-selects the settings or opensearch buttons at the bottom
+      // of the search panel, as typing shows the user intends to search.
+      if (this.selectedButton && !isOneOffSelected) {
+        this.selectedButton = null;
+      }
     }
     return val;
   }
@@ -291,10 +292,6 @@
    *        The selected one-off button. Null if no one-off is selected.
    */
   set selectedButton(val) {
-    if (val && val.classList.contains(""dummy"")) {
-      // Never select dummy buttons.
-      val = null;
-    }
     let previousButton = this._selectedButton;
     if (previousButton) {
       previousButton.removeAttribute(""selected"");
@@ -393,43 +390,6 @@
   }
 
   /**
-   * Updates the parts of the UI that show the query string.
-   */
-  _updateAfterQueryChanged() {
-    let headerSearchText = this.querySelector(
-      "".searchbar-oneoffheader-searchtext""
-    );
-    headerSearchText.setAttribute(""value"", this.query);
-    let groupText;
-    let isOneOffSelected =
-      this.selectedButton &&
-      this.selectedButton.classList.contains(""searchbar-engine-one-off-item"");
-    // Typing de-selects the settings or opensearch buttons at the bottom
-    // of the search panel, as typing shows the user intends to search.
-    if (this.selectedButton && !isOneOffSelected) {
-      this.selectedButton = null;
-    }
-    if (this.query) {
-      groupText =
-        headerSearchText.previousElementSibling.value +
-        '""' +
-        headerSearchText.value +
-        '""' +
-        headerSearchText.nextElementSibling.value;
-      if (!isOneOffSelected) {
-        this.header.selectedIndex = 1;
-      }
-    } else {
-      let noSearchHeader = this.querySelector("".searchbar-oneoffheader-search"");
-      groupText = noSearchHeader.value;
-      if (!isOneOffSelected) {
-        this.header.selectedIndex = 0;
-      }
-    }
-    this.buttons.setAttribute(""aria-label"", groupText);
-  }
-
-  /**
    * Infallible, non-re-entrant version of `__rebuild()`.
    */
   async _rebuild() {
@@ -454,9 +414,6 @@
     this.selectedButton = null;
     this._contextEngine = null;
 
-    // Update the 'Search for <keywords> with:"" header.
-    this._updateAfterQueryChanged();
-
     // Handle opensearch items. This needs to be done before building the
     // list of one off providers, as that code will return early if all the
     // alternative engines are hidden.
@@ -480,15 +437,14 @@
     }
 
     // Finally, build the list of one-off buttons.
-    while (this.buttons.firstElementChild != this.settingsButtonCompact) {
+    while (this.buttons.firstElementChild) {
       this.buttons.firstElementChild.remove();
     }
 
-    // Remove the trailing empty text node introduced by the binding's
-    // content markup above.
-    if (this.settingsButtonCompact.nextElementSibling) {
-      this.settingsButtonCompact.nextElementSibling.remove();
-    }
+    let headerText = this.header.querySelector(
+      "".searchbar-oneoffheader-search""
+    );
+    this.buttons.setAttribute(""aria-label"", headerText.value);
 
     let engines = await this.getEngines();
     let defaultEngine = await Services.search.getDefault();
@@ -508,7 +464,10 @@
       return;
     }
 
-    let panelWidth = parseInt((this.popup || this._view.panel).clientWidth);
+    // this.buttonWidth is for the compact settings button.
+    let buttonsWidth = this.compact
+      ? this._textboxWidth - this.buttonWidth - this.header.clientWidth
+      : this.popup.clientWidth;
 
     // There's one weird thing to guard against: when layout pixels
     // aren't an integral multiple of device pixels, the last button
@@ -519,33 +478,41 @@
     // As a workaround, decrement the width if the scale is not an integer.
     let scale = window.windowUtils.screenPixelsPerCSSPixel;
     if (Math.floor(scale) != scale) {
-      --panelWidth;
+      --buttonsWidth;
     }
 
-    // The + 1 is because the last button doesn't have a right border.
-    let enginesPerRow = Math.floor((panelWidth + 1) / this.buttonWidth);
-    let buttonWidth = Math.floor(panelWidth / enginesPerRow);
-    // There will be an emtpy area of:
-    //   panelWidth - enginesPerRow * buttonWidth  px
+    // If the header string is very long, then the searchbar buttons will
+    // overflow their container unless max-width is set.
+    this.buttons.style.setProperty(
+      this.compact ? ""width"" : ""max-width"",
+      `${buttonsWidth}px`
+    );
+
+    // 24: 12px left padding + 12px right padding.
+    if (this.compact) {
+      buttonsWidth -= 24;
+    }
+
+    // In very narrow windows, we should always have at least one button
+    // per row.
+    buttonsWidth = Math.max(buttonsWidth, this.buttonWidth);
+
+    let enginesPerRow = Math.floor(buttonsWidth / this.buttonWidth);
+    // There will be an empty area of:
+    //   buttonsWidth - enginesPerRow * this.buttonWidth  px
     // at the end of each row.
 
-    // If the <description> tag with the list of search engines doesn't have
+    // If the <div> with the list of search engines doesn't have
     // a fixed height, the panel will be sized incorrectly, causing the bottom
     // of the suggestion <tree> to be hidden.
-    if (this.compact) {
-      ++oneOffCount;
-    }
     let rowCount = Math.ceil(oneOffCount / enginesPerRow);
-    let height = rowCount * 33; // 32px per row, 1px border.
-    this.buttons.setAttribute(""height"", height + ""px"");
-
+    let height = rowCount * this.buttonHeight;
+    this.buttons.style.setProperty(""height"", `${height}px`);
     // Ensure we can refer to the settings buttons by ID:
     let origin = this.telemetryOrigin;
     this.settingsButton.id = origin + ""-anon-search-settings"";
     this.settingsButtonCompact.id = origin + ""-anon-search-settings-compact"";
 
-    let dummyItems =
-      enginesPerRow - (oneOffCount % enginesPerRow || enginesPerRow);
     for (let i = 0; i < engines.length; ++i) {
       let engine = engines[i];
       let button = document.createXULElement(""button"");
@@ -557,53 +524,9 @@
       button.setAttribute(""image"", uri);
       button.setAttribute(""class"", ""searchbar-engine-one-off-item"");
       button.setAttribute(""tooltiptext"", engine.name);
-      button.setAttribute(""width"", buttonWidth);
       button.engine = engine;
 
-      if ((i + 1) % enginesPerRow == 0) {
-        button.classList.add(""last-of-row"");
-      }
-
-      if (i + 1 == engines.length) {
-        button.classList.add(""last-engine"");
-      }
-
-      if (i >= oneOffCount + dummyItems - enginesPerRow) {
-        button.classList.add(""last-row"");
-      }
-
-      this.buttons.insertBefore(button, this.settingsButtonCompact);
-    }
-
-    let hasDummyItems = !!dummyItems;
-    while (dummyItems) {
-      let button = document.createXULElement(""button"");
-      button.setAttribute(
-        ""class"",
-        ""searchbar-engine-one-off-item dummy last-row""
-      );
-      button.setAttribute(""width"", buttonWidth);
-
-      if (!--dummyItems) {
-        button.classList.add(""last-of-row"");
-      }
-
-      this.buttons.insertBefore(button, this.settingsButtonCompact);
-    }
-
-    if (this.compact) {
-      this.settingsButtonCompact.setAttribute(""width"", buttonWidth);
-      if (rowCount == 1 && hasDummyItems) {
-        // When there's only one row, make the compact settings button
-        // hug the right edge of the panel.  It may not due to the panel's
-        // width not being an integral multiple of the button width.  (See
-        // the ""There will be an emtpy area"" comment above.)  Increase the
-        // width of the last dummy item by the remainder.
-        let remainder = panelWidth - enginesPerRow * buttonWidth;
-        let width = remainder + buttonWidth;
-        let lastDummyItem = this.settingsButtonCompact.previousElementSibling;
-        lastDummyItem.setAttribute(""width"", width);
-      }
+      this.buttons.appendChild(button);
     }
   }
 
@@ -732,37 +655,16 @@
   _updateStateForButton(mousedOverButton) {
     let button = mousedOverButton;
 
-    // Ignore dummy buttons.
-    if (button && button.classList.contains(""dummy"")) {
-      button = null;
-    }
-
     // If there's no moused-over button, then the one-offs should reflect
     // the selected button, if any.
     button = button || this.selectedButton;
 
-    if (!button) {
-      this.header.selectedIndex = this.query ? 1 : 0;
-      if (this.textbox) {
+    if (this.textbox) {
+      if (!button) {
         this.textbox.removeAttribute(""aria-activedescendant"");
+      } else {
+        this.textbox.setAttribute(""aria-activedescendant"", button.id);
       }
-      return;
-    }
-
-    if (
-      button.classList.contains(""searchbar-engine-one-off-item"") &&
-      button.engine
-    ) {
-      let headerEngineText = this.querySelector(
-        "".searchbar-oneoffheader-engine""
-      );
-      this.header.selectedIndex = 2;
-      headerEngineText.value = button.engine.name;
-    } else {
-      this.header.selectedIndex = this.query ? 1 : 0;
-    }
-    if (this.textbox) {
-      this.textbox.setAttribute(""aria-activedescendant"", button.id);
     }
   }
 
@@ -773,19 +675,7 @@
       oneOff;
       oneOff = oneOff.nextElementSibling
     ) {
-      // oneOff may be a text node since the list xul:description contains
-      // whitespace and the compact settings button.  See the markup
-      // above.  _rebuild removes text nodes, but it may not have been
-      // called yet (because e.g. the popup hasn't been opened yet).
-      if (oneOff.nodeType == Node.ELEMENT_NODE) {
-        if (
-          oneOff.classList.contains(""dummy"") ||
-          oneOff.classList.contains(""search-setting-button-compact"")
-        ) {
-          break;
-        }
-        buttons.push(oneOff);
-      }
+      buttons.push(oneOff);
     }
 
     if (aIncludeNonEngineButtons) {
@@ -850,7 +740,7 @@
    *        If true, the index is incremented, and if false, the index is
    *        decremented.
    * @param {boolean} aIncludeNonEngineButtons
-   *        If true, non-dummy buttons that do not have engines are included.
+   *        If true, buttons that do not have engines are included.
    *        These buttons include the OpenSearch and settings buttons.  For
    *        example, if the currently selected button is an engine button,
    *        the next button is the settings button, and you pass true for
@@ -1202,9 +1092,7 @@
       return;
     }
 
-    let isOneOff =
-      target.classList.contains(""searchbar-engine-one-off-item"") &&
-      !target.classList.contains(""dummy"");
+    let isOneOff = target.classList.contains(""searchbar-engine-one-off-item"");
     if (
       isOneOff ||
       target.classList.contains(""addengine-item"") ||
@@ -1349,8 +1237,7 @@
     // Prevent the context menu from appearing except on the one off buttons.
     if (
       !target.classList.contains(""searchbar-engine-one-off-item"") ||
-      target.classList.contains(""search-setting-button-compact"") ||
-      target.classList.contains(""dummy"")
+      target.classList.contains(""search-setting-button-compact"")
     ) {
       event.preventDefault();
       return;
diff -r b134d9db39a9 -r 7af558091d18 browser/components/search/test/browser/browser.ini
--- a/browser/components/search/test/browser/browser.ini	Tue Aug 13 18:29:29 2019 +0000
+++ b/browser/components/search/test/browser/browser.ini	Tue Aug 13 19:03:20 2019 +0000
@@ -39,8 +39,6 @@
 [browser_oneOffContextMenu.js]
 skip-if = verify
 [browser_oneOffContextMenu_setDefault.js]
-[browser_oneOffHeader.js]
-skip-if = os == ""mac"" #1421238
 [browser_private_search_perwindowpb.js]
 [browser_searchbar_openpopup.js]
 skip-if = os == ""linux"" # Linux has different focus behaviours.
diff -r b134d9db39a9 -r 7af558091d18 browser/components/search/test/browser/browser_oneOffContextMenu_setDefault.js
--- a/browser/components/search/test/browser/browser_oneOffContextMenu_setDefault.js	Tue Aug 13 18:29:29 2019 +0000
+++ b/browser/components/search/test/browser/browser_oneOffContextMenu_setDefault.js	Tue Aug 13 19:03:20 2019 +0000
@@ -189,16 +189,23 @@
   }
 
   const contextMenu = oneOffInstance.contextMenuPopup;
-  const oneOffButtons = oneOffInstance.buttons;
+  let oneOffButton = oneOffInstance.buttons;
 
   // Get the one-off button for the test engine.
-  let oneOffButton;
-  for (let node of oneOffButtons.children) {
-    if (node.engine && node.engine.name == TEST_ENGINE_NAME) {
-      oneOffButton = node;
+  for (
+    oneOffButton = oneOffButton.firstChild;
+    oneOffButton;
+    oneOffButton = oneOffButton.nextSibling
+  ) {
+    if (
+      oneOffButton.nodeType == Node.ELEMENT_NODE &&
+      oneOffButton.engine &&
+      oneOffButton.engine.name == TEST_ENGINE_NAME
+    ) {
       break;
     }
   }
+
   Assert.notEqual(
     oneOffButton,
     undefined,
diff -r b134d9db39a9 -r 7af558091d18 browser/components/search/test/browser/browser_oneOffHeader.js
--- a/browser/components/search/test/browser/browser_oneOffHeader.js	Tue Aug 13 18:29:29 2019 +0000
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,176 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-// Tests that keyboard navigation in the search panel works as designed.
-
-const isMac = ""nsILocalFileMac"" in Ci;
-
-const searchPopup = document.getElementById(""PopupSearchAutoComplete"");
-
-const oneOffsContainer = searchPopup.searchOneOffsContainer;
-const searchSettings = oneOffsContainer.querySelector("".search-setting-button"");
-
-var header = oneOffsContainer.querySelector("".search-panel-one-offs-header"");
-
-function getHeaderText() {
-  let headerChild = header.selectedPanel;
-  while (headerChild.hasChildNodes()) {
-    headerChild = headerChild.firstElementChild;
-  }
-  let headerStrings = [];
-  for (let label = headerChild; label; label = label.nextElementSibling) {
-    headerStrings.push(label.value);
-  }
-  return headerStrings.join("""");
-}
-
-const msg = isMac ? 5 : 1;
-const utils = window.windowUtils;
-const scale = utils.screenPixelsPerCSSPixel;
-function synthesizeNativeMouseMove(aElement) {
-  let rect = aElement.getBoundingClientRect();
-  let win = aElement.ownerGlobal;
-  let x = win.mozInnerScreenX + (rect.left + rect.right) / 2;
-  let y = win.mozInnerScreenY + (rect.top + rect.bottom) / 2;
-
-  // Wait for the mousemove event to occur before continuing.
-  return new Promise((resolve, reject) => {
-    function eventOccurred(e) {
-      aElement.removeEventListener(""mousemove"", eventOccurred, true);
-      SimpleTest.executeSoon(resolve);
-    }
-
-    aElement.addEventListener(""mousemove"", eventOccurred, true);
-
-    utils.sendNativeMouseEvent(x * scale, y * scale, msg, 0, null);
-  });
-}
-
-let searchbar;
-let searchIcon;
-
-add_task(async function init() {
-  searchbar = await gCUITestUtils.addSearchBar();
-  registerCleanupFunction(() => {
-    gCUITestUtils.removeSearchBar();
-  });
-  searchIcon = searchbar.querySelector("".searchbar-search-button"");
-
-  await promiseNewEngine(""testEngine.xml"");
-});
-
-add_task(async function test_notext() {
-  let promise = promiseEvent(searchPopup, ""popupshown"");
-  info(""Opening search panel"");
-  EventUtils.synthesizeMouseAtCenter(searchIcon, {});
-  await promise;
-
-  is(
-    header.getAttribute(""selectedIndex""),
-    0,
-    ""Header has the correct index selected with no search terms.""
-  );
-
-  is(
-    getHeaderText(),
-    ""Search with:"",
-    ""Search header string is correct when no search terms have been entered""
-  );
-
-  await synthesizeNativeMouseMove(searchSettings);
-  is(
-    header.getAttribute(""selectedIndex""),
-    0,
-    ""Header has the correct index when no search terms have been entered and the Change Search Settings button is selected.""
-  );
-  is(
-    getHeaderText(),
-    ""Search with:"",
-    ""Header has the correct text when no search terms have been entered and the Change Search Settings button is selected.""
-  );
-
-  let buttons = getOneOffs();
-  await synthesizeNativeMouseMove(buttons[0]);
-  is(
-    header.getAttribute(""selectedIndex""),
-    2,
-    ""Header has the correct index selected when a search engine has been selected""
-  );
-  is(
-    getHeaderText(),
-    ""Search "" + buttons[0].engine.name,
-    ""Is the header text correct when a search engine is selected and no terms have been entered.""
-  );
-
-  promise = promiseEvent(searchPopup, ""popuphidden"");
-  info(""Closing search panel"");
-  EventUtils.synthesizeKey(""KEY_Escape"");
-  await promise;
-});
-
-add_task(async function test_text() {
-  searchbar.textbox.value = ""foo"";
-
-  let promise = promiseEvent(searchPopup, ""popupshown"");
-  info(""Opening search panel"");
-  SimpleTest.executeSoon(() => {
-    EventUtils.synthesizeMouseAtCenter(searchIcon, {});
-  });
-  await promise;
-
-  is(
-    header.getAttribute(""selectedIndex""),
-    1,
-    ""Header has the correct index selected with a search term.""
-  );
-  is(
-    getHeaderText(),
-    ""Search for foo with:"",
-    ""Search header string is correct when a search term has been entered""
-  );
-
-  let buttons = getOneOffs();
-  await synthesizeNativeMouseMove(buttons[0]);
-  is(
-    header.getAttribute(""selectedIndex""),
-    2,
-    ""Header has the correct index selected when a search engine has been selected""
-  );
-  is(
-    getHeaderText(),
-    ""Search "" + buttons[0].engine.name,
-    ""Is the header text correct when search terms are entered after a search engine has been selected.""
-  );
-
-  await synthesizeNativeMouseMove(searchSettings);
-  is(
-    header.getAttribute(""selectedIndex""),
-    1,
-    ""Header has the correct index selected when search terms have been entered and the Change Search Settings button is selected.""
-  );
-  is(
-    getHeaderText(),
-    ""Search for foo with:"",
-    ""Header has the correct text when search terms have been entered and the Change Search Settings button is selected.""
-  );
-
-  // Click the ""Foo Search"" header at the top of the popup and make sure it
-  // loads the search results.
-  let searchbarEngine = searchPopup.searchbarEngine;
-  await synthesizeNativeMouseMove(searchbarEngine);
-  SimpleTest.executeSoon(() => {
-    EventUtils.synthesizeMouseAtCenter(searchbarEngine, {});
-  });
-
-  let url = (await Services.search.getDefault()).getSubmission(
-    searchbar.textbox.value
-  ).uri.spec;
-  await promiseTabLoadEvent(gBrowser.selectedTab, url);
-
-  // Move the cursor out of the panel area to avoid messing with other tests.
-  await synthesizeNativeMouseMove(searchbar);
-});
-
-add_task(async function cleanup() {
-  searchbar.textbox.value = """";
-});
diff -r b134d9db39a9 -r 7af558091d18 browser/components/search/test/browser/head.js
--- a/browser/components/search/test/browser/head.js	Tue Aug 13 18:29:29 2019 +0000
+++ b/browser/components/search/test/browser/head.js	Tue Aug 13 19:03:20 2019 +0000
@@ -207,12 +207,6 @@
   let oneOff = oneOffsContainer.querySelector("".search-panel-one-offs"");
   for (oneOff = oneOff.firstChild; oneOff; oneOff = oneOff.nextSibling) {
     if (oneOff.nodeType == Node.ELEMENT_NODE) {
-      if (
-        oneOff.classList.contains(""dummy"") ||
-        oneOff.classList.contains(""search-setting-button-compact"")
-      ) {
-        break;
-      }
       oneOffs.push(oneOff);
     }
   }
diff -r b134d9db39a9 -r 7af558091d18 browser/locales/en-US/chrome/browser/browser.dtd
--- a/browser/locales/en-US/chrome/browser/browser.dtd	Tue Aug 13 18:29:29 2019 +0000
+++ b/browser/locales/en-US/chrome/browser/browser.dtd	Tue Aug 13 19:03:20 2019 +0000
@@ -431,26 +431,11 @@
 <!ENTITY searchInput.placeholder      ""Search"">
 <!ENTITY searchIcon.tooltip           ""Search"">
 
-<!-- LOCALIZATION NOTE (searchFor.label, searchWith.label):
-     These two strings are used to build the header above the list of one-click
-     search providers:  ""Search for <used typed keywords> with:"" -->
-<!ENTITY searchFor.label              ""Search for "">
-<!ENTITY searchWith.label             "" with:"">
+<!-- LOCALIZATION NOTE (searchWithDesc.label):
+     This string prompts the user to use the list of one-click search engines in
+     the Urlbar and searchbar. -->
+<!ENTITY searchWithDesc.label         ""This time, search with:"">
 
-<!-- LOCALIZATION NOTE (search.label, searchAfter.label):
-     This string is used to build the header above the list of one-click search
-     providers when a one off engine has been selected.  The searchAfter text is
-     intentionally left empty for en-US and can be used by other localizations to
-     display a string after the search engine name.  This string will be displayed
-     as:  ""Search <selected engine name><searchAfter.label text>"" -->
-<!ENTITY search.label                 ""Search "">
-<!ENTITY searchAfter.label            """">
-
-<!-- LOCALIZATION NOTE (searchWithHeader.label):
-     The wording of this string should be as close as possible to
-     searchFor.label and searchWith.label. This string will be used instead of
-     them when the user has not typed any keyword. -->
-<!ENTITY searchWithHeader.label       ""Search with:"">
 <!-- LOCALIZATION NOTE (changeSearchSettings.button):
      This string won't wrap, so if the translated string is longer,
      consider translating it as if it said only ""Search Settings"". -->
diff -r b134d9db39a9 -r 7af558091d18 browser/themes/linux/browser.css
--- a/browser/themes/linux/browser.css	Tue Aug 13 18:29:29 2019 +0000
+++ b/browser/themes/linux/browser.css	Tue Aug 13 19:03:20 2019 +0000
@@ -315,7 +315,7 @@
   border-top: 1px solid ThreeDShadow;
 }
 
-#urlbarView-results {
+#urlbar-results {
   font-size: 1.05em;
 }
 
diff -r b134d9db39a9 -r 7af558091d18 browser/themes/osx/browser.css
--- a/browser/themes/osx/browser.css	Tue Aug 13 18:29:29 2019 +0000
+++ b/browser/themes/osx/browser.css	Tue Aug 13 19:03:20 2019 +0000
@@ -318,7 +318,7 @@
   border-top: 1px solid #C7C7C7;
 }
 
-#urlbarView-results {
+#urlbar-results {
   font-size: 14px;
 }
 
diff -r b134d9db39a9 -r 7af558091d18 browser/themes/osx/searchbar.css
--- a/browser/themes/osx/searchbar.css	Tue Aug 13 18:29:29 2019 +0000
+++ b/browser/themes/osx/searchbar.css	Tue Aug 13 19:03:20 2019 +0000
@@ -4,11 +4,6 @@
 
 %include ../shared/searchbar.inc.css
 
-.search-panel-header,
-.addengine-item {
-  font-size: 10px;
-}
-
 .searchbar-popup {
   margin-top: 4px;
   margin-inline-start: 3px;
diff -r b134d9db39a9 -r 7af558091d18 browser/themes/shared/searchbar.inc.css
--- a/browser/themes/shared/searchbar.inc.css	Tue Aug 13 18:29:29 2019 +0000
+++ b/browser/themes/shared/searchbar.inc.css	Tue Aug 13 19:03:20 2019 +0000
@@ -12,6 +12,8 @@
 
 .search-one-offs {
   -moz-box-orient: vertical;
+  border-top: 1px solid var(--panel-separator-color);
+  width: 100%;
 }
 
 /**
@@ -49,36 +51,27 @@
 
 .search-panel-header {
   font-weight: normal;
-  background-color: var(--arrowpanel-dimmed);
-  border-top: 1px solid var(--panel-separator-color);
   margin: 0;
-  padding: 3px 6px;
+  padding: 3px;
   color: var(--panel-disabled-color);
 }
 
-:root[lwt-popup-brighttext] .search-panel-header {
-  color: var(--autocomplete-popup-color);
-}
-
 .search-panel-header > label {
   margin-top: 2px !important;
   margin-bottom: 1px !important;
 }
 
-.search-panel-current-input > label {
-  margin: 2px 0 !important;
-}
-
 .search-panel-input-value {
   color: var(--autocomplete-popup-color);
 }
 
 .search-panel-one-offs {
   margin: 0 !important;
-  border-top: 1px solid var(--panel-separator-color);
-  background-color: var(--arrowpanel-dimmed);
   /* Bug 1108841: prevent font-size from affecting the layout */
   line-height: 0;
+  display: flex;
+  flex-direction: row;
+  flex-wrap: wrap;
 }
 
 .searchbar-engine-one-off-item {
@@ -88,35 +81,10 @@
   height: 32px;
   margin: 0;
   padding: 0;
-  background: linear-gradient(transparent 15%, var(--panel-separator-color) 15%, var(--panel-separator-color) 85%, transparent 85%);
-  background-size: 1px auto;
-  background-repeat: no-repeat;
-  background-position: right center;
   color: var(--panel-disabled-color);
 }
 
-.searchbar-engine-one-off-item:-moz-locale-dir(rtl) {
-  background-position-x: left;
-}
-
-.searchbar-engine-one-off-item:not(.last-row) {
-  box-sizing: content-box;
-  border-bottom: 1px solid var(--panel-separator-color);
-}
-
-.search-setting-button-compact {
-  border-bottom: none !important;
-}
-
-.search-one-offs:not([compact=true]) .searchbar-engine-one-off-item.last-of-row,
-.search-one-offs[compact=true] .searchbar-engine-one-off-item.last-of-row:not(.dummy),
-.search-one-offs[compact=true] .searchbar-engine-one-off-item.dummy:not(.last-of-row),
-.search-one-offs[compact=true] .searchbar-engine-one-off-item.last-engine,
-.search-setting-button-compact {
-  background-image: none;
-}
-
-.searchbar-engine-one-off-item:not([selected]):not(.dummy):hover,
+.searchbar-engine-one-off-item:not([selected]):hover,
 .addengine-item:hover {
   background-color: var(--arrowpanel-dimmed-further);
   color: inherit;
@@ -124,7 +92,6 @@
 
 .searchbar-engine-one-off-item[selected] {
   background-color: var(--autocomplete-popup-highlight-background);
-  background-image: none;
   color: var(--autocomplete-popup-highlight-color);
 }
 
@@ -143,10 +110,6 @@
   height: 16px;
 }
 
-.search-add-engines {
-  background-color: var(--arrowpanel-dimmed);
-}
-
 .addengine-item {
   -moz-appearance: none;
   color: inherit;
@@ -238,6 +201,13 @@
   -moz-appearance: none;
   margin: 0;
   min-height: 32px;
+  border-top: 1px solid var(--panel-separator-color);
+  background-color: var(--arrowpanel-dimmed);
+  color: var(--panel-disabled-color);
+}
+
+.search-setting-button-compact {
+  max-height: 32px;
 }
 
 .search-setting-button:hover,
diff -r b134d9db39a9 -r 7af558091d18 browser/themes/shared/urlbar-autocomplete.inc.css
--- a/browser/themes/shared/urlbar-autocomplete.inc.css	Tue Aug 13 18:29:29 2019 +0000
+++ b/browser/themes/shared/urlbar-autocomplete.inc.css	Tue Aug 13 19:03:20 2019 +0000
@@ -248,6 +248,33 @@
   color: var(--autocomplete-popup-highlight-background);
 }
 
+/* Search one-offs. */
+#urlbar-results > .search-one-offs {
+  -moz-box-orient: horizontal;
+  padding-inline-start: var(--item-padding-start, 5px);
+  padding-inline-end: var(--item-padding-end, 5px);
+  padding-top: 16px;
+  padding-bottom: 16px;
+}
+
+#urlbar-results .search-panel-one-offs {
+  padding-left: 12px;
+  padding-right: 12px;
+}
+
+#urlbar-results .search-panel-header {
+  padding: 0;
+  display: flex;
+  flex-direction: column;
+  justify-content: center;
+}
+
+#urlbar-results .searchbar-engine-one-off-item {
+  min-width: 32px;
+  height: 32px;
+  margin: 0 4px;
+}
+
 /* search bar popup */
 
 #PopupSearchAutoComplete {
diff -r b134d9db39a9 -r 7af558091d18 browser/themes/windows/browser.css
--- a/browser/themes/windows/browser.css	Tue Aug 13 18:29:29 2019 +0000
+++ b/browser/themes/windows/browser.css	Tue Aug 13 19:03:20 2019 +0000
@@ -609,7 +609,7 @@
 %include ../shared/autocomplete.inc.css
 %include ../shared/urlbar-autocomplete.inc.css
 
-#urlbarView-results {
+#urlbar-results {
   font-size: 1.15em;
 }
 
","diff -r da2361310c67 -r c6ceaf18bea3 browser/themes/shared/urlbar-autocomplete.inc.css
--- a/browser/themes/shared/urlbar-autocomplete.inc.css	Thu Sep 26 15:18:59 2019 +0000
+++ b/browser/themes/shared/urlbar-autocomplete.inc.css	Thu Sep 26 15:26:42 2019 +0000
@@ -394,7 +394,10 @@
 }
 
 #urlbar .search-panel-one-offs {
-  padding-inline: 12px;
+  padding-inline-start: 12px;
+  /* Make sure we can fit at least three buttons horizontally. */
+  min-width: 120px;
+  box-sizing: content-box;
 }
 
 #urlbar .search-panel-header {
",1561894,7af558091d18077a0a09d8528027c73a0b7eab9f,"Bug 1561894 - Implement simplified one-off search button design. r=dao

Differential Revision: https://phabricator.services.mozilla.com/D39751",1581753,"Bug 1581753 - Improve one-off search button layout in narrow windows. r=mak

Differential Revision: https://phabricator.services.mozilla.com/D47270",2019-08-13T19:03:00+00:00,Implement simplified one-off search button design,"Invision spec: https://mozilla.invisionapp.com/share/DNSDVW5E8QK#/screens/367251846_Photon_Design_Update

Putting the ""This time, search with:"" string on the same line as the buttons might create problems with locales using a longer string, and there are edge cases when a user has lots of engines or a narrow urlbar. Need to clarify that with UX.",Improve one-off search button layout in very narrow windows,"Created attachment 9093218
search_notResponsive.png

**Affected versions**
* 70.0b7, 71.0a1 (2019-09-05) ;

**Affected platforms**
* Windows 10, Ubuntu 18.40, macOS 10.12;

**Steps to reproduce**
1.  Launch Firefox ;
2. Resize the browser to @ 1/4 width of the screen;
3. Click to open the address bar;

**Expected result**
* One-of search options are displayed in the screen;

**Actual result**
* The dropdown has a min-width that is fixed and does not take in account the resize;
* buttons get truncated instead of being shifted into a visible position(space is available for it);

**Regression range**
* Potential regressor: 1561894

**Additional notes**
* attached screenshot with the issue;"
96917f5eb072c52c4a9d005d40123d8af1b1354f,2019-10-09T09:28:00+00:00,"diff -r e99ec6c4418f -r 2268e6a9359e browser/base/content/browser-addons.js
--- a/browser/base/content/browser-addons.js	Sun May 05 23:39:27 2019 +0000
+++ b/browser/base/content/browser-addons.js	Fri May 03 21:44:24 2019 +0000
@@ -349,6 +349,31 @@
             .add(Ci.nsISecurityUITelemetry.WARNING_CONFIRM_ADDON_INSTALL);
   },
 
+  // IDs of addon install related notifications
+  NOTIFICATION_IDS: [
+    ""addon-install-blocked"",
+    ""addon-install-blocked-silent"",
+    ""addon-install-complete"",
+    ""addon-install-confirmation"",
+    ""addon-install-disabled"",
+    ""addon-install-failed"",
+    ""addon-install-origin-blocked"",
+    ""addon-install-started"",
+    ""addon-progress"",
+    ""addon-webext-permissions"",
+    ""xpinstall-disabled"",
+  ],
+
+  // Remove all opened addon installation notifications
+  removeAllNotifications(browser) {
+    this.NOTIFICATION_IDS.forEach((id) => {
+      let notification = PopupNotifications.getNotification(id, browser);
+      if (notification) {
+        PopupNotifications.remove(notification);
+      }
+    });
+  },
+
   observe(aSubject, aTopic, aData) {
     var brandBundle = document.getElementById(""bundle_brand"");
     var installInfo = aSubject.wrappedJSObject;
diff -r e99ec6c4418f -r 2268e6a9359e browser/base/content/browser-fullScreenAndPointerLock.js
--- a/browser/base/content/browser-fullScreenAndPointerLock.js	Sun May 05 23:39:27 2019 +0000
+++ b/browser/base/content/browser-fullScreenAndPointerLock.js	Fri May 03 21:44:24 2019 +0000
@@ -373,6 +373,12 @@
         } else {
           browser = event.target.ownerGlobal.docShell.chromeEventHandler;
         }
+
+        // Addon installation should be cancelled when entering fullscreen for security and usability reasons.
+        // Installation prompts in fullscreen can trick the user into installing unwanted addons.
+        // In fullscreen the notification box does not have a clear visual association with its parent anymore.
+        gXPInstallObserver.removeAllNotifications(browser);
+
         TelemetryStopwatch.start(""FULLSCREEN_CHANGE_MS"");
         this.enterDomFullscreen(browser);
         break;
diff -r e99ec6c4418f -r 2268e6a9359e toolkit/mozapps/extensions/AddonManager.jsm
--- a/toolkit/mozapps/extensions/AddonManager.jsm	Sun May 05 23:39:27 2019 +0000
+++ b/toolkit/mozapps/extensions/AddonManager.jsm	Fri May 03 21:44:24 2019 +0000
@@ -1806,6 +1806,15 @@
         this.installNotifyObservers(""addon-install-origin-blocked"", topBrowser,
                                     aInstallingPrincipal.URI, aInstall);
         return;
+      } else if (topBrowser.ownerGlobal.fullScreen) {
+        // Addon installation and the resulting notifications should be blocked in fullscreen for security and usability reasons.
+        // Installation prompts in fullscreen can trick the user into installing unwanted addons.
+        // In fullscreen the notification box does not have a clear visual association with its parent anymore.
+        aInstall.cancel();
+
+        this.installNotifyObservers(""addon-install-blocked-silent"", topBrowser,
+                                    aInstallingPrincipal.URI, aInstall);
+        return;
       }
 
       // The install may start now depending on the web install listener,
diff -r e99ec6c4418f -r 2268e6a9359e toolkit/mozapps/extensions/test/xpinstall/browser.ini
--- a/toolkit/mozapps/extensions/test/xpinstall/browser.ini	Sun May 05 23:39:27 2019 +0000
+++ b/toolkit/mozapps/extensions/test/xpinstall/browser.ini	Fri May 03 21:44:24 2019 +0000
@@ -33,6 +33,7 @@
 [browser_badargs2.js]
 [browser_badhash.js]
 [browser_badhashtype.js]
+[browser_block_fullscreen_prompt.js]
 [browser_bug540558.js]
 [browser_bug611242.js]
 [browser_bug638292.js]
diff -r e99ec6c4418f -r 2268e6a9359e toolkit/mozapps/extensions/test/xpinstall/browser_block_fullscreen_prompt.js
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/toolkit/mozapps/extensions/test/xpinstall/browser_block_fullscreen_prompt.js	Fri May 03 21:44:24 2019 +0000
@@ -0,0 +1,109 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+""use strict"";
+
+// This test tends to trigger a race in the fullscreen time telemetry,
+// where the fullscreen enter and fullscreen exit events (which use the
+// same histogram ID) overlap. That causes TelemetryStopwatch to log an
+// error.
+SimpleTest.ignoreAllUncaughtExceptions(true);
+
+const ADDON_FILE_URI = ""http://example.com/browser/toolkit/mozapps/extensions/test/xpinstall/amosigned.xpi"";
+
+const ADDON_EVENTS = [
+  ""addon-install-blocked"",
+  ""addon-install-blocked-silent"",
+  ""addon-install-complete"",
+  ""addon-install-confirmation"",
+  ""addon-install-disabled"",
+  ""addon-install-failed"",
+  ""addon-install-origin-blocked"",
+  ""addon-install-started"",
+  ""addon-progress"",
+  ""addon-webext-permissions"",
+  ""xpinstall-disabled"",
+];
+
+/**
+ * Registers observers for addon installation events and resolves promise on first matching event
+ */
+function waitForNextAddonEvent() {
+  return Promise.race(ADDON_EVENTS.map( async (eventStr) => {
+    await TestUtils.topicObserved(eventStr);
+    return eventStr;
+  }));
+}
+
+/**
+ * Check if an addon installation prompt is visible
+ */
+function addonPromptVisible(browser) {
+  if (!PopupNotifications.isPanelOpen) return false;
+  if (ADDON_EVENTS.some(id => PopupNotifications.getNotification(id, browser) != null)) return true;
+  return false;
+}
+
+/**
+ * Spawns content task in browser to enter / leave fullscreen
+ * @param browser - Browser to use for JS fullscreen requests
+ * @param {Boolean} fullscreenState - true to enter fullscreen, false to leave
+ */
+function changeFullscreen(browser, fullscreenState) {
+  return ContentTask.spawn(browser, fullscreenState, async function(state) {
+    if (state) {
+      await content.document.body.requestFullscreen();
+    } else {
+      await content.document.exitFullscreen();
+    }
+  });
+}
+
+// This tests if addon installation is blocked when requested in fullscreen
+add_task(async function testFullscreenBlockAddonInstallPrompt() {
+  // Open example.com
+  await BrowserTestUtils.withNewTab(""http://example.com"", async function(browser) {
+    await changeFullscreen(browser, true);
+
+    // Navigate to addon file path
+    BrowserTestUtils.loadURI(browser, ADDON_FILE_URI);
+
+    // Wait for addon manager event and check if installation has been blocked
+    let eventStr = await waitForNextAddonEvent();
+
+    Assert.equal(eventStr, ""addon-install-blocked-silent"", ""Addon installation was blocked"");
+
+    // Test if addon installation prompt has been blocked
+    Assert.ok(!addonPromptVisible(), ""Addon installation prompt not opened"");
+
+    await changeFullscreen(browser, false);
+  });
+});
+
+
+
+// This tests if the addon install prompt is closed when entering fullscreen
+add_task(async function testFullscreenCloseAddonInstallPrompt() {
+  // Open example.com
+  await BrowserTestUtils.withNewTab(""http://example.com"", async function(browser) {
+    // Navigate to addon file path
+    BrowserTestUtils.loadURI(browser, ADDON_FILE_URI);
+
+    // Test if addon installation started
+    let eventStr = await waitForNextAddonEvent();
+
+    Assert.ok(eventStr === ""addon-install-started"", ""Addon installation started"");
+
+    // Test if addon installation prompt is visible
+    Assert.ok(addonPromptVisible(), ""Addon installation prompt opened"");
+
+    // Switch to fullscreen
+    await changeFullscreen(browser, true);
+
+    // Test if addon installation prompt has been closed
+    Assert.ok(!addonPromptVisible(), ""Addon installation prompt closed for fullscreen"");
+
+    await changeFullscreen(browser, false);
+  });
+});
","diff -r b5e0f6f76dd6 -r 96917f5eb072 browser/base/content/browser-fullScreenAndPointerLock.js
--- a/browser/base/content/browser-fullScreenAndPointerLock.js	Wed Oct 09 08:03:45 2019 +0000
+++ b/browser/base/content/browser-fullScreenAndPointerLock.js	Wed Oct 09 09:28:19 2019 +0000
@@ -543,7 +543,7 @@
     // fullscreen window is refocused.
     window.addEventListener(""activate"", this);
 
-    // Addon installation should be cancelled when entering fullscreen for security and usability reasons.
+    // Addon installation should be cancelled when entering DOM fullscreen for security and usability reasons.
     // Installation prompts in fullscreen can trick the user into installing unwanted addons.
     // In fullscreen the notification box does not have a clear visual association with its parent anymore.
     if (gXPInstallObserver.removeAllNotifications(aBrowser)) {
diff -r b5e0f6f76dd6 -r 96917f5eb072 toolkit/mozapps/extensions/AddonManager.jsm
--- a/toolkit/mozapps/extensions/AddonManager.jsm	Wed Oct 09 08:03:45 2019 +0000
+++ b/toolkit/mozapps/extensions/AddonManager.jsm	Wed Oct 09 09:28:19 2019 +0000
@@ -2300,10 +2300,15 @@
     }
 
     try {
-      if (topBrowser.ownerGlobal.fullScreen) {
-        // Addon installation and the resulting notifications should be blocked in fullscreen for security and usability reasons.
-        // Installation prompts in fullscreen can trick the user into installing unwanted addons.
-        // In fullscreen the notification box does not have a clear visual association with its parent anymore.
+      // Use fullscreenElement to check for DOM fullscreen, while still allowing
+      // macOS fullscreen, which still has a browser chrome.
+      if (topBrowser.ownerDocument.fullscreenElement) {
+        // Addon installation and the resulting notifications should be
+        // blocked in DOM fullscreen for security and usability reasons.
+        // Installation prompts in fullscreen can trick the user into
+        // installing unwanted addons.
+        // In fullscreen the notification box does not have a clear
+        // visual association with its parent anymore.
         aInstall.cancel();
 
         this.installNotifyObservers(
",1412561,2268e6a9359ed9ddcf3a0325853984c32f93930e,"Bug 1412561 - Block addon installation prompts in fullscreen mode. r=johannh,aswan

Differential Revision: https://phabricator.services.mozilla.com/D27734",1583665,"Bug 1583665 - Fixed AddonManager.jsm fullscreen check to only cancel installation for DOM fullscreen. r=johannh

Differential Revision: https://phabricator.services.mozilla.com/D47933",2019-05-03T21:44:00+00:00,Add-on installation should be blocked when in full-screen mode,"The page mentioned in bug 1412559 (if it sometimes decides not to make the browser instantly unusable / locked up) switches the browser into fullscreen mode and then pops up the add-on installation doorhanger notification.[1]

Allowing the add-on installation doorhanger notification to appear in fullscreen mode is bad for two reasons:
- It is possibly easier for a malicious website to try to trick the user by showing fake browser or operating system UI
- It is much more intimidating so the user is more likely to allow the installation.

I think an attempt to install add-ons should (silently?) fail when in fullscreen mode. I can't see any reason why a legitimate website would require to initiate add-on installation in full-screen mode.

(The .xpi the page attempts to install should probably be blacklisted if this isn't the case already. I have no idea how / where to report this.)

[1] This is probably the wrong name: It's not asking ""Do you want to install the following add-on"" but the ""Firefox prevented the site from asking you to install an add-on"" message, but that's not much better as it's just one more click.",Cannot install addon when running Firefox in a full screen window,"- Maximize Firefox on MacOS (clicking on the green expand icon in the top left corner of the window)
- Navigate to a.m.o
- Try to install any addon

Expected:
- Install door hanger appears

Actual:
- Nothing happens (looks really broken to me)

In the console there's this:

> Add-on installation is not allowed while in or before entering fullscreen mode.

which makes me think Firefox thinks it's running a website in fullscreen mode? but that's not true (the window is in fullscreen, but not the content, I still see the chrome)."
d4ad032434f8c1afaefd7f3e7abebd229aca2a8e,2020-04-14T13:04:00+00:00,"diff -r cd97a2fa34bc -r 94b9c150456b browser/base/content/test/performance/browser_startup_mainthreadio.js
--- a/browser/base/content/test/performance/browser_startup_mainthreadio.js	Fri Jul 26 02:49:56 2019 +0000
+++ b/browser/base/content/test/performance/browser_startup_mainthreadio.js	Fri Jul 26 02:45:52 2019 +0000
@@ -470,18 +470,6 @@
       condition: MAC,
       write: 3,
     },
-    {
-      // bug 1543090
-      path: ""GreD:omni.ja"",
-      condition: WIN,
-      stat: 1,
-    },
-    {
-      // bug 1543090
-      path: ""XCurProcD:omni.ja"",
-      condition: WIN,
-      stat: 2,
-    },
   ],
 
   // We are at this phase once we are ready to handle user events.
@@ -689,12 +677,6 @@
       stat: 3,
     },
     {
-      // bug 1543090
-      path: ""XCurProcD:omni.ja"",
-      condition: WIN,
-      stat: 7,
-    },
-    {
       // bug 1003968
       path: ""XREAppDist:searchplugins"",
       condition: WIN,
diff -r cd97a2fa34bc -r 94b9c150456b toolkit/mozapps/extensions/internal/XPIProvider.jsm
--- a/toolkit/mozapps/extensions/internal/XPIProvider.jsm	Fri Jul 26 02:49:56 2019 +0000
+++ b/toolkit/mozapps/extensions/internal/XPIProvider.jsm	Fri Jul 26 02:45:52 2019 +0000
@@ -453,7 +453,6 @@
  * as stored in the addonStartup.json file.
  */
 const JSON_FIELDS = Object.freeze([
-  ""changed"",
   ""dependencies"",
   ""enabled"",
   ""file"",
@@ -498,10 +497,8 @@
       saved.currentModifiedTime != this.lastModifiedTime
     ) {
       this.lastModifiedTime = saved.currentModifiedTime;
-      this.changed = true;
     } else if (saved.currentModifiedTime === null) {
       this.missing = true;
-      this.changed = true;
     }
   }
 
@@ -590,9 +587,9 @@
       logger.warn(""Can't get modified time of ${path}"", aFile, e);
     }
 
-    this.changed = mtime != this.lastModifiedTime;
+    let changed = mtime != this.lastModifiedTime;
     this.lastModifiedTime = mtime;
-    return this.changed;
+    return changed;
   }
 
   /**
@@ -647,29 +644,12 @@
     this.file = aDBAddon._sourceBundle;
     this.rootURI = aDBAddon.rootURI;
 
-    if (aUpdated || mustGetMod) {
-      let file = this.file;
-
-      // Built-in addons should have jar: rootURIs, use the mod time
-      // for the containing jar file for those.
-      if (!file) {
-        let fileUrl = this.resolvedRootURI;
-
-        if (fileUrl instanceof Ci.nsIJARURI) {
-          fileUrl = fileUrl.JARFile;
-        }
-        if (fileUrl instanceof Ci.nsIFileURL) {
-          file = fileUrl.file;
-        }
-      }
-
-      if (file) {
-        this.getModTime(file);
-        if (this.lastModifiedTime != aDBAddon.updateDate) {
-          aDBAddon.updateDate = this.lastModifiedTime;
-          if (XPIDatabase.initialized) {
-            XPIDatabase.saveChanges();
-          }
+    if ((aUpdated || mustGetMod) && this.file) {
+      this.getModTime(this.file);
+      if (this.lastModifiedTime != aDBAddon.updateDate) {
+        aDBAddon.updateDate = this.lastModifiedTime;
+        if (XPIDatabase.initialized) {
+          XPIDatabase.saveChanges();
         }
       }
     }
","diff -r 8d1c2a892a7d -r d4ad032434f8 toolkit/mozapps/extensions/internal/XPIDatabase.jsm
--- a/toolkit/mozapps/extensions/internal/XPIDatabase.jsm	Tue Apr 14 13:12:56 2020 +0000
+++ b/toolkit/mozapps/extensions/internal/XPIDatabase.jsm	Tue Apr 14 13:04:32 2020 +0000
@@ -1365,7 +1365,11 @@
 
 [""installDate"", ""updateDate""].forEach(function(aProp) {
   defineAddonWrapperProperty(aProp, function() {
-    return new Date(addonFor(this)[aProp]);
+    let addon = addonFor(this);
+    if (addon[aProp]) {
+      return new Date(addon[aProp]);
+    }
+    return null;
   });
 });
 
diff -r 8d1c2a892a7d -r d4ad032434f8 toolkit/mozapps/extensions/test/browser/browser_html_detail_view.js
--- a/toolkit/mozapps/extensions/test/browser/browser_html_detail_view.js	Tue Apr 14 13:12:56 2020 +0000
+++ b/toolkit/mozapps/extensions/test/browser/browser_html_detail_view.js	Tue Apr 14 13:04:32 2020 +0000
@@ -682,8 +682,7 @@
 
   // Last updated.
   let lastUpdated = rows.shift();
-  checkLabel(lastUpdated, ""last-updated"");
-  ok(lastUpdated.lastChild.textContent, ""There is a date set"");
+  is(lastUpdated, undefined, ""No Last Updated row"");
 
   is(rows.length, 0, ""There are no more rows"");
 
",1543090,94b9c150456ba2b0a9261a283d10fa228d629842,"Bug 1543090 Clean up unused bits of XPIState r=zombie

XPIState.getModTime() was setting a .changed property that nothing ever
looks at.  It also sets lastModifiedTime which is used from about:addons
but built-in addons aren't visible there so there's no point setting it
for them.

Differential Revision: https://phabricator.services.mozilla.com/D39061",1583844,"Bug 1583844 - ""Last updated"" field on Mozilla themes shows invalid date r=zombie

Differential Revision: https://phabricator.services.mozilla.com/D61057",2019-07-26T02:45:00+00:00,Clean up unused bits of XPIState,"Since I started working on bug 1540135 to catch startup main thread I/O regressions, some new startup main thread I/O got introduced:

TEST-UNEXPECTED-FAIL | browser/base/content/test/performance/browser_startup_mainthreadio.js | unexpected stat on Z:\task_1554125950\build\application\firefox\omni.ja before first paint - 
Stack trace:
  nsLocalFile::ResolveAndStat
  getModTime (resource://gre/modules/addons/XPIProvider.jsm:552:0)
  syncWithDB (resource://gre/modules/addons/XPIProvider.jsm:593:0)
  addAddon (resource://gre/modules/addons/XPIProvider.jsm:769:0)
  addAddon (resource://gre/modules/addons/XPIProvider.jsm:1545:0)
  install (resource://gre/modules/addons/XPIInstall.jsm:3750:0)
  InterpretGeneratorResume (self-hosted:1281:0)
  AsyncFunctionNext (self-hosted:837:0)
  promise callback
  XREMain::XRE_main
(PoisonIOInterposer) stat - Z:\task_1554125950\build\application\firefox\omni.ja

TEST-UNEXPECTED-FAIL | browser/base/content/test/performance/browser_startup_mainthreadio.js | unexpected stat on Z:\task_1554125950\build\application\firefox\browser\omni.ja before first paint - 
Stack trace:
  nsLocalFile::ResolveAndStat
  getModTime (resource://gre/modules/addons/XPIProvider.jsm:552:0)
  syncWithDB (resource://gre/modules/addons/XPIProvider.jsm:593:0)
  addAddon (resource://gre/modules/addons/XPIProvider.jsm:769:0)
  addAddon (resource://gre/modules/addons/XPIProvider.jsm:1545:0)
  install (resource://gre/modules/addons/XPIInstall.jsm:3750:0)
  InterpretGeneratorResume (self-hosted:1281:0)
  AsyncFunctionNext (self-hosted:837:0)
  promise callback
  XREMain::XRE_main
(PoisonIOInterposer) stat - Z:\task_1554125950\build\application\firefox\browser\omni.ja

TEST-UNEXPECTED-FAIL | browser/base/content/test/performance/browser_startup_mainthreadio.js | unexpected stat on Z:\task_1554125950\build\application\firefox\browser\omni.ja before first paint - 
Stack trace:
  nsLocalFile::ResolveAndStat
  getModTime (resource://gre/modules/addons/XPIProvider.jsm:552:0)
  syncWithDB (resource://gre/modules/addons/XPIProvider.jsm:593:0)
  addAddon (resource://gre/modules/addons/XPIProvider.jsm:769:0)
  addAddon (resource://gre/modules/addons/XPIProvider.jsm:1545:0)
  install (resource://gre/modules/addons/XPIInstall.jsm:3750:0)
  InterpretGeneratorResume (self-hosted:1281:0)
  AsyncFunctionNext (self-hosted:837:0)
  promise callback
  XREMain::XRE_main
(PoisonIOInterposer) stat - Z:\task_1554125950\build\application\firefox\browser\omni.ja

I vaguely suspect bug 1512436 of being the cause, but I haven't verified this.","""Last updated"" field on Mozilla themes shows invalid date","Created attachment 9095176
Screen Shot 2019-09-25 at 10.04.22 AM.png

Seen while running nightly on macOS. See attached screenshot. ""Invalid date"" shows for the dark theme and for the default theme."
